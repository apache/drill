/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from protobuf

package org.apache.drill.exec.proto;


public final class SchemaUserBitShared
{

    public static final class UserCredentials
    {
        public static final org.apache.drill.exec.proto.SchemaUserBitShared.UserCredentials.MessageSchema WRITE =
            new org.apache.drill.exec.proto.SchemaUserBitShared.UserCredentials.MessageSchema();
        public static final org.apache.drill.exec.proto.SchemaUserBitShared.UserCredentials.BuilderSchema MERGE =
            new org.apache.drill.exec.proto.SchemaUserBitShared.UserCredentials.BuilderSchema();
        
        public static class MessageSchema implements com.dyuproject.protostuff.Schema<org.apache.drill.exec.proto.UserBitShared.UserCredentials>
        {
            public void writeTo(com.dyuproject.protostuff.Output output, org.apache.drill.exec.proto.UserBitShared.UserCredentials message) throws java.io.IOException
            {
                if(message.hasUserName())
                    output.writeString(1, message.getUserName(), false);
            }
            public boolean isInitialized(org.apache.drill.exec.proto.UserBitShared.UserCredentials message)
            {
                return message.isInitialized();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.apache.drill.exec.proto.SchemaUserBitShared.UserCredentials.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.apache.drill.exec.proto.SchemaUserBitShared.UserCredentials.getFieldNumber(name);
            }
            public java.lang.Class<org.apache.drill.exec.proto.UserBitShared.UserCredentials> typeClass()
            {
                return org.apache.drill.exec.proto.UserBitShared.UserCredentials.class;
            }
            public java.lang.String messageName()
            {
                return org.apache.drill.exec.proto.UserBitShared.UserCredentials.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.apache.drill.exec.proto.UserBitShared.UserCredentials.class.getName();
            }
            //unused
            public void mergeFrom(com.dyuproject.protostuff.Input input, org.apache.drill.exec.proto.UserBitShared.UserCredentials message) throws java.io.IOException {}
            public org.apache.drill.exec.proto.UserBitShared.UserCredentials newMessage() { return null; }
        }
        public static class BuilderSchema implements com.dyuproject.protostuff.Schema<org.apache.drill.exec.proto.UserBitShared.UserCredentials.Builder>
        {
            public void mergeFrom(com.dyuproject.protostuff.Input input, org.apache.drill.exec.proto.UserBitShared.UserCredentials.Builder builder) throws java.io.IOException
            {
                for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
                {
                    switch(number)
                    {
                        case 0:
                            return;
                        case 1:
                            builder.setUserName(input.readString());
                            break;
                        default:
                            input.handleUnknownField(number, this);
                    }
                }
            }
            public boolean isInitialized(org.apache.drill.exec.proto.UserBitShared.UserCredentials.Builder builder)
            {
                return builder.isInitialized();
            }
            public org.apache.drill.exec.proto.UserBitShared.UserCredentials.Builder newMessage()
            {
                return org.apache.drill.exec.proto.UserBitShared.UserCredentials.newBuilder();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.apache.drill.exec.proto.SchemaUserBitShared.UserCredentials.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.apache.drill.exec.proto.SchemaUserBitShared.UserCredentials.getFieldNumber(name);
            }
            public java.lang.Class<org.apache.drill.exec.proto.UserBitShared.UserCredentials.Builder> typeClass()
            {
                return org.apache.drill.exec.proto.UserBitShared.UserCredentials.Builder.class;
            }
            public java.lang.String messageName()
            {
                return org.apache.drill.exec.proto.UserBitShared.UserCredentials.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.apache.drill.exec.proto.UserBitShared.UserCredentials.class.getName();
            }
            //unused
            public void writeTo(com.dyuproject.protostuff.Output output, org.apache.drill.exec.proto.UserBitShared.UserCredentials.Builder builder) throws java.io.IOException {}
        }
        public static java.lang.String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "userName";
                default: return null;
            }
        }
        public static int getFieldNumber(java.lang.String name)
        {
            java.lang.Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }
        private static final java.util.HashMap<java.lang.String,java.lang.Integer> fieldMap = new java.util.HashMap<java.lang.String,java.lang.Integer>();
        static
        {
            fieldMap.put("userName", 1);
        }
    }

    public static final class QueryId
    {
        public static final org.apache.drill.exec.proto.SchemaUserBitShared.QueryId.MessageSchema WRITE =
            new org.apache.drill.exec.proto.SchemaUserBitShared.QueryId.MessageSchema();
        public static final org.apache.drill.exec.proto.SchemaUserBitShared.QueryId.BuilderSchema MERGE =
            new org.apache.drill.exec.proto.SchemaUserBitShared.QueryId.BuilderSchema();
        
        public static class MessageSchema implements com.dyuproject.protostuff.Schema<org.apache.drill.exec.proto.UserBitShared.QueryId>
        {
            public void writeTo(com.dyuproject.protostuff.Output output, org.apache.drill.exec.proto.UserBitShared.QueryId message) throws java.io.IOException
            {
                if(message.hasPart1())
                    output.writeSFixed64(1, message.getPart1(), false);
                if(message.hasPart2())
                    output.writeSFixed64(2, message.getPart2(), false);
            }
            public boolean isInitialized(org.apache.drill.exec.proto.UserBitShared.QueryId message)
            {
                return message.isInitialized();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.apache.drill.exec.proto.SchemaUserBitShared.QueryId.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.apache.drill.exec.proto.SchemaUserBitShared.QueryId.getFieldNumber(name);
            }
            public java.lang.Class<org.apache.drill.exec.proto.UserBitShared.QueryId> typeClass()
            {
                return org.apache.drill.exec.proto.UserBitShared.QueryId.class;
            }
            public java.lang.String messageName()
            {
                return org.apache.drill.exec.proto.UserBitShared.QueryId.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.apache.drill.exec.proto.UserBitShared.QueryId.class.getName();
            }
            //unused
            public void mergeFrom(com.dyuproject.protostuff.Input input, org.apache.drill.exec.proto.UserBitShared.QueryId message) throws java.io.IOException {}
            public org.apache.drill.exec.proto.UserBitShared.QueryId newMessage() { return null; }
        }
        public static class BuilderSchema implements com.dyuproject.protostuff.Schema<org.apache.drill.exec.proto.UserBitShared.QueryId.Builder>
        {
            public void mergeFrom(com.dyuproject.protostuff.Input input, org.apache.drill.exec.proto.UserBitShared.QueryId.Builder builder) throws java.io.IOException
            {
                for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
                {
                    switch(number)
                    {
                        case 0:
                            return;
                        case 1:
                            builder.setPart1(input.readSFixed64());
                            break;
                        case 2:
                            builder.setPart2(input.readSFixed64());
                            break;
                        default:
                            input.handleUnknownField(number, this);
                    }
                }
            }
            public boolean isInitialized(org.apache.drill.exec.proto.UserBitShared.QueryId.Builder builder)
            {
                return builder.isInitialized();
            }
            public org.apache.drill.exec.proto.UserBitShared.QueryId.Builder newMessage()
            {
                return org.apache.drill.exec.proto.UserBitShared.QueryId.newBuilder();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.apache.drill.exec.proto.SchemaUserBitShared.QueryId.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.apache.drill.exec.proto.SchemaUserBitShared.QueryId.getFieldNumber(name);
            }
            public java.lang.Class<org.apache.drill.exec.proto.UserBitShared.QueryId.Builder> typeClass()
            {
                return org.apache.drill.exec.proto.UserBitShared.QueryId.Builder.class;
            }
            public java.lang.String messageName()
            {
                return org.apache.drill.exec.proto.UserBitShared.QueryId.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.apache.drill.exec.proto.UserBitShared.QueryId.class.getName();
            }
            //unused
            public void writeTo(com.dyuproject.protostuff.Output output, org.apache.drill.exec.proto.UserBitShared.QueryId.Builder builder) throws java.io.IOException {}
        }
        public static java.lang.String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "part1";
                case 2: return "part2";
                default: return null;
            }
        }
        public static int getFieldNumber(java.lang.String name)
        {
            java.lang.Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }
        private static final java.util.HashMap<java.lang.String,java.lang.Integer> fieldMap = new java.util.HashMap<java.lang.String,java.lang.Integer>();
        static
        {
            fieldMap.put("part1", 1);
            fieldMap.put("part2", 2);
        }
    }

    public static final class DrillPBError
    {
        public static final org.apache.drill.exec.proto.SchemaUserBitShared.DrillPBError.MessageSchema WRITE =
            new org.apache.drill.exec.proto.SchemaUserBitShared.DrillPBError.MessageSchema();
        public static final org.apache.drill.exec.proto.SchemaUserBitShared.DrillPBError.BuilderSchema MERGE =
            new org.apache.drill.exec.proto.SchemaUserBitShared.DrillPBError.BuilderSchema();
        
        public static class MessageSchema implements com.dyuproject.protostuff.Schema<org.apache.drill.exec.proto.UserBitShared.DrillPBError>
        {
            public void writeTo(com.dyuproject.protostuff.Output output, org.apache.drill.exec.proto.UserBitShared.DrillPBError message) throws java.io.IOException
            {
                if(message.hasErrorId())
                    output.writeString(1, message.getErrorId(), false);
                if(message.hasEndpoint())
                    output.writeObject(2, message.getEndpoint(), org.apache.drill.exec.proto.SchemaCoordinationProtos.DrillbitEndpoint.WRITE, false);

                if(message.hasErrorType())
                    output.writeEnum(3, message.getErrorType().getNumber(), false);
                if(message.hasMessage())
                    output.writeString(4, message.getMessage(), false);
                if(message.hasException())
                    output.writeObject(5, message.getException(), org.apache.drill.exec.proto.SchemaUserBitShared.ExceptionWrapper.WRITE, false);

                for(org.apache.drill.exec.proto.UserBitShared.ParsingError parsingError : message.getParsingErrorList())
                    output.writeObject(6, parsingError, org.apache.drill.exec.proto.SchemaUserBitShared.ParsingError.WRITE, true);

            }
            public boolean isInitialized(org.apache.drill.exec.proto.UserBitShared.DrillPBError message)
            {
                return message.isInitialized();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.apache.drill.exec.proto.SchemaUserBitShared.DrillPBError.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.apache.drill.exec.proto.SchemaUserBitShared.DrillPBError.getFieldNumber(name);
            }
            public java.lang.Class<org.apache.drill.exec.proto.UserBitShared.DrillPBError> typeClass()
            {
                return org.apache.drill.exec.proto.UserBitShared.DrillPBError.class;
            }
            public java.lang.String messageName()
            {
                return org.apache.drill.exec.proto.UserBitShared.DrillPBError.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.apache.drill.exec.proto.UserBitShared.DrillPBError.class.getName();
            }
            //unused
            public void mergeFrom(com.dyuproject.protostuff.Input input, org.apache.drill.exec.proto.UserBitShared.DrillPBError message) throws java.io.IOException {}
            public org.apache.drill.exec.proto.UserBitShared.DrillPBError newMessage() { return null; }
        }
        public static class BuilderSchema implements com.dyuproject.protostuff.Schema<org.apache.drill.exec.proto.UserBitShared.DrillPBError.Builder>
        {
            public void mergeFrom(com.dyuproject.protostuff.Input input, org.apache.drill.exec.proto.UserBitShared.DrillPBError.Builder builder) throws java.io.IOException
            {
                for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
                {
                    switch(number)
                    {
                        case 0:
                            return;
                        case 1:
                            builder.setErrorId(input.readString());
                            break;
                        case 2:
                            builder.setEndpoint(input.mergeObject(org.apache.drill.exec.proto.CoordinationProtos.DrillbitEndpoint.newBuilder(), org.apache.drill.exec.proto.SchemaCoordinationProtos.DrillbitEndpoint.MERGE));

                            break;
                        case 3:
                            builder.setErrorType(org.apache.drill.exec.proto.UserBitShared.DrillPBError.ErrorType.valueOf(input.readEnum()));
                            break;
                        case 4:
                            builder.setMessage(input.readString());
                            break;
                        case 5:
                            builder.setException(input.mergeObject(org.apache.drill.exec.proto.UserBitShared.ExceptionWrapper.newBuilder(), org.apache.drill.exec.proto.SchemaUserBitShared.ExceptionWrapper.MERGE));

                            break;
                        case 6:
                            builder.addParsingError(input.mergeObject(org.apache.drill.exec.proto.UserBitShared.ParsingError.newBuilder(), org.apache.drill.exec.proto.SchemaUserBitShared.ParsingError.MERGE));

                            break;
                        default:
                            input.handleUnknownField(number, this);
                    }
                }
            }
            public boolean isInitialized(org.apache.drill.exec.proto.UserBitShared.DrillPBError.Builder builder)
            {
                return builder.isInitialized();
            }
            public org.apache.drill.exec.proto.UserBitShared.DrillPBError.Builder newMessage()
            {
                return org.apache.drill.exec.proto.UserBitShared.DrillPBError.newBuilder();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.apache.drill.exec.proto.SchemaUserBitShared.DrillPBError.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.apache.drill.exec.proto.SchemaUserBitShared.DrillPBError.getFieldNumber(name);
            }
            public java.lang.Class<org.apache.drill.exec.proto.UserBitShared.DrillPBError.Builder> typeClass()
            {
                return org.apache.drill.exec.proto.UserBitShared.DrillPBError.Builder.class;
            }
            public java.lang.String messageName()
            {
                return org.apache.drill.exec.proto.UserBitShared.DrillPBError.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.apache.drill.exec.proto.UserBitShared.DrillPBError.class.getName();
            }
            //unused
            public void writeTo(com.dyuproject.protostuff.Output output, org.apache.drill.exec.proto.UserBitShared.DrillPBError.Builder builder) throws java.io.IOException {}
        }
        public static java.lang.String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "errorId";
                case 2: return "endpoint";
                case 3: return "errorType";
                case 4: return "message";
                case 5: return "exception";
                case 6: return "parsingError";
                default: return null;
            }
        }
        public static int getFieldNumber(java.lang.String name)
        {
            java.lang.Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }
        private static final java.util.HashMap<java.lang.String,java.lang.Integer> fieldMap = new java.util.HashMap<java.lang.String,java.lang.Integer>();
        static
        {
            fieldMap.put("errorId", 1);
            fieldMap.put("endpoint", 2);
            fieldMap.put("errorType", 3);
            fieldMap.put("message", 4);
            fieldMap.put("exception", 5);
            fieldMap.put("parsingError", 6);
        }
    }

    public static final class ExceptionWrapper
    {
        public static final org.apache.drill.exec.proto.SchemaUserBitShared.ExceptionWrapper.MessageSchema WRITE =
            new org.apache.drill.exec.proto.SchemaUserBitShared.ExceptionWrapper.MessageSchema();
        public static final org.apache.drill.exec.proto.SchemaUserBitShared.ExceptionWrapper.BuilderSchema MERGE =
            new org.apache.drill.exec.proto.SchemaUserBitShared.ExceptionWrapper.BuilderSchema();
        
        public static class MessageSchema implements com.dyuproject.protostuff.Schema<org.apache.drill.exec.proto.UserBitShared.ExceptionWrapper>
        {
            public void writeTo(com.dyuproject.protostuff.Output output, org.apache.drill.exec.proto.UserBitShared.ExceptionWrapper message) throws java.io.IOException
            {
                if(message.hasExceptionClass())
                    output.writeString(1, message.getExceptionClass(), false);
                if(message.hasMessage())
                    output.writeString(2, message.getMessage(), false);
                for(org.apache.drill.exec.proto.UserBitShared.StackTraceElementWrapper stackTrace : message.getStackTraceList())
                    output.writeObject(3, stackTrace, org.apache.drill.exec.proto.SchemaUserBitShared.StackTraceElementWrapper.WRITE, true);

                if(message.hasCause())
                    output.writeObject(4, message.getCause(), org.apache.drill.exec.proto.SchemaUserBitShared.ExceptionWrapper.WRITE, false);

            }
            public boolean isInitialized(org.apache.drill.exec.proto.UserBitShared.ExceptionWrapper message)
            {
                return message.isInitialized();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.apache.drill.exec.proto.SchemaUserBitShared.ExceptionWrapper.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.apache.drill.exec.proto.SchemaUserBitShared.ExceptionWrapper.getFieldNumber(name);
            }
            public java.lang.Class<org.apache.drill.exec.proto.UserBitShared.ExceptionWrapper> typeClass()
            {
                return org.apache.drill.exec.proto.UserBitShared.ExceptionWrapper.class;
            }
            public java.lang.String messageName()
            {
                return org.apache.drill.exec.proto.UserBitShared.ExceptionWrapper.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.apache.drill.exec.proto.UserBitShared.ExceptionWrapper.class.getName();
            }
            //unused
            public void mergeFrom(com.dyuproject.protostuff.Input input, org.apache.drill.exec.proto.UserBitShared.ExceptionWrapper message) throws java.io.IOException {}
            public org.apache.drill.exec.proto.UserBitShared.ExceptionWrapper newMessage() { return null; }
        }
        public static class BuilderSchema implements com.dyuproject.protostuff.Schema<org.apache.drill.exec.proto.UserBitShared.ExceptionWrapper.Builder>
        {
            public void mergeFrom(com.dyuproject.protostuff.Input input, org.apache.drill.exec.proto.UserBitShared.ExceptionWrapper.Builder builder) throws java.io.IOException
            {
                for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
                {
                    switch(number)
                    {
                        case 0:
                            return;
                        case 1:
                            builder.setExceptionClass(input.readString());
                            break;
                        case 2:
                            builder.setMessage(input.readString());
                            break;
                        case 3:
                            builder.addStackTrace(input.mergeObject(org.apache.drill.exec.proto.UserBitShared.StackTraceElementWrapper.newBuilder(), org.apache.drill.exec.proto.SchemaUserBitShared.StackTraceElementWrapper.MERGE));

                            break;
                        case 4:
                            builder.setCause(input.mergeObject(org.apache.drill.exec.proto.UserBitShared.ExceptionWrapper.newBuilder(), org.apache.drill.exec.proto.SchemaUserBitShared.ExceptionWrapper.MERGE));

                            break;
                        default:
                            input.handleUnknownField(number, this);
                    }
                }
            }
            public boolean isInitialized(org.apache.drill.exec.proto.UserBitShared.ExceptionWrapper.Builder builder)
            {
                return builder.isInitialized();
            }
            public org.apache.drill.exec.proto.UserBitShared.ExceptionWrapper.Builder newMessage()
            {
                return org.apache.drill.exec.proto.UserBitShared.ExceptionWrapper.newBuilder();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.apache.drill.exec.proto.SchemaUserBitShared.ExceptionWrapper.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.apache.drill.exec.proto.SchemaUserBitShared.ExceptionWrapper.getFieldNumber(name);
            }
            public java.lang.Class<org.apache.drill.exec.proto.UserBitShared.ExceptionWrapper.Builder> typeClass()
            {
                return org.apache.drill.exec.proto.UserBitShared.ExceptionWrapper.Builder.class;
            }
            public java.lang.String messageName()
            {
                return org.apache.drill.exec.proto.UserBitShared.ExceptionWrapper.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.apache.drill.exec.proto.UserBitShared.ExceptionWrapper.class.getName();
            }
            //unused
            public void writeTo(com.dyuproject.protostuff.Output output, org.apache.drill.exec.proto.UserBitShared.ExceptionWrapper.Builder builder) throws java.io.IOException {}
        }
        public static java.lang.String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "exceptionClass";
                case 2: return "message";
                case 3: return "stackTrace";
                case 4: return "cause";
                default: return null;
            }
        }
        public static int getFieldNumber(java.lang.String name)
        {
            java.lang.Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }
        private static final java.util.HashMap<java.lang.String,java.lang.Integer> fieldMap = new java.util.HashMap<java.lang.String,java.lang.Integer>();
        static
        {
            fieldMap.put("exceptionClass", 1);
            fieldMap.put("message", 2);
            fieldMap.put("stackTrace", 3);
            fieldMap.put("cause", 4);
        }
    }

    public static final class StackTraceElementWrapper
    {
        public static final org.apache.drill.exec.proto.SchemaUserBitShared.StackTraceElementWrapper.MessageSchema WRITE =
            new org.apache.drill.exec.proto.SchemaUserBitShared.StackTraceElementWrapper.MessageSchema();
        public static final org.apache.drill.exec.proto.SchemaUserBitShared.StackTraceElementWrapper.BuilderSchema MERGE =
            new org.apache.drill.exec.proto.SchemaUserBitShared.StackTraceElementWrapper.BuilderSchema();
        
        public static class MessageSchema implements com.dyuproject.protostuff.Schema<org.apache.drill.exec.proto.UserBitShared.StackTraceElementWrapper>
        {
            public void writeTo(com.dyuproject.protostuff.Output output, org.apache.drill.exec.proto.UserBitShared.StackTraceElementWrapper message) throws java.io.IOException
            {
                if(message.hasClassName())
                    output.writeString(1, message.getClassName(), false);
                if(message.hasFileName())
                    output.writeString(2, message.getFileName(), false);
                if(message.hasLineNumber())
                    output.writeInt32(3, message.getLineNumber(), false);
                if(message.hasMethodName())
                    output.writeString(4, message.getMethodName(), false);
                if(message.hasIsNativeMethod())
                    output.writeBool(5, message.getIsNativeMethod(), false);
            }
            public boolean isInitialized(org.apache.drill.exec.proto.UserBitShared.StackTraceElementWrapper message)
            {
                return message.isInitialized();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.apache.drill.exec.proto.SchemaUserBitShared.StackTraceElementWrapper.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.apache.drill.exec.proto.SchemaUserBitShared.StackTraceElementWrapper.getFieldNumber(name);
            }
            public java.lang.Class<org.apache.drill.exec.proto.UserBitShared.StackTraceElementWrapper> typeClass()
            {
                return org.apache.drill.exec.proto.UserBitShared.StackTraceElementWrapper.class;
            }
            public java.lang.String messageName()
            {
                return org.apache.drill.exec.proto.UserBitShared.StackTraceElementWrapper.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.apache.drill.exec.proto.UserBitShared.StackTraceElementWrapper.class.getName();
            }
            //unused
            public void mergeFrom(com.dyuproject.protostuff.Input input, org.apache.drill.exec.proto.UserBitShared.StackTraceElementWrapper message) throws java.io.IOException {}
            public org.apache.drill.exec.proto.UserBitShared.StackTraceElementWrapper newMessage() { return null; }
        }
        public static class BuilderSchema implements com.dyuproject.protostuff.Schema<org.apache.drill.exec.proto.UserBitShared.StackTraceElementWrapper.Builder>
        {
            public void mergeFrom(com.dyuproject.protostuff.Input input, org.apache.drill.exec.proto.UserBitShared.StackTraceElementWrapper.Builder builder) throws java.io.IOException
            {
                for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
                {
                    switch(number)
                    {
                        case 0:
                            return;
                        case 1:
                            builder.setClassName(input.readString());
                            break;
                        case 2:
                            builder.setFileName(input.readString());
                            break;
                        case 3:
                            builder.setLineNumber(input.readInt32());
                            break;
                        case 4:
                            builder.setMethodName(input.readString());
                            break;
                        case 5:
                            builder.setIsNativeMethod(input.readBool());
                            break;
                        default:
                            input.handleUnknownField(number, this);
                    }
                }
            }
            public boolean isInitialized(org.apache.drill.exec.proto.UserBitShared.StackTraceElementWrapper.Builder builder)
            {
                return builder.isInitialized();
            }
            public org.apache.drill.exec.proto.UserBitShared.StackTraceElementWrapper.Builder newMessage()
            {
                return org.apache.drill.exec.proto.UserBitShared.StackTraceElementWrapper.newBuilder();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.apache.drill.exec.proto.SchemaUserBitShared.StackTraceElementWrapper.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.apache.drill.exec.proto.SchemaUserBitShared.StackTraceElementWrapper.getFieldNumber(name);
            }
            public java.lang.Class<org.apache.drill.exec.proto.UserBitShared.StackTraceElementWrapper.Builder> typeClass()
            {
                return org.apache.drill.exec.proto.UserBitShared.StackTraceElementWrapper.Builder.class;
            }
            public java.lang.String messageName()
            {
                return org.apache.drill.exec.proto.UserBitShared.StackTraceElementWrapper.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.apache.drill.exec.proto.UserBitShared.StackTraceElementWrapper.class.getName();
            }
            //unused
            public void writeTo(com.dyuproject.protostuff.Output output, org.apache.drill.exec.proto.UserBitShared.StackTraceElementWrapper.Builder builder) throws java.io.IOException {}
        }
        public static java.lang.String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "className";
                case 2: return "fileName";
                case 3: return "lineNumber";
                case 4: return "methodName";
                case 5: return "isNativeMethod";
                default: return null;
            }
        }
        public static int getFieldNumber(java.lang.String name)
        {
            java.lang.Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }
        private static final java.util.HashMap<java.lang.String,java.lang.Integer> fieldMap = new java.util.HashMap<java.lang.String,java.lang.Integer>();
        static
        {
            fieldMap.put("className", 1);
            fieldMap.put("fileName", 2);
            fieldMap.put("lineNumber", 3);
            fieldMap.put("methodName", 4);
            fieldMap.put("isNativeMethod", 5);
        }
    }

    public static final class ParsingError
    {
        public static final org.apache.drill.exec.proto.SchemaUserBitShared.ParsingError.MessageSchema WRITE =
            new org.apache.drill.exec.proto.SchemaUserBitShared.ParsingError.MessageSchema();
        public static final org.apache.drill.exec.proto.SchemaUserBitShared.ParsingError.BuilderSchema MERGE =
            new org.apache.drill.exec.proto.SchemaUserBitShared.ParsingError.BuilderSchema();
        
        public static class MessageSchema implements com.dyuproject.protostuff.Schema<org.apache.drill.exec.proto.UserBitShared.ParsingError>
        {
            public void writeTo(com.dyuproject.protostuff.Output output, org.apache.drill.exec.proto.UserBitShared.ParsingError message) throws java.io.IOException
            {
                if(message.hasStartColumn())
                    output.writeInt32(2, message.getStartColumn(), false);
                if(message.hasStartRow())
                    output.writeInt32(3, message.getStartRow(), false);
                if(message.hasEndColumn())
                    output.writeInt32(4, message.getEndColumn(), false);
                if(message.hasEndRow())
                    output.writeInt32(5, message.getEndRow(), false);
            }
            public boolean isInitialized(org.apache.drill.exec.proto.UserBitShared.ParsingError message)
            {
                return message.isInitialized();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.apache.drill.exec.proto.SchemaUserBitShared.ParsingError.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.apache.drill.exec.proto.SchemaUserBitShared.ParsingError.getFieldNumber(name);
            }
            public java.lang.Class<org.apache.drill.exec.proto.UserBitShared.ParsingError> typeClass()
            {
                return org.apache.drill.exec.proto.UserBitShared.ParsingError.class;
            }
            public java.lang.String messageName()
            {
                return org.apache.drill.exec.proto.UserBitShared.ParsingError.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.apache.drill.exec.proto.UserBitShared.ParsingError.class.getName();
            }
            //unused
            public void mergeFrom(com.dyuproject.protostuff.Input input, org.apache.drill.exec.proto.UserBitShared.ParsingError message) throws java.io.IOException {}
            public org.apache.drill.exec.proto.UserBitShared.ParsingError newMessage() { return null; }
        }
        public static class BuilderSchema implements com.dyuproject.protostuff.Schema<org.apache.drill.exec.proto.UserBitShared.ParsingError.Builder>
        {
            public void mergeFrom(com.dyuproject.protostuff.Input input, org.apache.drill.exec.proto.UserBitShared.ParsingError.Builder builder) throws java.io.IOException
            {
                for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
                {
                    switch(number)
                    {
                        case 0:
                            return;
                        case 2:
                            builder.setStartColumn(input.readInt32());
                            break;
                        case 3:
                            builder.setStartRow(input.readInt32());
                            break;
                        case 4:
                            builder.setEndColumn(input.readInt32());
                            break;
                        case 5:
                            builder.setEndRow(input.readInt32());
                            break;
                        default:
                            input.handleUnknownField(number, this);
                    }
                }
            }
            public boolean isInitialized(org.apache.drill.exec.proto.UserBitShared.ParsingError.Builder builder)
            {
                return builder.isInitialized();
            }
            public org.apache.drill.exec.proto.UserBitShared.ParsingError.Builder newMessage()
            {
                return org.apache.drill.exec.proto.UserBitShared.ParsingError.newBuilder();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.apache.drill.exec.proto.SchemaUserBitShared.ParsingError.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.apache.drill.exec.proto.SchemaUserBitShared.ParsingError.getFieldNumber(name);
            }
            public java.lang.Class<org.apache.drill.exec.proto.UserBitShared.ParsingError.Builder> typeClass()
            {
                return org.apache.drill.exec.proto.UserBitShared.ParsingError.Builder.class;
            }
            public java.lang.String messageName()
            {
                return org.apache.drill.exec.proto.UserBitShared.ParsingError.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.apache.drill.exec.proto.UserBitShared.ParsingError.class.getName();
            }
            //unused
            public void writeTo(com.dyuproject.protostuff.Output output, org.apache.drill.exec.proto.UserBitShared.ParsingError.Builder builder) throws java.io.IOException {}
        }
        public static java.lang.String getFieldName(int number)
        {
            switch(number)
            {
                case 2: return "startColumn";
                case 3: return "startRow";
                case 4: return "endColumn";
                case 5: return "endRow";
                default: return null;
            }
        }
        public static int getFieldNumber(java.lang.String name)
        {
            java.lang.Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }
        private static final java.util.HashMap<java.lang.String,java.lang.Integer> fieldMap = new java.util.HashMap<java.lang.String,java.lang.Integer>();
        static
        {
            fieldMap.put("startColumn", 2);
            fieldMap.put("startRow", 3);
            fieldMap.put("endColumn", 4);
            fieldMap.put("endRow", 5);
        }
    }

    public static final class RecordBatchDef
    {
        public static final org.apache.drill.exec.proto.SchemaUserBitShared.RecordBatchDef.MessageSchema WRITE =
            new org.apache.drill.exec.proto.SchemaUserBitShared.RecordBatchDef.MessageSchema();
        public static final org.apache.drill.exec.proto.SchemaUserBitShared.RecordBatchDef.BuilderSchema MERGE =
            new org.apache.drill.exec.proto.SchemaUserBitShared.RecordBatchDef.BuilderSchema();
        
        public static class MessageSchema implements com.dyuproject.protostuff.Schema<org.apache.drill.exec.proto.UserBitShared.RecordBatchDef>
        {
            public void writeTo(com.dyuproject.protostuff.Output output, org.apache.drill.exec.proto.UserBitShared.RecordBatchDef message) throws java.io.IOException
            {
                if(message.hasRecordCount())
                    output.writeInt32(1, message.getRecordCount(), false);
                for(org.apache.drill.exec.proto.UserBitShared.SerializedField field : message.getFieldList())
                    output.writeObject(2, field, org.apache.drill.exec.proto.SchemaUserBitShared.SerializedField.WRITE, true);

                if(message.hasCarriesTwoByteSelectionVector())
                    output.writeBool(3, message.getCarriesTwoByteSelectionVector(), false);
            }
            public boolean isInitialized(org.apache.drill.exec.proto.UserBitShared.RecordBatchDef message)
            {
                return message.isInitialized();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.apache.drill.exec.proto.SchemaUserBitShared.RecordBatchDef.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.apache.drill.exec.proto.SchemaUserBitShared.RecordBatchDef.getFieldNumber(name);
            }
            public java.lang.Class<org.apache.drill.exec.proto.UserBitShared.RecordBatchDef> typeClass()
            {
                return org.apache.drill.exec.proto.UserBitShared.RecordBatchDef.class;
            }
            public java.lang.String messageName()
            {
                return org.apache.drill.exec.proto.UserBitShared.RecordBatchDef.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.apache.drill.exec.proto.UserBitShared.RecordBatchDef.class.getName();
            }
            //unused
            public void mergeFrom(com.dyuproject.protostuff.Input input, org.apache.drill.exec.proto.UserBitShared.RecordBatchDef message) throws java.io.IOException {}
            public org.apache.drill.exec.proto.UserBitShared.RecordBatchDef newMessage() { return null; }
        }
        public static class BuilderSchema implements com.dyuproject.protostuff.Schema<org.apache.drill.exec.proto.UserBitShared.RecordBatchDef.Builder>
        {
            public void mergeFrom(com.dyuproject.protostuff.Input input, org.apache.drill.exec.proto.UserBitShared.RecordBatchDef.Builder builder) throws java.io.IOException
            {
                for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
                {
                    switch(number)
                    {
                        case 0:
                            return;
                        case 1:
                            builder.setRecordCount(input.readInt32());
                            break;
                        case 2:
                            builder.addField(input.mergeObject(org.apache.drill.exec.proto.UserBitShared.SerializedField.newBuilder(), org.apache.drill.exec.proto.SchemaUserBitShared.SerializedField.MERGE));

                            break;
                        case 3:
                            builder.setCarriesTwoByteSelectionVector(input.readBool());
                            break;
                        default:
                            input.handleUnknownField(number, this);
                    }
                }
            }
            public boolean isInitialized(org.apache.drill.exec.proto.UserBitShared.RecordBatchDef.Builder builder)
            {
                return builder.isInitialized();
            }
            public org.apache.drill.exec.proto.UserBitShared.RecordBatchDef.Builder newMessage()
            {
                return org.apache.drill.exec.proto.UserBitShared.RecordBatchDef.newBuilder();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.apache.drill.exec.proto.SchemaUserBitShared.RecordBatchDef.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.apache.drill.exec.proto.SchemaUserBitShared.RecordBatchDef.getFieldNumber(name);
            }
            public java.lang.Class<org.apache.drill.exec.proto.UserBitShared.RecordBatchDef.Builder> typeClass()
            {
                return org.apache.drill.exec.proto.UserBitShared.RecordBatchDef.Builder.class;
            }
            public java.lang.String messageName()
            {
                return org.apache.drill.exec.proto.UserBitShared.RecordBatchDef.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.apache.drill.exec.proto.UserBitShared.RecordBatchDef.class.getName();
            }
            //unused
            public void writeTo(com.dyuproject.protostuff.Output output, org.apache.drill.exec.proto.UserBitShared.RecordBatchDef.Builder builder) throws java.io.IOException {}
        }
        public static java.lang.String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "recordCount";
                case 2: return "field";
                case 3: return "carriesTwoByteSelectionVector";
                default: return null;
            }
        }
        public static int getFieldNumber(java.lang.String name)
        {
            java.lang.Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }
        private static final java.util.HashMap<java.lang.String,java.lang.Integer> fieldMap = new java.util.HashMap<java.lang.String,java.lang.Integer>();
        static
        {
            fieldMap.put("recordCount", 1);
            fieldMap.put("field", 2);
            fieldMap.put("carriesTwoByteSelectionVector", 3);
        }
    }

    public static final class NamePart
    {
        public static final org.apache.drill.exec.proto.SchemaUserBitShared.NamePart.MessageSchema WRITE =
            new org.apache.drill.exec.proto.SchemaUserBitShared.NamePart.MessageSchema();
        public static final org.apache.drill.exec.proto.SchemaUserBitShared.NamePart.BuilderSchema MERGE =
            new org.apache.drill.exec.proto.SchemaUserBitShared.NamePart.BuilderSchema();
        
        public static class MessageSchema implements com.dyuproject.protostuff.Schema<org.apache.drill.exec.proto.UserBitShared.NamePart>
        {
            public void writeTo(com.dyuproject.protostuff.Output output, org.apache.drill.exec.proto.UserBitShared.NamePart message) throws java.io.IOException
            {
                if(message.hasType())
                    output.writeEnum(1, message.getType().getNumber(), false);
                if(message.hasName())
                    output.writeString(2, message.getName(), false);
                if(message.hasChild())
                    output.writeObject(3, message.getChild(), org.apache.drill.exec.proto.SchemaUserBitShared.NamePart.WRITE, false);

            }
            public boolean isInitialized(org.apache.drill.exec.proto.UserBitShared.NamePart message)
            {
                return message.isInitialized();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.apache.drill.exec.proto.SchemaUserBitShared.NamePart.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.apache.drill.exec.proto.SchemaUserBitShared.NamePart.getFieldNumber(name);
            }
            public java.lang.Class<org.apache.drill.exec.proto.UserBitShared.NamePart> typeClass()
            {
                return org.apache.drill.exec.proto.UserBitShared.NamePart.class;
            }
            public java.lang.String messageName()
            {
                return org.apache.drill.exec.proto.UserBitShared.NamePart.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.apache.drill.exec.proto.UserBitShared.NamePart.class.getName();
            }
            //unused
            public void mergeFrom(com.dyuproject.protostuff.Input input, org.apache.drill.exec.proto.UserBitShared.NamePart message) throws java.io.IOException {}
            public org.apache.drill.exec.proto.UserBitShared.NamePart newMessage() { return null; }
        }
        public static class BuilderSchema implements com.dyuproject.protostuff.Schema<org.apache.drill.exec.proto.UserBitShared.NamePart.Builder>
        {
            public void mergeFrom(com.dyuproject.protostuff.Input input, org.apache.drill.exec.proto.UserBitShared.NamePart.Builder builder) throws java.io.IOException
            {
                for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
                {
                    switch(number)
                    {
                        case 0:
                            return;
                        case 1:
                            builder.setType(org.apache.drill.exec.proto.UserBitShared.NamePart.Type.valueOf(input.readEnum()));
                            break;
                        case 2:
                            builder.setName(input.readString());
                            break;
                        case 3:
                            builder.setChild(input.mergeObject(org.apache.drill.exec.proto.UserBitShared.NamePart.newBuilder(), org.apache.drill.exec.proto.SchemaUserBitShared.NamePart.MERGE));

                            break;
                        default:
                            input.handleUnknownField(number, this);
                    }
                }
            }
            public boolean isInitialized(org.apache.drill.exec.proto.UserBitShared.NamePart.Builder builder)
            {
                return builder.isInitialized();
            }
            public org.apache.drill.exec.proto.UserBitShared.NamePart.Builder newMessage()
            {
                return org.apache.drill.exec.proto.UserBitShared.NamePart.newBuilder();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.apache.drill.exec.proto.SchemaUserBitShared.NamePart.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.apache.drill.exec.proto.SchemaUserBitShared.NamePart.getFieldNumber(name);
            }
            public java.lang.Class<org.apache.drill.exec.proto.UserBitShared.NamePart.Builder> typeClass()
            {
                return org.apache.drill.exec.proto.UserBitShared.NamePart.Builder.class;
            }
            public java.lang.String messageName()
            {
                return org.apache.drill.exec.proto.UserBitShared.NamePart.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.apache.drill.exec.proto.UserBitShared.NamePart.class.getName();
            }
            //unused
            public void writeTo(com.dyuproject.protostuff.Output output, org.apache.drill.exec.proto.UserBitShared.NamePart.Builder builder) throws java.io.IOException {}
        }
        public static java.lang.String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "type";
                case 2: return "name";
                case 3: return "child";
                default: return null;
            }
        }
        public static int getFieldNumber(java.lang.String name)
        {
            java.lang.Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }
        private static final java.util.HashMap<java.lang.String,java.lang.Integer> fieldMap = new java.util.HashMap<java.lang.String,java.lang.Integer>();
        static
        {
            fieldMap.put("type", 1);
            fieldMap.put("name", 2);
            fieldMap.put("child", 3);
        }
    }

    public static final class SerializedField
    {
        public static final org.apache.drill.exec.proto.SchemaUserBitShared.SerializedField.MessageSchema WRITE =
            new org.apache.drill.exec.proto.SchemaUserBitShared.SerializedField.MessageSchema();
        public static final org.apache.drill.exec.proto.SchemaUserBitShared.SerializedField.BuilderSchema MERGE =
            new org.apache.drill.exec.proto.SchemaUserBitShared.SerializedField.BuilderSchema();
        
        public static class MessageSchema implements com.dyuproject.protostuff.Schema<org.apache.drill.exec.proto.UserBitShared.SerializedField>
        {
            public void writeTo(com.dyuproject.protostuff.Output output, org.apache.drill.exec.proto.UserBitShared.SerializedField message) throws java.io.IOException
            {
                if(message.hasMajorType())
                    output.writeObject(1, message.getMajorType(), org.apache.drill.common.types.SchemaTypeProtos.MajorType.WRITE, false);

                if(message.hasNamePart())
                    output.writeObject(2, message.getNamePart(), org.apache.drill.exec.proto.SchemaUserBitShared.NamePart.WRITE, false);

                for(org.apache.drill.exec.proto.UserBitShared.SerializedField child : message.getChildList())
                    output.writeObject(3, child, org.apache.drill.exec.proto.SchemaUserBitShared.SerializedField.WRITE, true);

                if(message.hasValueCount())
                    output.writeInt32(4, message.getValueCount(), false);
                if(message.hasVarByteLength())
                    output.writeInt32(5, message.getVarByteLength(), false);
                if(message.hasBufferLength())
                    output.writeInt32(7, message.getBufferLength(), false);
            }
            public boolean isInitialized(org.apache.drill.exec.proto.UserBitShared.SerializedField message)
            {
                return message.isInitialized();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.apache.drill.exec.proto.SchemaUserBitShared.SerializedField.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.apache.drill.exec.proto.SchemaUserBitShared.SerializedField.getFieldNumber(name);
            }
            public java.lang.Class<org.apache.drill.exec.proto.UserBitShared.SerializedField> typeClass()
            {
                return org.apache.drill.exec.proto.UserBitShared.SerializedField.class;
            }
            public java.lang.String messageName()
            {
                return org.apache.drill.exec.proto.UserBitShared.SerializedField.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.apache.drill.exec.proto.UserBitShared.SerializedField.class.getName();
            }
            //unused
            public void mergeFrom(com.dyuproject.protostuff.Input input, org.apache.drill.exec.proto.UserBitShared.SerializedField message) throws java.io.IOException {}
            public org.apache.drill.exec.proto.UserBitShared.SerializedField newMessage() { return null; }
        }
        public static class BuilderSchema implements com.dyuproject.protostuff.Schema<org.apache.drill.exec.proto.UserBitShared.SerializedField.Builder>
        {
            public void mergeFrom(com.dyuproject.protostuff.Input input, org.apache.drill.exec.proto.UserBitShared.SerializedField.Builder builder) throws java.io.IOException
            {
                for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
                {
                    switch(number)
                    {
                        case 0:
                            return;
                        case 1:
                            builder.setMajorType(input.mergeObject(org.apache.drill.common.types.TypeProtos.MajorType.newBuilder(), org.apache.drill.common.types.SchemaTypeProtos.MajorType.MERGE));

                            break;
                        case 2:
                            builder.setNamePart(input.mergeObject(org.apache.drill.exec.proto.UserBitShared.NamePart.newBuilder(), org.apache.drill.exec.proto.SchemaUserBitShared.NamePart.MERGE));

                            break;
                        case 3:
                            builder.addChild(input.mergeObject(org.apache.drill.exec.proto.UserBitShared.SerializedField.newBuilder(), org.apache.drill.exec.proto.SchemaUserBitShared.SerializedField.MERGE));

                            break;
                        case 4:
                            builder.setValueCount(input.readInt32());
                            break;
                        case 5:
                            builder.setVarByteLength(input.readInt32());
                            break;
                        case 7:
                            builder.setBufferLength(input.readInt32());
                            break;
                        default:
                            input.handleUnknownField(number, this);
                    }
                }
            }
            public boolean isInitialized(org.apache.drill.exec.proto.UserBitShared.SerializedField.Builder builder)
            {
                return builder.isInitialized();
            }
            public org.apache.drill.exec.proto.UserBitShared.SerializedField.Builder newMessage()
            {
                return org.apache.drill.exec.proto.UserBitShared.SerializedField.newBuilder();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.apache.drill.exec.proto.SchemaUserBitShared.SerializedField.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.apache.drill.exec.proto.SchemaUserBitShared.SerializedField.getFieldNumber(name);
            }
            public java.lang.Class<org.apache.drill.exec.proto.UserBitShared.SerializedField.Builder> typeClass()
            {
                return org.apache.drill.exec.proto.UserBitShared.SerializedField.Builder.class;
            }
            public java.lang.String messageName()
            {
                return org.apache.drill.exec.proto.UserBitShared.SerializedField.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.apache.drill.exec.proto.UserBitShared.SerializedField.class.getName();
            }
            //unused
            public void writeTo(com.dyuproject.protostuff.Output output, org.apache.drill.exec.proto.UserBitShared.SerializedField.Builder builder) throws java.io.IOException {}
        }
        public static java.lang.String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "majorType";
                case 2: return "namePart";
                case 3: return "child";
                case 4: return "valueCount";
                case 5: return "varByteLength";
                case 7: return "bufferLength";
                default: return null;
            }
        }
        public static int getFieldNumber(java.lang.String name)
        {
            java.lang.Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }
        private static final java.util.HashMap<java.lang.String,java.lang.Integer> fieldMap = new java.util.HashMap<java.lang.String,java.lang.Integer>();
        static
        {
            fieldMap.put("majorType", 1);
            fieldMap.put("namePart", 2);
            fieldMap.put("child", 3);
            fieldMap.put("valueCount", 4);
            fieldMap.put("varByteLength", 5);
            fieldMap.put("bufferLength", 7);
        }
    }

    public static final class NodeStatus
    {
        public static final org.apache.drill.exec.proto.SchemaUserBitShared.NodeStatus.MessageSchema WRITE =
            new org.apache.drill.exec.proto.SchemaUserBitShared.NodeStatus.MessageSchema();
        public static final org.apache.drill.exec.proto.SchemaUserBitShared.NodeStatus.BuilderSchema MERGE =
            new org.apache.drill.exec.proto.SchemaUserBitShared.NodeStatus.BuilderSchema();
        
        public static class MessageSchema implements com.dyuproject.protostuff.Schema<org.apache.drill.exec.proto.UserBitShared.NodeStatus>
        {
            public void writeTo(com.dyuproject.protostuff.Output output, org.apache.drill.exec.proto.UserBitShared.NodeStatus message) throws java.io.IOException
            {
                if(message.hasNodeId())
                    output.writeInt32(1, message.getNodeId(), false);
                if(message.hasMemoryFootprint())
                    output.writeInt64(2, message.getMemoryFootprint(), false);
            }
            public boolean isInitialized(org.apache.drill.exec.proto.UserBitShared.NodeStatus message)
            {
                return message.isInitialized();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.apache.drill.exec.proto.SchemaUserBitShared.NodeStatus.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.apache.drill.exec.proto.SchemaUserBitShared.NodeStatus.getFieldNumber(name);
            }
            public java.lang.Class<org.apache.drill.exec.proto.UserBitShared.NodeStatus> typeClass()
            {
                return org.apache.drill.exec.proto.UserBitShared.NodeStatus.class;
            }
            public java.lang.String messageName()
            {
                return org.apache.drill.exec.proto.UserBitShared.NodeStatus.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.apache.drill.exec.proto.UserBitShared.NodeStatus.class.getName();
            }
            //unused
            public void mergeFrom(com.dyuproject.protostuff.Input input, org.apache.drill.exec.proto.UserBitShared.NodeStatus message) throws java.io.IOException {}
            public org.apache.drill.exec.proto.UserBitShared.NodeStatus newMessage() { return null; }
        }
        public static class BuilderSchema implements com.dyuproject.protostuff.Schema<org.apache.drill.exec.proto.UserBitShared.NodeStatus.Builder>
        {
            public void mergeFrom(com.dyuproject.protostuff.Input input, org.apache.drill.exec.proto.UserBitShared.NodeStatus.Builder builder) throws java.io.IOException
            {
                for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
                {
                    switch(number)
                    {
                        case 0:
                            return;
                        case 1:
                            builder.setNodeId(input.readInt32());
                            break;
                        case 2:
                            builder.setMemoryFootprint(input.readInt64());
                            break;
                        default:
                            input.handleUnknownField(number, this);
                    }
                }
            }
            public boolean isInitialized(org.apache.drill.exec.proto.UserBitShared.NodeStatus.Builder builder)
            {
                return builder.isInitialized();
            }
            public org.apache.drill.exec.proto.UserBitShared.NodeStatus.Builder newMessage()
            {
                return org.apache.drill.exec.proto.UserBitShared.NodeStatus.newBuilder();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.apache.drill.exec.proto.SchemaUserBitShared.NodeStatus.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.apache.drill.exec.proto.SchemaUserBitShared.NodeStatus.getFieldNumber(name);
            }
            public java.lang.Class<org.apache.drill.exec.proto.UserBitShared.NodeStatus.Builder> typeClass()
            {
                return org.apache.drill.exec.proto.UserBitShared.NodeStatus.Builder.class;
            }
            public java.lang.String messageName()
            {
                return org.apache.drill.exec.proto.UserBitShared.NodeStatus.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.apache.drill.exec.proto.UserBitShared.NodeStatus.class.getName();
            }
            //unused
            public void writeTo(com.dyuproject.protostuff.Output output, org.apache.drill.exec.proto.UserBitShared.NodeStatus.Builder builder) throws java.io.IOException {}
        }
        public static java.lang.String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "nodeId";
                case 2: return "memoryFootprint";
                default: return null;
            }
        }
        public static int getFieldNumber(java.lang.String name)
        {
            java.lang.Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }
        private static final java.util.HashMap<java.lang.String,java.lang.Integer> fieldMap = new java.util.HashMap<java.lang.String,java.lang.Integer>();
        static
        {
            fieldMap.put("nodeId", 1);
            fieldMap.put("memoryFootprint", 2);
        }
    }

    public static final class QueryResult
    {
        public static final org.apache.drill.exec.proto.SchemaUserBitShared.QueryResult.MessageSchema WRITE =
            new org.apache.drill.exec.proto.SchemaUserBitShared.QueryResult.MessageSchema();
        public static final org.apache.drill.exec.proto.SchemaUserBitShared.QueryResult.BuilderSchema MERGE =
            new org.apache.drill.exec.proto.SchemaUserBitShared.QueryResult.BuilderSchema();
        
        public static class MessageSchema implements com.dyuproject.protostuff.Schema<org.apache.drill.exec.proto.UserBitShared.QueryResult>
        {
            public void writeTo(com.dyuproject.protostuff.Output output, org.apache.drill.exec.proto.UserBitShared.QueryResult message) throws java.io.IOException
            {
                if(message.hasQueryState())
                    output.writeEnum(1, message.getQueryState().getNumber(), false);
                if(message.hasQueryId())
                    output.writeObject(2, message.getQueryId(), org.apache.drill.exec.proto.SchemaUserBitShared.QueryId.WRITE, false);

                for(org.apache.drill.exec.proto.UserBitShared.DrillPBError error : message.getErrorList())
                    output.writeObject(3, error, org.apache.drill.exec.proto.SchemaUserBitShared.DrillPBError.WRITE, true);

            }
            public boolean isInitialized(org.apache.drill.exec.proto.UserBitShared.QueryResult message)
            {
                return message.isInitialized();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.apache.drill.exec.proto.SchemaUserBitShared.QueryResult.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.apache.drill.exec.proto.SchemaUserBitShared.QueryResult.getFieldNumber(name);
            }
            public java.lang.Class<org.apache.drill.exec.proto.UserBitShared.QueryResult> typeClass()
            {
                return org.apache.drill.exec.proto.UserBitShared.QueryResult.class;
            }
            public java.lang.String messageName()
            {
                return org.apache.drill.exec.proto.UserBitShared.QueryResult.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.apache.drill.exec.proto.UserBitShared.QueryResult.class.getName();
            }
            //unused
            public void mergeFrom(com.dyuproject.protostuff.Input input, org.apache.drill.exec.proto.UserBitShared.QueryResult message) throws java.io.IOException {}
            public org.apache.drill.exec.proto.UserBitShared.QueryResult newMessage() { return null; }
        }
        public static class BuilderSchema implements com.dyuproject.protostuff.Schema<org.apache.drill.exec.proto.UserBitShared.QueryResult.Builder>
        {
            public void mergeFrom(com.dyuproject.protostuff.Input input, org.apache.drill.exec.proto.UserBitShared.QueryResult.Builder builder) throws java.io.IOException
            {
                for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
                {
                    switch(number)
                    {
                        case 0:
                            return;
                        case 1:
                            builder.setQueryState(org.apache.drill.exec.proto.UserBitShared.QueryResult.QueryState.valueOf(input.readEnum()));
                            break;
                        case 2:
                            builder.setQueryId(input.mergeObject(org.apache.drill.exec.proto.UserBitShared.QueryId.newBuilder(), org.apache.drill.exec.proto.SchemaUserBitShared.QueryId.MERGE));

                            break;
                        case 3:
                            builder.addError(input.mergeObject(org.apache.drill.exec.proto.UserBitShared.DrillPBError.newBuilder(), org.apache.drill.exec.proto.SchemaUserBitShared.DrillPBError.MERGE));

                            break;
                        default:
                            input.handleUnknownField(number, this);
                    }
                }
            }
            public boolean isInitialized(org.apache.drill.exec.proto.UserBitShared.QueryResult.Builder builder)
            {
                return builder.isInitialized();
            }
            public org.apache.drill.exec.proto.UserBitShared.QueryResult.Builder newMessage()
            {
                return org.apache.drill.exec.proto.UserBitShared.QueryResult.newBuilder();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.apache.drill.exec.proto.SchemaUserBitShared.QueryResult.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.apache.drill.exec.proto.SchemaUserBitShared.QueryResult.getFieldNumber(name);
            }
            public java.lang.Class<org.apache.drill.exec.proto.UserBitShared.QueryResult.Builder> typeClass()
            {
                return org.apache.drill.exec.proto.UserBitShared.QueryResult.Builder.class;
            }
            public java.lang.String messageName()
            {
                return org.apache.drill.exec.proto.UserBitShared.QueryResult.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.apache.drill.exec.proto.UserBitShared.QueryResult.class.getName();
            }
            //unused
            public void writeTo(com.dyuproject.protostuff.Output output, org.apache.drill.exec.proto.UserBitShared.QueryResult.Builder builder) throws java.io.IOException {}
        }
        public static java.lang.String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "queryState";
                case 2: return "queryId";
                case 3: return "error";
                default: return null;
            }
        }
        public static int getFieldNumber(java.lang.String name)
        {
            java.lang.Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }
        private static final java.util.HashMap<java.lang.String,java.lang.Integer> fieldMap = new java.util.HashMap<java.lang.String,java.lang.Integer>();
        static
        {
            fieldMap.put("queryState", 1);
            fieldMap.put("queryId", 2);
            fieldMap.put("error", 3);
        }
    }

    public static final class QueryData
    {
        public static final org.apache.drill.exec.proto.SchemaUserBitShared.QueryData.MessageSchema WRITE =
            new org.apache.drill.exec.proto.SchemaUserBitShared.QueryData.MessageSchema();
        public static final org.apache.drill.exec.proto.SchemaUserBitShared.QueryData.BuilderSchema MERGE =
            new org.apache.drill.exec.proto.SchemaUserBitShared.QueryData.BuilderSchema();
        
        public static class MessageSchema implements com.dyuproject.protostuff.Schema<org.apache.drill.exec.proto.UserBitShared.QueryData>
        {
            public void writeTo(com.dyuproject.protostuff.Output output, org.apache.drill.exec.proto.UserBitShared.QueryData message) throws java.io.IOException
            {
                if(message.hasQueryId())
                    output.writeObject(1, message.getQueryId(), org.apache.drill.exec.proto.SchemaUserBitShared.QueryId.WRITE, false);

                if(message.hasRowCount())
                    output.writeInt32(2, message.getRowCount(), false);
                if(message.hasDef())
                    output.writeObject(3, message.getDef(), org.apache.drill.exec.proto.SchemaUserBitShared.RecordBatchDef.WRITE, false);

            }
            public boolean isInitialized(org.apache.drill.exec.proto.UserBitShared.QueryData message)
            {
                return message.isInitialized();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.apache.drill.exec.proto.SchemaUserBitShared.QueryData.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.apache.drill.exec.proto.SchemaUserBitShared.QueryData.getFieldNumber(name);
            }
            public java.lang.Class<org.apache.drill.exec.proto.UserBitShared.QueryData> typeClass()
            {
                return org.apache.drill.exec.proto.UserBitShared.QueryData.class;
            }
            public java.lang.String messageName()
            {
                return org.apache.drill.exec.proto.UserBitShared.QueryData.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.apache.drill.exec.proto.UserBitShared.QueryData.class.getName();
            }
            //unused
            public void mergeFrom(com.dyuproject.protostuff.Input input, org.apache.drill.exec.proto.UserBitShared.QueryData message) throws java.io.IOException {}
            public org.apache.drill.exec.proto.UserBitShared.QueryData newMessage() { return null; }
        }
        public static class BuilderSchema implements com.dyuproject.protostuff.Schema<org.apache.drill.exec.proto.UserBitShared.QueryData.Builder>
        {
            public void mergeFrom(com.dyuproject.protostuff.Input input, org.apache.drill.exec.proto.UserBitShared.QueryData.Builder builder) throws java.io.IOException
            {
                for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
                {
                    switch(number)
                    {
                        case 0:
                            return;
                        case 1:
                            builder.setQueryId(input.mergeObject(org.apache.drill.exec.proto.UserBitShared.QueryId.newBuilder(), org.apache.drill.exec.proto.SchemaUserBitShared.QueryId.MERGE));

                            break;
                        case 2:
                            builder.setRowCount(input.readInt32());
                            break;
                        case 3:
                            builder.setDef(input.mergeObject(org.apache.drill.exec.proto.UserBitShared.RecordBatchDef.newBuilder(), org.apache.drill.exec.proto.SchemaUserBitShared.RecordBatchDef.MERGE));

                            break;
                        default:
                            input.handleUnknownField(number, this);
                    }
                }
            }
            public boolean isInitialized(org.apache.drill.exec.proto.UserBitShared.QueryData.Builder builder)
            {
                return builder.isInitialized();
            }
            public org.apache.drill.exec.proto.UserBitShared.QueryData.Builder newMessage()
            {
                return org.apache.drill.exec.proto.UserBitShared.QueryData.newBuilder();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.apache.drill.exec.proto.SchemaUserBitShared.QueryData.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.apache.drill.exec.proto.SchemaUserBitShared.QueryData.getFieldNumber(name);
            }
            public java.lang.Class<org.apache.drill.exec.proto.UserBitShared.QueryData.Builder> typeClass()
            {
                return org.apache.drill.exec.proto.UserBitShared.QueryData.Builder.class;
            }
            public java.lang.String messageName()
            {
                return org.apache.drill.exec.proto.UserBitShared.QueryData.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.apache.drill.exec.proto.UserBitShared.QueryData.class.getName();
            }
            //unused
            public void writeTo(com.dyuproject.protostuff.Output output, org.apache.drill.exec.proto.UserBitShared.QueryData.Builder builder) throws java.io.IOException {}
        }
        public static java.lang.String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "queryId";
                case 2: return "rowCount";
                case 3: return "def";
                default: return null;
            }
        }
        public static int getFieldNumber(java.lang.String name)
        {
            java.lang.Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }
        private static final java.util.HashMap<java.lang.String,java.lang.Integer> fieldMap = new java.util.HashMap<java.lang.String,java.lang.Integer>();
        static
        {
            fieldMap.put("queryId", 1);
            fieldMap.put("rowCount", 2);
            fieldMap.put("def", 3);
        }
    }

    public static final class QueryInfo
    {
        public static final org.apache.drill.exec.proto.SchemaUserBitShared.QueryInfo.MessageSchema WRITE =
            new org.apache.drill.exec.proto.SchemaUserBitShared.QueryInfo.MessageSchema();
        public static final org.apache.drill.exec.proto.SchemaUserBitShared.QueryInfo.BuilderSchema MERGE =
            new org.apache.drill.exec.proto.SchemaUserBitShared.QueryInfo.BuilderSchema();
        
        public static class MessageSchema implements com.dyuproject.protostuff.Schema<org.apache.drill.exec.proto.UserBitShared.QueryInfo>
        {
            public void writeTo(com.dyuproject.protostuff.Output output, org.apache.drill.exec.proto.UserBitShared.QueryInfo message) throws java.io.IOException
            {
                if(message.hasQuery())
                    output.writeString(1, message.getQuery(), false);
                if(message.hasStart())
                    output.writeInt64(2, message.getStart(), false);
                if(message.hasState())
                    output.writeEnum(3, message.getState().getNumber(), false);
                if(message.hasUser())
                    output.writeString(4, message.getUser(), false);
                if(message.hasForeman())
                    output.writeObject(5, message.getForeman(), org.apache.drill.exec.proto.SchemaCoordinationProtos.DrillbitEndpoint.WRITE, false);

                if(message.hasOptionsJson())
                    output.writeString(6, message.getOptionsJson(), false);
            }
            public boolean isInitialized(org.apache.drill.exec.proto.UserBitShared.QueryInfo message)
            {
                return message.isInitialized();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.apache.drill.exec.proto.SchemaUserBitShared.QueryInfo.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.apache.drill.exec.proto.SchemaUserBitShared.QueryInfo.getFieldNumber(name);
            }
            public java.lang.Class<org.apache.drill.exec.proto.UserBitShared.QueryInfo> typeClass()
            {
                return org.apache.drill.exec.proto.UserBitShared.QueryInfo.class;
            }
            public java.lang.String messageName()
            {
                return org.apache.drill.exec.proto.UserBitShared.QueryInfo.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.apache.drill.exec.proto.UserBitShared.QueryInfo.class.getName();
            }
            //unused
            public void mergeFrom(com.dyuproject.protostuff.Input input, org.apache.drill.exec.proto.UserBitShared.QueryInfo message) throws java.io.IOException {}
            public org.apache.drill.exec.proto.UserBitShared.QueryInfo newMessage() { return null; }
        }
        public static class BuilderSchema implements com.dyuproject.protostuff.Schema<org.apache.drill.exec.proto.UserBitShared.QueryInfo.Builder>
        {
            public void mergeFrom(com.dyuproject.protostuff.Input input, org.apache.drill.exec.proto.UserBitShared.QueryInfo.Builder builder) throws java.io.IOException
            {
                for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
                {
                    switch(number)
                    {
                        case 0:
                            return;
                        case 1:
                            builder.setQuery(input.readString());
                            break;
                        case 2:
                            builder.setStart(input.readInt64());
                            break;
                        case 3:
                            builder.setState(org.apache.drill.exec.proto.UserBitShared.QueryResult.QueryState.valueOf(input.readEnum()));
                            break;
                        case 4:
                            builder.setUser(input.readString());
                            break;
                        case 5:
                            builder.setForeman(input.mergeObject(org.apache.drill.exec.proto.CoordinationProtos.DrillbitEndpoint.newBuilder(), org.apache.drill.exec.proto.SchemaCoordinationProtos.DrillbitEndpoint.MERGE));

                            break;
                        case 6:
                            builder.setOptionsJson(input.readString());
                            break;
                        default:
                            input.handleUnknownField(number, this);
                    }
                }
            }
            public boolean isInitialized(org.apache.drill.exec.proto.UserBitShared.QueryInfo.Builder builder)
            {
                return builder.isInitialized();
            }
            public org.apache.drill.exec.proto.UserBitShared.QueryInfo.Builder newMessage()
            {
                return org.apache.drill.exec.proto.UserBitShared.QueryInfo.newBuilder();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.apache.drill.exec.proto.SchemaUserBitShared.QueryInfo.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.apache.drill.exec.proto.SchemaUserBitShared.QueryInfo.getFieldNumber(name);
            }
            public java.lang.Class<org.apache.drill.exec.proto.UserBitShared.QueryInfo.Builder> typeClass()
            {
                return org.apache.drill.exec.proto.UserBitShared.QueryInfo.Builder.class;
            }
            public java.lang.String messageName()
            {
                return org.apache.drill.exec.proto.UserBitShared.QueryInfo.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.apache.drill.exec.proto.UserBitShared.QueryInfo.class.getName();
            }
            //unused
            public void writeTo(com.dyuproject.protostuff.Output output, org.apache.drill.exec.proto.UserBitShared.QueryInfo.Builder builder) throws java.io.IOException {}
        }
        public static java.lang.String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "query";
                case 2: return "start";
                case 3: return "state";
                case 4: return "user";
                case 5: return "foreman";
                case 6: return "optionsJson";
                default: return null;
            }
        }
        public static int getFieldNumber(java.lang.String name)
        {
            java.lang.Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }
        private static final java.util.HashMap<java.lang.String,java.lang.Integer> fieldMap = new java.util.HashMap<java.lang.String,java.lang.Integer>();
        static
        {
            fieldMap.put("query", 1);
            fieldMap.put("start", 2);
            fieldMap.put("state", 3);
            fieldMap.put("user", 4);
            fieldMap.put("foreman", 5);
            fieldMap.put("optionsJson", 6);
        }
    }

    public static final class QueryProfile
    {
        public static final org.apache.drill.exec.proto.SchemaUserBitShared.QueryProfile.MessageSchema WRITE =
            new org.apache.drill.exec.proto.SchemaUserBitShared.QueryProfile.MessageSchema();
        public static final org.apache.drill.exec.proto.SchemaUserBitShared.QueryProfile.BuilderSchema MERGE =
            new org.apache.drill.exec.proto.SchemaUserBitShared.QueryProfile.BuilderSchema();
        
        public static class MessageSchema implements com.dyuproject.protostuff.Schema<org.apache.drill.exec.proto.UserBitShared.QueryProfile>
        {
            public void writeTo(com.dyuproject.protostuff.Output output, org.apache.drill.exec.proto.UserBitShared.QueryProfile message) throws java.io.IOException
            {
                if(message.hasId())
                    output.writeObject(1, message.getId(), org.apache.drill.exec.proto.SchemaUserBitShared.QueryId.WRITE, false);

                if(message.hasType())
                    output.writeEnum(2, message.getType().getNumber(), false);
                if(message.hasStart())
                    output.writeInt64(3, message.getStart(), false);
                if(message.hasEnd())
                    output.writeInt64(4, message.getEnd(), false);
                if(message.hasQuery())
                    output.writeString(5, message.getQuery(), false);
                if(message.hasPlan())
                    output.writeString(6, message.getPlan(), false);
                if(message.hasForeman())
                    output.writeObject(7, message.getForeman(), org.apache.drill.exec.proto.SchemaCoordinationProtos.DrillbitEndpoint.WRITE, false);

                if(message.hasState())
                    output.writeEnum(8, message.getState().getNumber(), false);
                if(message.hasTotalFragments())
                    output.writeInt32(9, message.getTotalFragments(), false);
                if(message.hasFinishedFragments())
                    output.writeInt32(10, message.getFinishedFragments(), false);
                for(org.apache.drill.exec.proto.UserBitShared.MajorFragmentProfile fragmentProfile : message.getFragmentProfileList())
                    output.writeObject(11, fragmentProfile, org.apache.drill.exec.proto.SchemaUserBitShared.MajorFragmentProfile.WRITE, true);

                if(message.hasUser())
                    output.writeString(12, message.getUser(), false);
                if(message.hasError())
                    output.writeString(13, message.getError(), false);
                if(message.hasVerboseError())
                    output.writeString(14, message.getVerboseError(), false);
                if(message.hasErrorId())
                    output.writeString(15, message.getErrorId(), false);
                if(message.hasErrorNode())
                    output.writeString(16, message.getErrorNode(), false);
                if(message.hasOptionsJson())
                    output.writeString(17, message.getOptionsJson(), false);
            }
            public boolean isInitialized(org.apache.drill.exec.proto.UserBitShared.QueryProfile message)
            {
                return message.isInitialized();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.apache.drill.exec.proto.SchemaUserBitShared.QueryProfile.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.apache.drill.exec.proto.SchemaUserBitShared.QueryProfile.getFieldNumber(name);
            }
            public java.lang.Class<org.apache.drill.exec.proto.UserBitShared.QueryProfile> typeClass()
            {
                return org.apache.drill.exec.proto.UserBitShared.QueryProfile.class;
            }
            public java.lang.String messageName()
            {
                return org.apache.drill.exec.proto.UserBitShared.QueryProfile.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.apache.drill.exec.proto.UserBitShared.QueryProfile.class.getName();
            }
            //unused
            public void mergeFrom(com.dyuproject.protostuff.Input input, org.apache.drill.exec.proto.UserBitShared.QueryProfile message) throws java.io.IOException {}
            public org.apache.drill.exec.proto.UserBitShared.QueryProfile newMessage() { return null; }
        }
        public static class BuilderSchema implements com.dyuproject.protostuff.Schema<org.apache.drill.exec.proto.UserBitShared.QueryProfile.Builder>
        {
            public void mergeFrom(com.dyuproject.protostuff.Input input, org.apache.drill.exec.proto.UserBitShared.QueryProfile.Builder builder) throws java.io.IOException
            {
                for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
                {
                    switch(number)
                    {
                        case 0:
                            return;
                        case 1:
                            builder.setId(input.mergeObject(org.apache.drill.exec.proto.UserBitShared.QueryId.newBuilder(), org.apache.drill.exec.proto.SchemaUserBitShared.QueryId.MERGE));

                            break;
                        case 2:
                            builder.setType(org.apache.drill.exec.proto.UserBitShared.QueryType.valueOf(input.readEnum()));
                            break;
                        case 3:
                            builder.setStart(input.readInt64());
                            break;
                        case 4:
                            builder.setEnd(input.readInt64());
                            break;
                        case 5:
                            builder.setQuery(input.readString());
                            break;
                        case 6:
                            builder.setPlan(input.readString());
                            break;
                        case 7:
                            builder.setForeman(input.mergeObject(org.apache.drill.exec.proto.CoordinationProtos.DrillbitEndpoint.newBuilder(), org.apache.drill.exec.proto.SchemaCoordinationProtos.DrillbitEndpoint.MERGE));

                            break;
                        case 8:
                            builder.setState(org.apache.drill.exec.proto.UserBitShared.QueryResult.QueryState.valueOf(input.readEnum()));
                            break;
                        case 9:
                            builder.setTotalFragments(input.readInt32());
                            break;
                        case 10:
                            builder.setFinishedFragments(input.readInt32());
                            break;
                        case 11:
                            builder.addFragmentProfile(input.mergeObject(org.apache.drill.exec.proto.UserBitShared.MajorFragmentProfile.newBuilder(), org.apache.drill.exec.proto.SchemaUserBitShared.MajorFragmentProfile.MERGE));

                            break;
                        case 12:
                            builder.setUser(input.readString());
                            break;
                        case 13:
                            builder.setError(input.readString());
                            break;
                        case 14:
                            builder.setVerboseError(input.readString());
                            break;
                        case 15:
                            builder.setErrorId(input.readString());
                            break;
                        case 16:
                            builder.setErrorNode(input.readString());
                            break;
                        case 17:
                            builder.setOptionsJson(input.readString());
                            break;
                        default:
                            input.handleUnknownField(number, this);
                    }
                }
            }
            public boolean isInitialized(org.apache.drill.exec.proto.UserBitShared.QueryProfile.Builder builder)
            {
                return builder.isInitialized();
            }
            public org.apache.drill.exec.proto.UserBitShared.QueryProfile.Builder newMessage()
            {
                return org.apache.drill.exec.proto.UserBitShared.QueryProfile.newBuilder();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.apache.drill.exec.proto.SchemaUserBitShared.QueryProfile.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.apache.drill.exec.proto.SchemaUserBitShared.QueryProfile.getFieldNumber(name);
            }
            public java.lang.Class<org.apache.drill.exec.proto.UserBitShared.QueryProfile.Builder> typeClass()
            {
                return org.apache.drill.exec.proto.UserBitShared.QueryProfile.Builder.class;
            }
            public java.lang.String messageName()
            {
                return org.apache.drill.exec.proto.UserBitShared.QueryProfile.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.apache.drill.exec.proto.UserBitShared.QueryProfile.class.getName();
            }
            //unused
            public void writeTo(com.dyuproject.protostuff.Output output, org.apache.drill.exec.proto.UserBitShared.QueryProfile.Builder builder) throws java.io.IOException {}
        }
        public static java.lang.String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "id";
                case 2: return "type";
                case 3: return "start";
                case 4: return "end";
                case 5: return "query";
                case 6: return "plan";
                case 7: return "foreman";
                case 8: return "state";
                case 9: return "totalFragments";
                case 10: return "finishedFragments";
                case 11: return "fragmentProfile";
                case 12: return "user";
                case 13: return "error";
                case 14: return "verboseError";
                case 15: return "errorId";
                case 16: return "errorNode";
                case 17: return "optionsJson";
                default: return null;
            }
        }
        public static int getFieldNumber(java.lang.String name)
        {
            java.lang.Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }
        private static final java.util.HashMap<java.lang.String,java.lang.Integer> fieldMap = new java.util.HashMap<java.lang.String,java.lang.Integer>();
        static
        {
            fieldMap.put("id", 1);
            fieldMap.put("type", 2);
            fieldMap.put("start", 3);
            fieldMap.put("end", 4);
            fieldMap.put("query", 5);
            fieldMap.put("plan", 6);
            fieldMap.put("foreman", 7);
            fieldMap.put("state", 8);
            fieldMap.put("totalFragments", 9);
            fieldMap.put("finishedFragments", 10);
            fieldMap.put("fragmentProfile", 11);
            fieldMap.put("user", 12);
            fieldMap.put("error", 13);
            fieldMap.put("verboseError", 14);
            fieldMap.put("errorId", 15);
            fieldMap.put("errorNode", 16);
            fieldMap.put("optionsJson", 17);
        }
    }

    public static final class MajorFragmentProfile
    {
        public static final org.apache.drill.exec.proto.SchemaUserBitShared.MajorFragmentProfile.MessageSchema WRITE =
            new org.apache.drill.exec.proto.SchemaUserBitShared.MajorFragmentProfile.MessageSchema();
        public static final org.apache.drill.exec.proto.SchemaUserBitShared.MajorFragmentProfile.BuilderSchema MERGE =
            new org.apache.drill.exec.proto.SchemaUserBitShared.MajorFragmentProfile.BuilderSchema();
        
        public static class MessageSchema implements com.dyuproject.protostuff.Schema<org.apache.drill.exec.proto.UserBitShared.MajorFragmentProfile>
        {
            public void writeTo(com.dyuproject.protostuff.Output output, org.apache.drill.exec.proto.UserBitShared.MajorFragmentProfile message) throws java.io.IOException
            {
                if(message.hasMajorFragmentId())
                    output.writeInt32(1, message.getMajorFragmentId(), false);
                for(org.apache.drill.exec.proto.UserBitShared.MinorFragmentProfile minorFragmentProfile : message.getMinorFragmentProfileList())
                    output.writeObject(2, minorFragmentProfile, org.apache.drill.exec.proto.SchemaUserBitShared.MinorFragmentProfile.WRITE, true);

            }
            public boolean isInitialized(org.apache.drill.exec.proto.UserBitShared.MajorFragmentProfile message)
            {
                return message.isInitialized();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.apache.drill.exec.proto.SchemaUserBitShared.MajorFragmentProfile.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.apache.drill.exec.proto.SchemaUserBitShared.MajorFragmentProfile.getFieldNumber(name);
            }
            public java.lang.Class<org.apache.drill.exec.proto.UserBitShared.MajorFragmentProfile> typeClass()
            {
                return org.apache.drill.exec.proto.UserBitShared.MajorFragmentProfile.class;
            }
            public java.lang.String messageName()
            {
                return org.apache.drill.exec.proto.UserBitShared.MajorFragmentProfile.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.apache.drill.exec.proto.UserBitShared.MajorFragmentProfile.class.getName();
            }
            //unused
            public void mergeFrom(com.dyuproject.protostuff.Input input, org.apache.drill.exec.proto.UserBitShared.MajorFragmentProfile message) throws java.io.IOException {}
            public org.apache.drill.exec.proto.UserBitShared.MajorFragmentProfile newMessage() { return null; }
        }
        public static class BuilderSchema implements com.dyuproject.protostuff.Schema<org.apache.drill.exec.proto.UserBitShared.MajorFragmentProfile.Builder>
        {
            public void mergeFrom(com.dyuproject.protostuff.Input input, org.apache.drill.exec.proto.UserBitShared.MajorFragmentProfile.Builder builder) throws java.io.IOException
            {
                for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
                {
                    switch(number)
                    {
                        case 0:
                            return;
                        case 1:
                            builder.setMajorFragmentId(input.readInt32());
                            break;
                        case 2:
                            builder.addMinorFragmentProfile(input.mergeObject(org.apache.drill.exec.proto.UserBitShared.MinorFragmentProfile.newBuilder(), org.apache.drill.exec.proto.SchemaUserBitShared.MinorFragmentProfile.MERGE));

                            break;
                        default:
                            input.handleUnknownField(number, this);
                    }
                }
            }
            public boolean isInitialized(org.apache.drill.exec.proto.UserBitShared.MajorFragmentProfile.Builder builder)
            {
                return builder.isInitialized();
            }
            public org.apache.drill.exec.proto.UserBitShared.MajorFragmentProfile.Builder newMessage()
            {
                return org.apache.drill.exec.proto.UserBitShared.MajorFragmentProfile.newBuilder();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.apache.drill.exec.proto.SchemaUserBitShared.MajorFragmentProfile.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.apache.drill.exec.proto.SchemaUserBitShared.MajorFragmentProfile.getFieldNumber(name);
            }
            public java.lang.Class<org.apache.drill.exec.proto.UserBitShared.MajorFragmentProfile.Builder> typeClass()
            {
                return org.apache.drill.exec.proto.UserBitShared.MajorFragmentProfile.Builder.class;
            }
            public java.lang.String messageName()
            {
                return org.apache.drill.exec.proto.UserBitShared.MajorFragmentProfile.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.apache.drill.exec.proto.UserBitShared.MajorFragmentProfile.class.getName();
            }
            //unused
            public void writeTo(com.dyuproject.protostuff.Output output, org.apache.drill.exec.proto.UserBitShared.MajorFragmentProfile.Builder builder) throws java.io.IOException {}
        }
        public static java.lang.String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "majorFragmentId";
                case 2: return "minorFragmentProfile";
                default: return null;
            }
        }
        public static int getFieldNumber(java.lang.String name)
        {
            java.lang.Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }
        private static final java.util.HashMap<java.lang.String,java.lang.Integer> fieldMap = new java.util.HashMap<java.lang.String,java.lang.Integer>();
        static
        {
            fieldMap.put("majorFragmentId", 1);
            fieldMap.put("minorFragmentProfile", 2);
        }
    }

    public static final class MinorFragmentProfile
    {
        public static final org.apache.drill.exec.proto.SchemaUserBitShared.MinorFragmentProfile.MessageSchema WRITE =
            new org.apache.drill.exec.proto.SchemaUserBitShared.MinorFragmentProfile.MessageSchema();
        public static final org.apache.drill.exec.proto.SchemaUserBitShared.MinorFragmentProfile.BuilderSchema MERGE =
            new org.apache.drill.exec.proto.SchemaUserBitShared.MinorFragmentProfile.BuilderSchema();
        
        public static class MessageSchema implements com.dyuproject.protostuff.Schema<org.apache.drill.exec.proto.UserBitShared.MinorFragmentProfile>
        {
            public void writeTo(com.dyuproject.protostuff.Output output, org.apache.drill.exec.proto.UserBitShared.MinorFragmentProfile message) throws java.io.IOException
            {
                if(message.hasState())
                    output.writeEnum(1, message.getState().getNumber(), false);
                if(message.hasError())
                    output.writeObject(2, message.getError(), org.apache.drill.exec.proto.SchemaUserBitShared.DrillPBError.WRITE, false);

                if(message.hasMinorFragmentId())
                    output.writeInt32(3, message.getMinorFragmentId(), false);
                for(org.apache.drill.exec.proto.UserBitShared.OperatorProfile operatorProfile : message.getOperatorProfileList())
                    output.writeObject(4, operatorProfile, org.apache.drill.exec.proto.SchemaUserBitShared.OperatorProfile.WRITE, true);

                if(message.hasStartTime())
                    output.writeInt64(5, message.getStartTime(), false);
                if(message.hasEndTime())
                    output.writeInt64(6, message.getEndTime(), false);
                if(message.hasMemoryUsed())
                    output.writeInt64(7, message.getMemoryUsed(), false);
                if(message.hasMaxMemoryUsed())
                    output.writeInt64(8, message.getMaxMemoryUsed(), false);
                if(message.hasEndpoint())
                    output.writeObject(9, message.getEndpoint(), org.apache.drill.exec.proto.SchemaCoordinationProtos.DrillbitEndpoint.WRITE, false);

                if(message.hasLastUpdate())
                    output.writeInt64(10, message.getLastUpdate(), false);
                if(message.hasLastProgress())
                    output.writeInt64(11, message.getLastProgress(), false);
            }
            public boolean isInitialized(org.apache.drill.exec.proto.UserBitShared.MinorFragmentProfile message)
            {
                return message.isInitialized();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.apache.drill.exec.proto.SchemaUserBitShared.MinorFragmentProfile.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.apache.drill.exec.proto.SchemaUserBitShared.MinorFragmentProfile.getFieldNumber(name);
            }
            public java.lang.Class<org.apache.drill.exec.proto.UserBitShared.MinorFragmentProfile> typeClass()
            {
                return org.apache.drill.exec.proto.UserBitShared.MinorFragmentProfile.class;
            }
            public java.lang.String messageName()
            {
                return org.apache.drill.exec.proto.UserBitShared.MinorFragmentProfile.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.apache.drill.exec.proto.UserBitShared.MinorFragmentProfile.class.getName();
            }
            //unused
            public void mergeFrom(com.dyuproject.protostuff.Input input, org.apache.drill.exec.proto.UserBitShared.MinorFragmentProfile message) throws java.io.IOException {}
            public org.apache.drill.exec.proto.UserBitShared.MinorFragmentProfile newMessage() { return null; }
        }
        public static class BuilderSchema implements com.dyuproject.protostuff.Schema<org.apache.drill.exec.proto.UserBitShared.MinorFragmentProfile.Builder>
        {
            public void mergeFrom(com.dyuproject.protostuff.Input input, org.apache.drill.exec.proto.UserBitShared.MinorFragmentProfile.Builder builder) throws java.io.IOException
            {
                for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
                {
                    switch(number)
                    {
                        case 0:
                            return;
                        case 1:
                            builder.setState(org.apache.drill.exec.proto.UserBitShared.FragmentState.valueOf(input.readEnum()));
                            break;
                        case 2:
                            builder.setError(input.mergeObject(org.apache.drill.exec.proto.UserBitShared.DrillPBError.newBuilder(), org.apache.drill.exec.proto.SchemaUserBitShared.DrillPBError.MERGE));

                            break;
                        case 3:
                            builder.setMinorFragmentId(input.readInt32());
                            break;
                        case 4:
                            builder.addOperatorProfile(input.mergeObject(org.apache.drill.exec.proto.UserBitShared.OperatorProfile.newBuilder(), org.apache.drill.exec.proto.SchemaUserBitShared.OperatorProfile.MERGE));

                            break;
                        case 5:
                            builder.setStartTime(input.readInt64());
                            break;
                        case 6:
                            builder.setEndTime(input.readInt64());
                            break;
                        case 7:
                            builder.setMemoryUsed(input.readInt64());
                            break;
                        case 8:
                            builder.setMaxMemoryUsed(input.readInt64());
                            break;
                        case 9:
                            builder.setEndpoint(input.mergeObject(org.apache.drill.exec.proto.CoordinationProtos.DrillbitEndpoint.newBuilder(), org.apache.drill.exec.proto.SchemaCoordinationProtos.DrillbitEndpoint.MERGE));

                            break;
                        case 10:
                            builder.setLastUpdate(input.readInt64());
                            break;
                        case 11:
                            builder.setLastProgress(input.readInt64());
                            break;
                        default:
                            input.handleUnknownField(number, this);
                    }
                }
            }
            public boolean isInitialized(org.apache.drill.exec.proto.UserBitShared.MinorFragmentProfile.Builder builder)
            {
                return builder.isInitialized();
            }
            public org.apache.drill.exec.proto.UserBitShared.MinorFragmentProfile.Builder newMessage()
            {
                return org.apache.drill.exec.proto.UserBitShared.MinorFragmentProfile.newBuilder();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.apache.drill.exec.proto.SchemaUserBitShared.MinorFragmentProfile.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.apache.drill.exec.proto.SchemaUserBitShared.MinorFragmentProfile.getFieldNumber(name);
            }
            public java.lang.Class<org.apache.drill.exec.proto.UserBitShared.MinorFragmentProfile.Builder> typeClass()
            {
                return org.apache.drill.exec.proto.UserBitShared.MinorFragmentProfile.Builder.class;
            }
            public java.lang.String messageName()
            {
                return org.apache.drill.exec.proto.UserBitShared.MinorFragmentProfile.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.apache.drill.exec.proto.UserBitShared.MinorFragmentProfile.class.getName();
            }
            //unused
            public void writeTo(com.dyuproject.protostuff.Output output, org.apache.drill.exec.proto.UserBitShared.MinorFragmentProfile.Builder builder) throws java.io.IOException {}
        }
        public static java.lang.String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "state";
                case 2: return "error";
                case 3: return "minorFragmentId";
                case 4: return "operatorProfile";
                case 5: return "startTime";
                case 6: return "endTime";
                case 7: return "memoryUsed";
                case 8: return "maxMemoryUsed";
                case 9: return "endpoint";
                case 10: return "lastUpdate";
                case 11: return "lastProgress";
                default: return null;
            }
        }
        public static int getFieldNumber(java.lang.String name)
        {
            java.lang.Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }
        private static final java.util.HashMap<java.lang.String,java.lang.Integer> fieldMap = new java.util.HashMap<java.lang.String,java.lang.Integer>();
        static
        {
            fieldMap.put("state", 1);
            fieldMap.put("error", 2);
            fieldMap.put("minorFragmentId", 3);
            fieldMap.put("operatorProfile", 4);
            fieldMap.put("startTime", 5);
            fieldMap.put("endTime", 6);
            fieldMap.put("memoryUsed", 7);
            fieldMap.put("maxMemoryUsed", 8);
            fieldMap.put("endpoint", 9);
            fieldMap.put("lastUpdate", 10);
            fieldMap.put("lastProgress", 11);
        }
    }

    public static final class OperatorProfile
    {
        public static final org.apache.drill.exec.proto.SchemaUserBitShared.OperatorProfile.MessageSchema WRITE =
            new org.apache.drill.exec.proto.SchemaUserBitShared.OperatorProfile.MessageSchema();
        public static final org.apache.drill.exec.proto.SchemaUserBitShared.OperatorProfile.BuilderSchema MERGE =
            new org.apache.drill.exec.proto.SchemaUserBitShared.OperatorProfile.BuilderSchema();
        
        public static class MessageSchema implements com.dyuproject.protostuff.Schema<org.apache.drill.exec.proto.UserBitShared.OperatorProfile>
        {
            public void writeTo(com.dyuproject.protostuff.Output output, org.apache.drill.exec.proto.UserBitShared.OperatorProfile message) throws java.io.IOException
            {
                for(org.apache.drill.exec.proto.UserBitShared.StreamProfile inputProfile : message.getInputProfileList())
                    output.writeObject(1, inputProfile, org.apache.drill.exec.proto.SchemaUserBitShared.StreamProfile.WRITE, true);

                if(message.hasOperatorId())
                    output.writeInt32(3, message.getOperatorId(), false);
                if(message.hasOperatorType())
                    output.writeInt32(4, message.getOperatorType(), false);
                if(message.hasSetupNanos())
                    output.writeInt64(5, message.getSetupNanos(), false);
                if(message.hasProcessNanos())
                    output.writeInt64(6, message.getProcessNanos(), false);
                if(message.hasPeakLocalMemoryAllocated())
                    output.writeInt64(7, message.getPeakLocalMemoryAllocated(), false);
                for(org.apache.drill.exec.proto.UserBitShared.MetricValue metric : message.getMetricList())
                    output.writeObject(8, metric, org.apache.drill.exec.proto.SchemaUserBitShared.MetricValue.WRITE, true);

                if(message.hasWaitNanos())
                    output.writeInt64(9, message.getWaitNanos(), false);
            }
            public boolean isInitialized(org.apache.drill.exec.proto.UserBitShared.OperatorProfile message)
            {
                return message.isInitialized();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.apache.drill.exec.proto.SchemaUserBitShared.OperatorProfile.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.apache.drill.exec.proto.SchemaUserBitShared.OperatorProfile.getFieldNumber(name);
            }
            public java.lang.Class<org.apache.drill.exec.proto.UserBitShared.OperatorProfile> typeClass()
            {
                return org.apache.drill.exec.proto.UserBitShared.OperatorProfile.class;
            }
            public java.lang.String messageName()
            {
                return org.apache.drill.exec.proto.UserBitShared.OperatorProfile.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.apache.drill.exec.proto.UserBitShared.OperatorProfile.class.getName();
            }
            //unused
            public void mergeFrom(com.dyuproject.protostuff.Input input, org.apache.drill.exec.proto.UserBitShared.OperatorProfile message) throws java.io.IOException {}
            public org.apache.drill.exec.proto.UserBitShared.OperatorProfile newMessage() { return null; }
        }
        public static class BuilderSchema implements com.dyuproject.protostuff.Schema<org.apache.drill.exec.proto.UserBitShared.OperatorProfile.Builder>
        {
            public void mergeFrom(com.dyuproject.protostuff.Input input, org.apache.drill.exec.proto.UserBitShared.OperatorProfile.Builder builder) throws java.io.IOException
            {
                for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
                {
                    switch(number)
                    {
                        case 0:
                            return;
                        case 1:
                            builder.addInputProfile(input.mergeObject(org.apache.drill.exec.proto.UserBitShared.StreamProfile.newBuilder(), org.apache.drill.exec.proto.SchemaUserBitShared.StreamProfile.MERGE));

                            break;
                        case 3:
                            builder.setOperatorId(input.readInt32());
                            break;
                        case 4:
                            builder.setOperatorType(input.readInt32());
                            break;
                        case 5:
                            builder.setSetupNanos(input.readInt64());
                            break;
                        case 6:
                            builder.setProcessNanos(input.readInt64());
                            break;
                        case 7:
                            builder.setPeakLocalMemoryAllocated(input.readInt64());
                            break;
                        case 8:
                            builder.addMetric(input.mergeObject(org.apache.drill.exec.proto.UserBitShared.MetricValue.newBuilder(), org.apache.drill.exec.proto.SchemaUserBitShared.MetricValue.MERGE));

                            break;
                        case 9:
                            builder.setWaitNanos(input.readInt64());
                            break;
                        default:
                            input.handleUnknownField(number, this);
                    }
                }
            }
            public boolean isInitialized(org.apache.drill.exec.proto.UserBitShared.OperatorProfile.Builder builder)
            {
                return builder.isInitialized();
            }
            public org.apache.drill.exec.proto.UserBitShared.OperatorProfile.Builder newMessage()
            {
                return org.apache.drill.exec.proto.UserBitShared.OperatorProfile.newBuilder();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.apache.drill.exec.proto.SchemaUserBitShared.OperatorProfile.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.apache.drill.exec.proto.SchemaUserBitShared.OperatorProfile.getFieldNumber(name);
            }
            public java.lang.Class<org.apache.drill.exec.proto.UserBitShared.OperatorProfile.Builder> typeClass()
            {
                return org.apache.drill.exec.proto.UserBitShared.OperatorProfile.Builder.class;
            }
            public java.lang.String messageName()
            {
                return org.apache.drill.exec.proto.UserBitShared.OperatorProfile.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.apache.drill.exec.proto.UserBitShared.OperatorProfile.class.getName();
            }
            //unused
            public void writeTo(com.dyuproject.protostuff.Output output, org.apache.drill.exec.proto.UserBitShared.OperatorProfile.Builder builder) throws java.io.IOException {}
        }
        public static java.lang.String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "inputProfile";
                case 3: return "operatorId";
                case 4: return "operatorType";
                case 5: return "setupNanos";
                case 6: return "processNanos";
                case 7: return "peakLocalMemoryAllocated";
                case 8: return "metric";
                case 9: return "waitNanos";
                default: return null;
            }
        }
        public static int getFieldNumber(java.lang.String name)
        {
            java.lang.Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }
        private static final java.util.HashMap<java.lang.String,java.lang.Integer> fieldMap = new java.util.HashMap<java.lang.String,java.lang.Integer>();
        static
        {
            fieldMap.put("inputProfile", 1);
            fieldMap.put("operatorId", 3);
            fieldMap.put("operatorType", 4);
            fieldMap.put("setupNanos", 5);
            fieldMap.put("processNanos", 6);
            fieldMap.put("peakLocalMemoryAllocated", 7);
            fieldMap.put("metric", 8);
            fieldMap.put("waitNanos", 9);
        }
    }

    public static final class StreamProfile
    {
        public static final org.apache.drill.exec.proto.SchemaUserBitShared.StreamProfile.MessageSchema WRITE =
            new org.apache.drill.exec.proto.SchemaUserBitShared.StreamProfile.MessageSchema();
        public static final org.apache.drill.exec.proto.SchemaUserBitShared.StreamProfile.BuilderSchema MERGE =
            new org.apache.drill.exec.proto.SchemaUserBitShared.StreamProfile.BuilderSchema();
        
        public static class MessageSchema implements com.dyuproject.protostuff.Schema<org.apache.drill.exec.proto.UserBitShared.StreamProfile>
        {
            public void writeTo(com.dyuproject.protostuff.Output output, org.apache.drill.exec.proto.UserBitShared.StreamProfile message) throws java.io.IOException
            {
                if(message.hasRecords())
                    output.writeInt64(1, message.getRecords(), false);
                if(message.hasBatches())
                    output.writeInt64(2, message.getBatches(), false);
                if(message.hasSchemas())
                    output.writeInt64(3, message.getSchemas(), false);
            }
            public boolean isInitialized(org.apache.drill.exec.proto.UserBitShared.StreamProfile message)
            {
                return message.isInitialized();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.apache.drill.exec.proto.SchemaUserBitShared.StreamProfile.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.apache.drill.exec.proto.SchemaUserBitShared.StreamProfile.getFieldNumber(name);
            }
            public java.lang.Class<org.apache.drill.exec.proto.UserBitShared.StreamProfile> typeClass()
            {
                return org.apache.drill.exec.proto.UserBitShared.StreamProfile.class;
            }
            public java.lang.String messageName()
            {
                return org.apache.drill.exec.proto.UserBitShared.StreamProfile.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.apache.drill.exec.proto.UserBitShared.StreamProfile.class.getName();
            }
            //unused
            public void mergeFrom(com.dyuproject.protostuff.Input input, org.apache.drill.exec.proto.UserBitShared.StreamProfile message) throws java.io.IOException {}
            public org.apache.drill.exec.proto.UserBitShared.StreamProfile newMessage() { return null; }
        }
        public static class BuilderSchema implements com.dyuproject.protostuff.Schema<org.apache.drill.exec.proto.UserBitShared.StreamProfile.Builder>
        {
            public void mergeFrom(com.dyuproject.protostuff.Input input, org.apache.drill.exec.proto.UserBitShared.StreamProfile.Builder builder) throws java.io.IOException
            {
                for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
                {
                    switch(number)
                    {
                        case 0:
                            return;
                        case 1:
                            builder.setRecords(input.readInt64());
                            break;
                        case 2:
                            builder.setBatches(input.readInt64());
                            break;
                        case 3:
                            builder.setSchemas(input.readInt64());
                            break;
                        default:
                            input.handleUnknownField(number, this);
                    }
                }
            }
            public boolean isInitialized(org.apache.drill.exec.proto.UserBitShared.StreamProfile.Builder builder)
            {
                return builder.isInitialized();
            }
            public org.apache.drill.exec.proto.UserBitShared.StreamProfile.Builder newMessage()
            {
                return org.apache.drill.exec.proto.UserBitShared.StreamProfile.newBuilder();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.apache.drill.exec.proto.SchemaUserBitShared.StreamProfile.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.apache.drill.exec.proto.SchemaUserBitShared.StreamProfile.getFieldNumber(name);
            }
            public java.lang.Class<org.apache.drill.exec.proto.UserBitShared.StreamProfile.Builder> typeClass()
            {
                return org.apache.drill.exec.proto.UserBitShared.StreamProfile.Builder.class;
            }
            public java.lang.String messageName()
            {
                return org.apache.drill.exec.proto.UserBitShared.StreamProfile.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.apache.drill.exec.proto.UserBitShared.StreamProfile.class.getName();
            }
            //unused
            public void writeTo(com.dyuproject.protostuff.Output output, org.apache.drill.exec.proto.UserBitShared.StreamProfile.Builder builder) throws java.io.IOException {}
        }
        public static java.lang.String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "records";
                case 2: return "batches";
                case 3: return "schemas";
                default: return null;
            }
        }
        public static int getFieldNumber(java.lang.String name)
        {
            java.lang.Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }
        private static final java.util.HashMap<java.lang.String,java.lang.Integer> fieldMap = new java.util.HashMap<java.lang.String,java.lang.Integer>();
        static
        {
            fieldMap.put("records", 1);
            fieldMap.put("batches", 2);
            fieldMap.put("schemas", 3);
        }
    }

    public static final class MetricValue
    {
        public static final org.apache.drill.exec.proto.SchemaUserBitShared.MetricValue.MessageSchema WRITE =
            new org.apache.drill.exec.proto.SchemaUserBitShared.MetricValue.MessageSchema();
        public static final org.apache.drill.exec.proto.SchemaUserBitShared.MetricValue.BuilderSchema MERGE =
            new org.apache.drill.exec.proto.SchemaUserBitShared.MetricValue.BuilderSchema();
        
        public static class MessageSchema implements com.dyuproject.protostuff.Schema<org.apache.drill.exec.proto.UserBitShared.MetricValue>
        {
            public void writeTo(com.dyuproject.protostuff.Output output, org.apache.drill.exec.proto.UserBitShared.MetricValue message) throws java.io.IOException
            {
                if(message.hasMetricId())
                    output.writeInt32(1, message.getMetricId(), false);
                if(message.hasLongValue())
                    output.writeInt64(2, message.getLongValue(), false);
                if(message.hasDoubleValue())
                    output.writeDouble(3, message.getDoubleValue(), false);
            }
            public boolean isInitialized(org.apache.drill.exec.proto.UserBitShared.MetricValue message)
            {
                return message.isInitialized();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.apache.drill.exec.proto.SchemaUserBitShared.MetricValue.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.apache.drill.exec.proto.SchemaUserBitShared.MetricValue.getFieldNumber(name);
            }
            public java.lang.Class<org.apache.drill.exec.proto.UserBitShared.MetricValue> typeClass()
            {
                return org.apache.drill.exec.proto.UserBitShared.MetricValue.class;
            }
            public java.lang.String messageName()
            {
                return org.apache.drill.exec.proto.UserBitShared.MetricValue.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.apache.drill.exec.proto.UserBitShared.MetricValue.class.getName();
            }
            //unused
            public void mergeFrom(com.dyuproject.protostuff.Input input, org.apache.drill.exec.proto.UserBitShared.MetricValue message) throws java.io.IOException {}
            public org.apache.drill.exec.proto.UserBitShared.MetricValue newMessage() { return null; }
        }
        public static class BuilderSchema implements com.dyuproject.protostuff.Schema<org.apache.drill.exec.proto.UserBitShared.MetricValue.Builder>
        {
            public void mergeFrom(com.dyuproject.protostuff.Input input, org.apache.drill.exec.proto.UserBitShared.MetricValue.Builder builder) throws java.io.IOException
            {
                for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
                {
                    switch(number)
                    {
                        case 0:
                            return;
                        case 1:
                            builder.setMetricId(input.readInt32());
                            break;
                        case 2:
                            builder.setLongValue(input.readInt64());
                            break;
                        case 3:
                            builder.setDoubleValue(input.readDouble());
                            break;
                        default:
                            input.handleUnknownField(number, this);
                    }
                }
            }
            public boolean isInitialized(org.apache.drill.exec.proto.UserBitShared.MetricValue.Builder builder)
            {
                return builder.isInitialized();
            }
            public org.apache.drill.exec.proto.UserBitShared.MetricValue.Builder newMessage()
            {
                return org.apache.drill.exec.proto.UserBitShared.MetricValue.newBuilder();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.apache.drill.exec.proto.SchemaUserBitShared.MetricValue.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.apache.drill.exec.proto.SchemaUserBitShared.MetricValue.getFieldNumber(name);
            }
            public java.lang.Class<org.apache.drill.exec.proto.UserBitShared.MetricValue.Builder> typeClass()
            {
                return org.apache.drill.exec.proto.UserBitShared.MetricValue.Builder.class;
            }
            public java.lang.String messageName()
            {
                return org.apache.drill.exec.proto.UserBitShared.MetricValue.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.apache.drill.exec.proto.UserBitShared.MetricValue.class.getName();
            }
            //unused
            public void writeTo(com.dyuproject.protostuff.Output output, org.apache.drill.exec.proto.UserBitShared.MetricValue.Builder builder) throws java.io.IOException {}
        }
        public static java.lang.String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "metricId";
                case 2: return "longValue";
                case 3: return "doubleValue";
                default: return null;
            }
        }
        public static int getFieldNumber(java.lang.String name)
        {
            java.lang.Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }
        private static final java.util.HashMap<java.lang.String,java.lang.Integer> fieldMap = new java.util.HashMap<java.lang.String,java.lang.Integer>();
        static
        {
            fieldMap.put("metricId", 1);
            fieldMap.put("longValue", 2);
            fieldMap.put("doubleValue", 3);
        }
    }

    public static final class Registry
    {
        public static final org.apache.drill.exec.proto.SchemaUserBitShared.Registry.MessageSchema WRITE =
            new org.apache.drill.exec.proto.SchemaUserBitShared.Registry.MessageSchema();
        public static final org.apache.drill.exec.proto.SchemaUserBitShared.Registry.BuilderSchema MERGE =
            new org.apache.drill.exec.proto.SchemaUserBitShared.Registry.BuilderSchema();
        
        public static class MessageSchema implements com.dyuproject.protostuff.Schema<org.apache.drill.exec.proto.UserBitShared.Registry>
        {
            public void writeTo(com.dyuproject.protostuff.Output output, org.apache.drill.exec.proto.UserBitShared.Registry message) throws java.io.IOException
            {
                for(org.apache.drill.exec.proto.UserBitShared.Jar jar : message.getJarList())
                    output.writeObject(1, jar, org.apache.drill.exec.proto.SchemaUserBitShared.Jar.WRITE, true);

            }
            public boolean isInitialized(org.apache.drill.exec.proto.UserBitShared.Registry message)
            {
                return message.isInitialized();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.apache.drill.exec.proto.SchemaUserBitShared.Registry.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.apache.drill.exec.proto.SchemaUserBitShared.Registry.getFieldNumber(name);
            }
            public java.lang.Class<org.apache.drill.exec.proto.UserBitShared.Registry> typeClass()
            {
                return org.apache.drill.exec.proto.UserBitShared.Registry.class;
            }
            public java.lang.String messageName()
            {
                return org.apache.drill.exec.proto.UserBitShared.Registry.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.apache.drill.exec.proto.UserBitShared.Registry.class.getName();
            }
            //unused
            public void mergeFrom(com.dyuproject.protostuff.Input input, org.apache.drill.exec.proto.UserBitShared.Registry message) throws java.io.IOException {}
            public org.apache.drill.exec.proto.UserBitShared.Registry newMessage() { return null; }
        }
        public static class BuilderSchema implements com.dyuproject.protostuff.Schema<org.apache.drill.exec.proto.UserBitShared.Registry.Builder>
        {
            public void mergeFrom(com.dyuproject.protostuff.Input input, org.apache.drill.exec.proto.UserBitShared.Registry.Builder builder) throws java.io.IOException
            {
                for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
                {
                    switch(number)
                    {
                        case 0:
                            return;
                        case 1:
                            builder.addJar(input.mergeObject(org.apache.drill.exec.proto.UserBitShared.Jar.newBuilder(), org.apache.drill.exec.proto.SchemaUserBitShared.Jar.MERGE));

                            break;
                        default:
                            input.handleUnknownField(number, this);
                    }
                }
            }
            public boolean isInitialized(org.apache.drill.exec.proto.UserBitShared.Registry.Builder builder)
            {
                return builder.isInitialized();
            }
            public org.apache.drill.exec.proto.UserBitShared.Registry.Builder newMessage()
            {
                return org.apache.drill.exec.proto.UserBitShared.Registry.newBuilder();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.apache.drill.exec.proto.SchemaUserBitShared.Registry.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.apache.drill.exec.proto.SchemaUserBitShared.Registry.getFieldNumber(name);
            }
            public java.lang.Class<org.apache.drill.exec.proto.UserBitShared.Registry.Builder> typeClass()
            {
                return org.apache.drill.exec.proto.UserBitShared.Registry.Builder.class;
            }
            public java.lang.String messageName()
            {
                return org.apache.drill.exec.proto.UserBitShared.Registry.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.apache.drill.exec.proto.UserBitShared.Registry.class.getName();
            }
            //unused
            public void writeTo(com.dyuproject.protostuff.Output output, org.apache.drill.exec.proto.UserBitShared.Registry.Builder builder) throws java.io.IOException {}
        }
        public static java.lang.String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "jar";
                default: return null;
            }
        }
        public static int getFieldNumber(java.lang.String name)
        {
            java.lang.Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }
        private static final java.util.HashMap<java.lang.String,java.lang.Integer> fieldMap = new java.util.HashMap<java.lang.String,java.lang.Integer>();
        static
        {
            fieldMap.put("jar", 1);
        }
    }

    public static final class Jar
    {
        public static final org.apache.drill.exec.proto.SchemaUserBitShared.Jar.MessageSchema WRITE =
            new org.apache.drill.exec.proto.SchemaUserBitShared.Jar.MessageSchema();
        public static final org.apache.drill.exec.proto.SchemaUserBitShared.Jar.BuilderSchema MERGE =
            new org.apache.drill.exec.proto.SchemaUserBitShared.Jar.BuilderSchema();
        
        public static class MessageSchema implements com.dyuproject.protostuff.Schema<org.apache.drill.exec.proto.UserBitShared.Jar>
        {
            public void writeTo(com.dyuproject.protostuff.Output output, org.apache.drill.exec.proto.UserBitShared.Jar message) throws java.io.IOException
            {
                if(message.hasName())
                    output.writeString(1, message.getName(), false);
                for(String functionSignature : message.getFunctionSignatureList())
                    output.writeString(2, functionSignature, true);
            }
            public boolean isInitialized(org.apache.drill.exec.proto.UserBitShared.Jar message)
            {
                return message.isInitialized();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.apache.drill.exec.proto.SchemaUserBitShared.Jar.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.apache.drill.exec.proto.SchemaUserBitShared.Jar.getFieldNumber(name);
            }
            public java.lang.Class<org.apache.drill.exec.proto.UserBitShared.Jar> typeClass()
            {
                return org.apache.drill.exec.proto.UserBitShared.Jar.class;
            }
            public java.lang.String messageName()
            {
                return org.apache.drill.exec.proto.UserBitShared.Jar.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.apache.drill.exec.proto.UserBitShared.Jar.class.getName();
            }
            //unused
            public void mergeFrom(com.dyuproject.protostuff.Input input, org.apache.drill.exec.proto.UserBitShared.Jar message) throws java.io.IOException {}
            public org.apache.drill.exec.proto.UserBitShared.Jar newMessage() { return null; }
        }
        public static class BuilderSchema implements com.dyuproject.protostuff.Schema<org.apache.drill.exec.proto.UserBitShared.Jar.Builder>
        {
            public void mergeFrom(com.dyuproject.protostuff.Input input, org.apache.drill.exec.proto.UserBitShared.Jar.Builder builder) throws java.io.IOException
            {
                for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
                {
                    switch(number)
                    {
                        case 0:
                            return;
                        case 1:
                            builder.setName(input.readString());
                            break;
                        case 2:
                            builder.addFunctionSignature(input.readString());
                            break;
                        default:
                            input.handleUnknownField(number, this);
                    }
                }
            }
            public boolean isInitialized(org.apache.drill.exec.proto.UserBitShared.Jar.Builder builder)
            {
                return builder.isInitialized();
            }
            public org.apache.drill.exec.proto.UserBitShared.Jar.Builder newMessage()
            {
                return org.apache.drill.exec.proto.UserBitShared.Jar.newBuilder();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.apache.drill.exec.proto.SchemaUserBitShared.Jar.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.apache.drill.exec.proto.SchemaUserBitShared.Jar.getFieldNumber(name);
            }
            public java.lang.Class<org.apache.drill.exec.proto.UserBitShared.Jar.Builder> typeClass()
            {
                return org.apache.drill.exec.proto.UserBitShared.Jar.Builder.class;
            }
            public java.lang.String messageName()
            {
                return org.apache.drill.exec.proto.UserBitShared.Jar.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.apache.drill.exec.proto.UserBitShared.Jar.class.getName();
            }
            //unused
            public void writeTo(com.dyuproject.protostuff.Output output, org.apache.drill.exec.proto.UserBitShared.Jar.Builder builder) throws java.io.IOException {}
        }
        public static java.lang.String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "name";
                case 2: return "functionSignature";
                default: return null;
            }
        }
        public static int getFieldNumber(java.lang.String name)
        {
            java.lang.Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }
        private static final java.util.HashMap<java.lang.String,java.lang.Integer> fieldMap = new java.util.HashMap<java.lang.String,java.lang.Integer>();
        static
        {
            fieldMap.put("name", 1);
            fieldMap.put("functionSignature", 2);
        }
    }

}
