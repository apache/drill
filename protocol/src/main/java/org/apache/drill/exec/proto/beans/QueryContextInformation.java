/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from protobuf

package org.apache.drill.exec.proto.beans;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class QueryContextInformation implements Externalizable, Message<QueryContextInformation>, Schema<QueryContextInformation>
{

    public static Schema<QueryContextInformation> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static QueryContextInformation getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final QueryContextInformation DEFAULT_INSTANCE = new QueryContextInformation();

    
    private long queryStartTime;
    private int timeZone;
    private String defaultSchemaName;
    private String sessionId;

    public QueryContextInformation()
    {
        
    }

    // getters and setters

    // queryStartTime

    public long getQueryStartTime()
    {
        return queryStartTime;
    }

    public QueryContextInformation setQueryStartTime(long queryStartTime)
    {
        this.queryStartTime = queryStartTime;
        return this;
    }

    // timeZone

    public int getTimeZone()
    {
        return timeZone;
    }

    public QueryContextInformation setTimeZone(int timeZone)
    {
        this.timeZone = timeZone;
        return this;
    }

    // defaultSchemaName

    public String getDefaultSchemaName()
    {
        return defaultSchemaName;
    }

    public QueryContextInformation setDefaultSchemaName(String defaultSchemaName)
    {
        this.defaultSchemaName = defaultSchemaName;
        return this;
    }

    // sessionId

    public String getSessionId()
    {
        return sessionId;
    }

    public QueryContextInformation setSessionId(String sessionId)
    {
        this.sessionId = sessionId;
        return this;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<QueryContextInformation> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public QueryContextInformation newMessage()
    {
        return new QueryContextInformation();
    }

    public Class<QueryContextInformation> typeClass()
    {
        return QueryContextInformation.class;
    }

    public String messageName()
    {
        return QueryContextInformation.class.getSimpleName();
    }

    public String messageFullName()
    {
        return QueryContextInformation.class.getName();
    }

    public boolean isInitialized(QueryContextInformation message)
    {
        return true;
    }

    public void mergeFrom(Input input, QueryContextInformation message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    message.queryStartTime = input.readInt64();
                    break;
                case 2:
                    message.timeZone = input.readInt32();
                    break;
                case 3:
                    message.defaultSchemaName = input.readString();
                    break;
                case 4:
                    message.sessionId = input.readString();
                    break;
                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, QueryContextInformation message) throws IOException
    {
        if(message.queryStartTime != 0)
            output.writeInt64(1, message.queryStartTime, false);

        if(message.timeZone != 0)
            output.writeInt32(2, message.timeZone, false);

        if(message.defaultSchemaName != null)
            output.writeString(3, message.defaultSchemaName, false);

        if(message.sessionId != null)
            output.writeString(4, message.sessionId, false);
    }

    public String getFieldName(int number)
    {
        switch(number)
        {
            case 1: return "queryStartTime";
            case 2: return "timeZone";
            case 3: return "defaultSchemaName";
            case 4: return "sessionId";
            default: return null;
        }
    }

    public int getFieldNumber(String name)
    {
        final Integer number = __fieldMap.get(name);
        return number == null ? 0 : number.intValue();
    }

    private static final java.util.HashMap<String,Integer> __fieldMap = new java.util.HashMap<String,Integer>();
    static
    {
        __fieldMap.put("queryStartTime", 1);
        __fieldMap.put("timeZone", 2);
        __fieldMap.put("defaultSchemaName", 3);
        __fieldMap.put("sessionId", 4);
    }
    
}
