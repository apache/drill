/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from protobuf

package org.apache.drill.exec.proto.beans;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class WarningMsg implements Externalizable, Message<WarningMsg>, Schema<WarningMsg>
{

    public static Schema<WarningMsg> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static WarningMsg getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final WarningMsg DEFAULT_INSTANCE = new WarningMsg();

    
    private String message;
    private int count;
    private String warningCode;
    private String sqlState;

    public WarningMsg()
    {
        
    }

    // getters and setters

    // message

    public String getMessage()
    {
        return message;
    }

    public WarningMsg setMessage(String message)
    {
        this.message = message;
        return this;
    }

    // count

    public int getCount()
    {
        return count;
    }

    public WarningMsg setCount(int count)
    {
        this.count = count;
        return this;
    }

    // warningCode

    public String getWarningCode()
    {
        return warningCode;
    }

    public WarningMsg setWarningCode(String warningCode)
    {
        this.warningCode = warningCode;
        return this;
    }

    // sqlState

    public String getSqlState()
    {
        return sqlState;
    }

    public WarningMsg setSqlState(String sqlState)
    {
        this.sqlState = sqlState;
        return this;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<WarningMsg> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public WarningMsg newMessage()
    {
        return new WarningMsg();
    }

    public Class<WarningMsg> typeClass()
    {
        return WarningMsg.class;
    }

    public String messageName()
    {
        return WarningMsg.class.getSimpleName();
    }

    public String messageFullName()
    {
        return WarningMsg.class.getName();
    }

    public boolean isInitialized(WarningMsg message)
    {
        return true;
    }

    public void mergeFrom(Input input, WarningMsg message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    message.message = input.readString();
                    break;
                case 2:
                    message.count = input.readInt32();
                    break;
                case 3:
                    message.warningCode = input.readString();
                    break;
                case 4:
                    message.sqlState = input.readString();
                    break;
                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, WarningMsg message) throws IOException
    {
        if(message.message != null)
            output.writeString(1, message.message, false);

        if(message.count != 0)
            output.writeInt32(2, message.count, false);

        if(message.warningCode != null)
            output.writeString(3, message.warningCode, false);

        if(message.sqlState != null)
            output.writeString(4, message.sqlState, false);
    }

    public String getFieldName(int number)
    {
        switch(number)
        {
            case 1: return "message";
            case 2: return "count";
            case 3: return "warningCode";
            case 4: return "sqlState";
            default: return null;
        }
    }

    public int getFieldNumber(String name)
    {
        final Integer number = __fieldMap.get(name);
        return number == null ? 0 : number.intValue();
    }

    private static final java.util.HashMap<String,Integer> __fieldMap = new java.util.HashMap<String,Integer>();
    static
    {
        __fieldMap.put("message", 1);
        __fieldMap.put("count", 2);
        __fieldMap.put("warningCode", 3);
        __fieldMap.put("sqlState", 4);
    }
    
}
