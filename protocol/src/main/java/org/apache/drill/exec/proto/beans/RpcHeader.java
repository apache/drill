/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from protobuf

package org.apache.drill.exec.proto.beans;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class RpcHeader implements Externalizable, Message<RpcHeader>, Schema<RpcHeader>
{

    public static Schema<RpcHeader> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static RpcHeader getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final RpcHeader DEFAULT_INSTANCE = new RpcHeader();

    
    private RpcMode mode;
    private int coordinationId;
    private int rpcType;

    public RpcHeader()
    {
        
    }

    // getters and setters

    // mode

    public RpcMode getMode()
    {
        return mode == null ? RpcMode.REQUEST : mode;
    }

    public RpcHeader setMode(RpcMode mode)
    {
        this.mode = mode;
        return this;
    }

    // coordinationId

    public int getCoordinationId()
    {
        return coordinationId;
    }

    public RpcHeader setCoordinationId(int coordinationId)
    {
        this.coordinationId = coordinationId;
        return this;
    }

    // rpcType

    public int getRpcType()
    {
        return rpcType;
    }

    public RpcHeader setRpcType(int rpcType)
    {
        this.rpcType = rpcType;
        return this;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<RpcHeader> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public RpcHeader newMessage()
    {
        return new RpcHeader();
    }

    public Class<RpcHeader> typeClass()
    {
        return RpcHeader.class;
    }

    public String messageName()
    {
        return RpcHeader.class.getSimpleName();
    }

    public String messageFullName()
    {
        return RpcHeader.class.getName();
    }

    public boolean isInitialized(RpcHeader message)
    {
        return true;
    }

    public void mergeFrom(Input input, RpcHeader message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    message.mode = RpcMode.valueOf(input.readEnum());
                    break;
                case 2:
                    message.coordinationId = input.readInt32();
                    break;
                case 3:
                    message.rpcType = input.readInt32();
                    break;
                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, RpcHeader message) throws IOException
    {
        if(message.mode != null)
             output.writeEnum(1, message.mode.number, false);

        if(message.coordinationId != 0)
            output.writeInt32(2, message.coordinationId, false);

        if(message.rpcType != 0)
            output.writeInt32(3, message.rpcType, false);
    }

    public String getFieldName(int number)
    {
        switch(number)
        {
            case 1: return "mode";
            case 2: return "coordinationId";
            case 3: return "rpcType";
            default: return null;
        }
    }

    public int getFieldNumber(String name)
    {
        final Integer number = __fieldMap.get(name);
        return number == null ? 0 : number.intValue();
    }

    private static final java.util.HashMap<String,Integer> __fieldMap = new java.util.HashMap<String,Integer>();
    static
    {
        __fieldMap.put("mode", 1);
        __fieldMap.put("coordinationId", 2);
        __fieldMap.put("rpcType", 3);
    }
    
}
