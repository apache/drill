/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from protobuf

package org.apache.drill.exec.proto.beans;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.List;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;
import com.dyuproject.protostuff.UninitializedMessageException;

public final class QueryWarning implements Externalizable, Message<QueryWarning>, Schema<QueryWarning>
{

    public static Schema<QueryWarning> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static QueryWarning getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final QueryWarning DEFAULT_INSTANCE = new QueryWarning();

    
    private QueryId queryId;
    private List<WarningMsg> warnings;

    public QueryWarning()
    {
        
    }

    public QueryWarning(
        QueryId queryId
    )
    {
        this.queryId = queryId;
    }

    // getters and setters

    // queryId

    public QueryId getQueryId()
    {
        return queryId;
    }

    public QueryWarning setQueryId(QueryId queryId)
    {
        this.queryId = queryId;
        return this;
    }

    // warnings

    public List<WarningMsg> getWarningsList()
    {
        return warnings;
    }

    public QueryWarning setWarningsList(List<WarningMsg> warnings)
    {
        this.warnings = warnings;
        return this;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<QueryWarning> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public QueryWarning newMessage()
    {
        return new QueryWarning();
    }

    public Class<QueryWarning> typeClass()
    {
        return QueryWarning.class;
    }

    public String messageName()
    {
        return QueryWarning.class.getSimpleName();
    }

    public String messageFullName()
    {
        return QueryWarning.class.getName();
    }

    public boolean isInitialized(QueryWarning message)
    {
        return 
            message.queryId != null;
    }

    public void mergeFrom(Input input, QueryWarning message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    message.queryId = input.mergeObject(message.queryId, QueryId.getSchema());
                    break;

                case 2:
                    if(message.warnings == null)
                        message.warnings = new ArrayList<WarningMsg>();
                    message.warnings.add(input.mergeObject(null, WarningMsg.getSchema()));
                    break;

                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, QueryWarning message) throws IOException
    {
        if(message.queryId == null)
            throw new UninitializedMessageException(message);
        output.writeObject(1, message.queryId, QueryId.getSchema(), false);


        if(message.warnings != null)
        {
            for(WarningMsg warnings : message.warnings)
            {
                if(warnings != null)
                    output.writeObject(2, warnings, WarningMsg.getSchema(), true);
            }
        }

    }

    public String getFieldName(int number)
    {
        switch(number)
        {
            case 1: return "queryId";
            case 2: return "warnings";
            default: return null;
        }
    }

    public int getFieldNumber(String name)
    {
        final Integer number = __fieldMap.get(name);
        return number == null ? 0 : number.intValue();
    }

    private static final java.util.HashMap<String,Integer> __fieldMap = new java.util.HashMap<String,Integer>();
    static
    {
        __fieldMap.put("queryId", 1);
        __fieldMap.put("warnings", 2);
    }
    
}
