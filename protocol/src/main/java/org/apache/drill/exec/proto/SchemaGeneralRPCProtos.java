/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from protobuf

package org.apache.drill.exec.proto;


public final class SchemaGeneralRPCProtos
{

    public static final class Ack
    {
        public static final org.apache.drill.exec.proto.SchemaGeneralRPCProtos.Ack.MessageSchema WRITE =
            new org.apache.drill.exec.proto.SchemaGeneralRPCProtos.Ack.MessageSchema();
        public static final org.apache.drill.exec.proto.SchemaGeneralRPCProtos.Ack.BuilderSchema MERGE =
            new org.apache.drill.exec.proto.SchemaGeneralRPCProtos.Ack.BuilderSchema();
        
        public static class MessageSchema implements io.protostuff.Schema<org.apache.drill.exec.proto.GeneralRPCProtos.Ack>
        {
            public void writeTo(io.protostuff.Output output, org.apache.drill.exec.proto.GeneralRPCProtos.Ack message) throws java.io.IOException
            {
                if(message.hasOk())
                    output.writeBool(1, message.getOk(), false);
            }
            public boolean isInitialized(org.apache.drill.exec.proto.GeneralRPCProtos.Ack message)
            {
                return message.isInitialized();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.apache.drill.exec.proto.SchemaGeneralRPCProtos.Ack.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.apache.drill.exec.proto.SchemaGeneralRPCProtos.Ack.getFieldNumber(name);
            }
            public java.lang.Class<org.apache.drill.exec.proto.GeneralRPCProtos.Ack> typeClass()
            {
                return org.apache.drill.exec.proto.GeneralRPCProtos.Ack.class;
            }
            public java.lang.String messageName()
            {
                return org.apache.drill.exec.proto.GeneralRPCProtos.Ack.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.apache.drill.exec.proto.GeneralRPCProtos.Ack.class.getName();
            }
            //unused
            public void mergeFrom(io.protostuff.Input input, org.apache.drill.exec.proto.GeneralRPCProtos.Ack message) throws java.io.IOException {}
            public org.apache.drill.exec.proto.GeneralRPCProtos.Ack newMessage() { return null; }
        }
        public static class BuilderSchema implements io.protostuff.Schema<org.apache.drill.exec.proto.GeneralRPCProtos.Ack.Builder>
        {
            public void mergeFrom(io.protostuff.Input input, org.apache.drill.exec.proto.GeneralRPCProtos.Ack.Builder builder) throws java.io.IOException
            {
                for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
                {
                    switch(number)
                    {
                        case 0:
                            return;
                        case 1:
                            builder.setOk(input.readBool());
                            break;
                        default:
                            input.handleUnknownField(number, this);
                    }
                }
            }
            public boolean isInitialized(org.apache.drill.exec.proto.GeneralRPCProtos.Ack.Builder builder)
            {
                return builder.isInitialized();
            }
            public org.apache.drill.exec.proto.GeneralRPCProtos.Ack.Builder newMessage()
            {
                return org.apache.drill.exec.proto.GeneralRPCProtos.Ack.newBuilder();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.apache.drill.exec.proto.SchemaGeneralRPCProtos.Ack.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.apache.drill.exec.proto.SchemaGeneralRPCProtos.Ack.getFieldNumber(name);
            }
            public java.lang.Class<org.apache.drill.exec.proto.GeneralRPCProtos.Ack.Builder> typeClass()
            {
                return org.apache.drill.exec.proto.GeneralRPCProtos.Ack.Builder.class;
            }
            public java.lang.String messageName()
            {
                return org.apache.drill.exec.proto.GeneralRPCProtos.Ack.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.apache.drill.exec.proto.GeneralRPCProtos.Ack.class.getName();
            }
            //unused
            public void writeTo(io.protostuff.Output output, org.apache.drill.exec.proto.GeneralRPCProtos.Ack.Builder builder) throws java.io.IOException {}
        }
        public static java.lang.String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "ok";
                default: return null;
            }
        }
        public static int getFieldNumber(java.lang.String name)
        {
            java.lang.Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }
        private static final java.util.HashMap<java.lang.String,java.lang.Integer> fieldMap = new java.util.HashMap<java.lang.String,java.lang.Integer>();
        static
        {
            fieldMap.put("ok", 1);
        }
    }

    public static final class RpcHeader
    {
        public static final org.apache.drill.exec.proto.SchemaGeneralRPCProtos.RpcHeader.MessageSchema WRITE =
            new org.apache.drill.exec.proto.SchemaGeneralRPCProtos.RpcHeader.MessageSchema();
        public static final org.apache.drill.exec.proto.SchemaGeneralRPCProtos.RpcHeader.BuilderSchema MERGE =
            new org.apache.drill.exec.proto.SchemaGeneralRPCProtos.RpcHeader.BuilderSchema();
        
        public static class MessageSchema implements io.protostuff.Schema<org.apache.drill.exec.proto.GeneralRPCProtos.RpcHeader>
        {
            public void writeTo(io.protostuff.Output output, org.apache.drill.exec.proto.GeneralRPCProtos.RpcHeader message) throws java.io.IOException
            {
                if(message.hasMode())
                    output.writeEnum(1, message.getMode().getNumber(), false);
                if(message.hasCoordinationId())
                    output.writeInt32(2, message.getCoordinationId(), false);
                if(message.hasRpcType())
                    output.writeInt32(3, message.getRpcType(), false);
            }
            public boolean isInitialized(org.apache.drill.exec.proto.GeneralRPCProtos.RpcHeader message)
            {
                return message.isInitialized();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.apache.drill.exec.proto.SchemaGeneralRPCProtos.RpcHeader.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.apache.drill.exec.proto.SchemaGeneralRPCProtos.RpcHeader.getFieldNumber(name);
            }
            public java.lang.Class<org.apache.drill.exec.proto.GeneralRPCProtos.RpcHeader> typeClass()
            {
                return org.apache.drill.exec.proto.GeneralRPCProtos.RpcHeader.class;
            }
            public java.lang.String messageName()
            {
                return org.apache.drill.exec.proto.GeneralRPCProtos.RpcHeader.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.apache.drill.exec.proto.GeneralRPCProtos.RpcHeader.class.getName();
            }
            //unused
            public void mergeFrom(io.protostuff.Input input, org.apache.drill.exec.proto.GeneralRPCProtos.RpcHeader message) throws java.io.IOException {}
            public org.apache.drill.exec.proto.GeneralRPCProtos.RpcHeader newMessage() { return null; }
        }
        public static class BuilderSchema implements io.protostuff.Schema<org.apache.drill.exec.proto.GeneralRPCProtos.RpcHeader.Builder>
        {
            public void mergeFrom(io.protostuff.Input input, org.apache.drill.exec.proto.GeneralRPCProtos.RpcHeader.Builder builder) throws java.io.IOException
            {
                for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
                {
                    switch(number)
                    {
                        case 0:
                            return;
                        case 1:
                            builder.setMode(org.apache.drill.exec.proto.GeneralRPCProtos.RpcMode.valueOf(input.readEnum()));
                            break;
                        case 2:
                            builder.setCoordinationId(input.readInt32());
                            break;
                        case 3:
                            builder.setRpcType(input.readInt32());
                            break;
                        default:
                            input.handleUnknownField(number, this);
                    }
                }
            }
            public boolean isInitialized(org.apache.drill.exec.proto.GeneralRPCProtos.RpcHeader.Builder builder)
            {
                return builder.isInitialized();
            }
            public org.apache.drill.exec.proto.GeneralRPCProtos.RpcHeader.Builder newMessage()
            {
                return org.apache.drill.exec.proto.GeneralRPCProtos.RpcHeader.newBuilder();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.apache.drill.exec.proto.SchemaGeneralRPCProtos.RpcHeader.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.apache.drill.exec.proto.SchemaGeneralRPCProtos.RpcHeader.getFieldNumber(name);
            }
            public java.lang.Class<org.apache.drill.exec.proto.GeneralRPCProtos.RpcHeader.Builder> typeClass()
            {
                return org.apache.drill.exec.proto.GeneralRPCProtos.RpcHeader.Builder.class;
            }
            public java.lang.String messageName()
            {
                return org.apache.drill.exec.proto.GeneralRPCProtos.RpcHeader.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.apache.drill.exec.proto.GeneralRPCProtos.RpcHeader.class.getName();
            }
            //unused
            public void writeTo(io.protostuff.Output output, org.apache.drill.exec.proto.GeneralRPCProtos.RpcHeader.Builder builder) throws java.io.IOException {}
        }
        public static java.lang.String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "mode";
                case 2: return "coordinationId";
                case 3: return "rpcType";
                default: return null;
            }
        }
        public static int getFieldNumber(java.lang.String name)
        {
            java.lang.Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }
        private static final java.util.HashMap<java.lang.String,java.lang.Integer> fieldMap = new java.util.HashMap<java.lang.String,java.lang.Integer>();
        static
        {
            fieldMap.put("mode", 1);
            fieldMap.put("coordinationId", 2);
            fieldMap.put("rpcType", 3);
        }
    }

    public static final class CompleteRpcMessage
    {
        public static final org.apache.drill.exec.proto.SchemaGeneralRPCProtos.CompleteRpcMessage.MessageSchema WRITE =
            new org.apache.drill.exec.proto.SchemaGeneralRPCProtos.CompleteRpcMessage.MessageSchema();
        public static final org.apache.drill.exec.proto.SchemaGeneralRPCProtos.CompleteRpcMessage.BuilderSchema MERGE =
            new org.apache.drill.exec.proto.SchemaGeneralRPCProtos.CompleteRpcMessage.BuilderSchema();
        
        public static class MessageSchema implements io.protostuff.Schema<org.apache.drill.exec.proto.GeneralRPCProtos.CompleteRpcMessage>
        {
            public void writeTo(io.protostuff.Output output, org.apache.drill.exec.proto.GeneralRPCProtos.CompleteRpcMessage message) throws java.io.IOException
            {
                if(message.hasHeader())
                    output.writeObject(1, message.getHeader(), org.apache.drill.exec.proto.SchemaGeneralRPCProtos.RpcHeader.WRITE, false);

                if(message.hasProtobufBody())
                    output.writeByteArray(2, message.getProtobufBody().toByteArray(), false);

                if(message.hasRawBody())
                    output.writeByteArray(3, message.getRawBody().toByteArray(), false);

            }
            public boolean isInitialized(org.apache.drill.exec.proto.GeneralRPCProtos.CompleteRpcMessage message)
            {
                return message.isInitialized();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.apache.drill.exec.proto.SchemaGeneralRPCProtos.CompleteRpcMessage.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.apache.drill.exec.proto.SchemaGeneralRPCProtos.CompleteRpcMessage.getFieldNumber(name);
            }
            public java.lang.Class<org.apache.drill.exec.proto.GeneralRPCProtos.CompleteRpcMessage> typeClass()
            {
                return org.apache.drill.exec.proto.GeneralRPCProtos.CompleteRpcMessage.class;
            }
            public java.lang.String messageName()
            {
                return org.apache.drill.exec.proto.GeneralRPCProtos.CompleteRpcMessage.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.apache.drill.exec.proto.GeneralRPCProtos.CompleteRpcMessage.class.getName();
            }
            //unused
            public void mergeFrom(io.protostuff.Input input, org.apache.drill.exec.proto.GeneralRPCProtos.CompleteRpcMessage message) throws java.io.IOException {}
            public org.apache.drill.exec.proto.GeneralRPCProtos.CompleteRpcMessage newMessage() { return null; }
        }
        public static class BuilderSchema implements io.protostuff.Schema<org.apache.drill.exec.proto.GeneralRPCProtos.CompleteRpcMessage.Builder>
        {
            public void mergeFrom(io.protostuff.Input input, org.apache.drill.exec.proto.GeneralRPCProtos.CompleteRpcMessage.Builder builder) throws java.io.IOException
            {
                for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
                {
                    switch(number)
                    {
                        case 0:
                            return;
                        case 1:
                            builder.setHeader(input.mergeObject(org.apache.drill.exec.proto.GeneralRPCProtos.RpcHeader.newBuilder(), org.apache.drill.exec.proto.SchemaGeneralRPCProtos.RpcHeader.MERGE));

                            break;
                        case 2:
                            builder.setProtobufBody(com.google.protobuf.ByteString.copyFrom(input.readByteArray()));
                            break;
                        case 3:
                            builder.setRawBody(com.google.protobuf.ByteString.copyFrom(input.readByteArray()));
                            break;
                        default:
                            input.handleUnknownField(number, this);
                    }
                }
            }
            public boolean isInitialized(org.apache.drill.exec.proto.GeneralRPCProtos.CompleteRpcMessage.Builder builder)
            {
                return builder.isInitialized();
            }
            public org.apache.drill.exec.proto.GeneralRPCProtos.CompleteRpcMessage.Builder newMessage()
            {
                return org.apache.drill.exec.proto.GeneralRPCProtos.CompleteRpcMessage.newBuilder();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.apache.drill.exec.proto.SchemaGeneralRPCProtos.CompleteRpcMessage.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.apache.drill.exec.proto.SchemaGeneralRPCProtos.CompleteRpcMessage.getFieldNumber(name);
            }
            public java.lang.Class<org.apache.drill.exec.proto.GeneralRPCProtos.CompleteRpcMessage.Builder> typeClass()
            {
                return org.apache.drill.exec.proto.GeneralRPCProtos.CompleteRpcMessage.Builder.class;
            }
            public java.lang.String messageName()
            {
                return org.apache.drill.exec.proto.GeneralRPCProtos.CompleteRpcMessage.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.apache.drill.exec.proto.GeneralRPCProtos.CompleteRpcMessage.class.getName();
            }
            //unused
            public void writeTo(io.protostuff.Output output, org.apache.drill.exec.proto.GeneralRPCProtos.CompleteRpcMessage.Builder builder) throws java.io.IOException {}
        }
        public static java.lang.String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "header";
                case 2: return "protobufBody";
                case 3: return "rawBody";
                default: return null;
            }
        }
        public static int getFieldNumber(java.lang.String name)
        {
            java.lang.Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }
        private static final java.util.HashMap<java.lang.String,java.lang.Integer> fieldMap = new java.util.HashMap<java.lang.String,java.lang.Integer>();
        static
        {
            fieldMap.put("header", 1);
            fieldMap.put("protobufBody", 2);
            fieldMap.put("rawBody", 3);
        }
    }

}
