/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from protobuf

package org.apache.drill.exec.proto;


public final class SchemaBitControl
{

    public static final class BitControlHandshake
    {
        public static final org.apache.drill.exec.proto.SchemaBitControl.BitControlHandshake.MessageSchema WRITE =
            new org.apache.drill.exec.proto.SchemaBitControl.BitControlHandshake.MessageSchema();
        public static final org.apache.drill.exec.proto.SchemaBitControl.BitControlHandshake.BuilderSchema MERGE =
            new org.apache.drill.exec.proto.SchemaBitControl.BitControlHandshake.BuilderSchema();
        
        public static class MessageSchema implements com.dyuproject.protostuff.Schema<org.apache.drill.exec.proto.BitControl.BitControlHandshake>
        {
            public void writeTo(com.dyuproject.protostuff.Output output, org.apache.drill.exec.proto.BitControl.BitControlHandshake message) throws java.io.IOException
            {
                if(message.hasRpcVersion())
                    output.writeInt32(1, message.getRpcVersion(), false);
                if(message.hasChannel())
                    output.writeEnum(2, message.getChannel().getNumber(), false);
                if(message.hasEndpoint())
                    output.writeObject(3, message.getEndpoint(), org.apache.drill.exec.proto.SchemaCoordinationProtos.DrillbitEndpoint.WRITE, false);

            }
            public boolean isInitialized(org.apache.drill.exec.proto.BitControl.BitControlHandshake message)
            {
                return message.isInitialized();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.apache.drill.exec.proto.SchemaBitControl.BitControlHandshake.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.apache.drill.exec.proto.SchemaBitControl.BitControlHandshake.getFieldNumber(name);
            }
            public java.lang.Class<org.apache.drill.exec.proto.BitControl.BitControlHandshake> typeClass()
            {
                return org.apache.drill.exec.proto.BitControl.BitControlHandshake.class;
            }
            public java.lang.String messageName()
            {
                return org.apache.drill.exec.proto.BitControl.BitControlHandshake.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.apache.drill.exec.proto.BitControl.BitControlHandshake.class.getName();
            }
            //unused
            public void mergeFrom(com.dyuproject.protostuff.Input input, org.apache.drill.exec.proto.BitControl.BitControlHandshake message) throws java.io.IOException {}
            public org.apache.drill.exec.proto.BitControl.BitControlHandshake newMessage() { return null; }
        }
        public static class BuilderSchema implements com.dyuproject.protostuff.Schema<org.apache.drill.exec.proto.BitControl.BitControlHandshake.Builder>
        {
            public void mergeFrom(com.dyuproject.protostuff.Input input, org.apache.drill.exec.proto.BitControl.BitControlHandshake.Builder builder) throws java.io.IOException
            {
                for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
                {
                    switch(number)
                    {
                        case 0:
                            return;
                        case 1:
                            builder.setRpcVersion(input.readInt32());
                            break;
                        case 2:
                            builder.setChannel(org.apache.drill.exec.proto.UserBitShared.RpcChannel.valueOf(input.readEnum()));
                            break;
                        case 3:
                            builder.setEndpoint(input.mergeObject(org.apache.drill.exec.proto.CoordinationProtos.DrillbitEndpoint.newBuilder(), org.apache.drill.exec.proto.SchemaCoordinationProtos.DrillbitEndpoint.MERGE));

                            break;
                        default:
                            input.handleUnknownField(number, this);
                    }
                }
            }
            public boolean isInitialized(org.apache.drill.exec.proto.BitControl.BitControlHandshake.Builder builder)
            {
                return builder.isInitialized();
            }
            public org.apache.drill.exec.proto.BitControl.BitControlHandshake.Builder newMessage()
            {
                return org.apache.drill.exec.proto.BitControl.BitControlHandshake.newBuilder();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.apache.drill.exec.proto.SchemaBitControl.BitControlHandshake.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.apache.drill.exec.proto.SchemaBitControl.BitControlHandshake.getFieldNumber(name);
            }
            public java.lang.Class<org.apache.drill.exec.proto.BitControl.BitControlHandshake.Builder> typeClass()
            {
                return org.apache.drill.exec.proto.BitControl.BitControlHandshake.Builder.class;
            }
            public java.lang.String messageName()
            {
                return org.apache.drill.exec.proto.BitControl.BitControlHandshake.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.apache.drill.exec.proto.BitControl.BitControlHandshake.class.getName();
            }
            //unused
            public void writeTo(com.dyuproject.protostuff.Output output, org.apache.drill.exec.proto.BitControl.BitControlHandshake.Builder builder) throws java.io.IOException {}
        }
        public static java.lang.String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "rpcVersion";
                case 2: return "channel";
                case 3: return "endpoint";
                default: return null;
            }
        }
        public static int getFieldNumber(java.lang.String name)
        {
            java.lang.Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }
        private static final java.util.HashMap<java.lang.String,java.lang.Integer> fieldMap = new java.util.HashMap<java.lang.String,java.lang.Integer>();
        static
        {
            fieldMap.put("rpcVersion", 1);
            fieldMap.put("channel", 2);
            fieldMap.put("endpoint", 3);
        }
    }

    public static final class BitStatus
    {
        public static final org.apache.drill.exec.proto.SchemaBitControl.BitStatus.MessageSchema WRITE =
            new org.apache.drill.exec.proto.SchemaBitControl.BitStatus.MessageSchema();
        public static final org.apache.drill.exec.proto.SchemaBitControl.BitStatus.BuilderSchema MERGE =
            new org.apache.drill.exec.proto.SchemaBitControl.BitStatus.BuilderSchema();
        
        public static class MessageSchema implements com.dyuproject.protostuff.Schema<org.apache.drill.exec.proto.BitControl.BitStatus>
        {
            public void writeTo(com.dyuproject.protostuff.Output output, org.apache.drill.exec.proto.BitControl.BitStatus message) throws java.io.IOException
            {
                for(org.apache.drill.exec.proto.BitControl.FragmentStatus fragmentStatus : message.getFragmentStatusList())
                    output.writeObject(1, fragmentStatus, org.apache.drill.exec.proto.SchemaBitControl.FragmentStatus.WRITE, true);

            }
            public boolean isInitialized(org.apache.drill.exec.proto.BitControl.BitStatus message)
            {
                return message.isInitialized();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.apache.drill.exec.proto.SchemaBitControl.BitStatus.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.apache.drill.exec.proto.SchemaBitControl.BitStatus.getFieldNumber(name);
            }
            public java.lang.Class<org.apache.drill.exec.proto.BitControl.BitStatus> typeClass()
            {
                return org.apache.drill.exec.proto.BitControl.BitStatus.class;
            }
            public java.lang.String messageName()
            {
                return org.apache.drill.exec.proto.BitControl.BitStatus.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.apache.drill.exec.proto.BitControl.BitStatus.class.getName();
            }
            //unused
            public void mergeFrom(com.dyuproject.protostuff.Input input, org.apache.drill.exec.proto.BitControl.BitStatus message) throws java.io.IOException {}
            public org.apache.drill.exec.proto.BitControl.BitStatus newMessage() { return null; }
        }
        public static class BuilderSchema implements com.dyuproject.protostuff.Schema<org.apache.drill.exec.proto.BitControl.BitStatus.Builder>
        {
            public void mergeFrom(com.dyuproject.protostuff.Input input, org.apache.drill.exec.proto.BitControl.BitStatus.Builder builder) throws java.io.IOException
            {
                for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
                {
                    switch(number)
                    {
                        case 0:
                            return;
                        case 1:
                            builder.addFragmentStatus(input.mergeObject(org.apache.drill.exec.proto.BitControl.FragmentStatus.newBuilder(), org.apache.drill.exec.proto.SchemaBitControl.FragmentStatus.MERGE));

                            break;
                        default:
                            input.handleUnknownField(number, this);
                    }
                }
            }
            public boolean isInitialized(org.apache.drill.exec.proto.BitControl.BitStatus.Builder builder)
            {
                return builder.isInitialized();
            }
            public org.apache.drill.exec.proto.BitControl.BitStatus.Builder newMessage()
            {
                return org.apache.drill.exec.proto.BitControl.BitStatus.newBuilder();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.apache.drill.exec.proto.SchemaBitControl.BitStatus.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.apache.drill.exec.proto.SchemaBitControl.BitStatus.getFieldNumber(name);
            }
            public java.lang.Class<org.apache.drill.exec.proto.BitControl.BitStatus.Builder> typeClass()
            {
                return org.apache.drill.exec.proto.BitControl.BitStatus.Builder.class;
            }
            public java.lang.String messageName()
            {
                return org.apache.drill.exec.proto.BitControl.BitStatus.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.apache.drill.exec.proto.BitControl.BitStatus.class.getName();
            }
            //unused
            public void writeTo(com.dyuproject.protostuff.Output output, org.apache.drill.exec.proto.BitControl.BitStatus.Builder builder) throws java.io.IOException {}
        }
        public static java.lang.String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "fragmentStatus";
                default: return null;
            }
        }
        public static int getFieldNumber(java.lang.String name)
        {
            java.lang.Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }
        private static final java.util.HashMap<java.lang.String,java.lang.Integer> fieldMap = new java.util.HashMap<java.lang.String,java.lang.Integer>();
        static
        {
            fieldMap.put("fragmentStatus", 1);
        }
    }

    public static final class FragmentStatus
    {
        public static final org.apache.drill.exec.proto.SchemaBitControl.FragmentStatus.MessageSchema WRITE =
            new org.apache.drill.exec.proto.SchemaBitControl.FragmentStatus.MessageSchema();
        public static final org.apache.drill.exec.proto.SchemaBitControl.FragmentStatus.BuilderSchema MERGE =
            new org.apache.drill.exec.proto.SchemaBitControl.FragmentStatus.BuilderSchema();
        
        public static class MessageSchema implements com.dyuproject.protostuff.Schema<org.apache.drill.exec.proto.BitControl.FragmentStatus>
        {
            public void writeTo(com.dyuproject.protostuff.Output output, org.apache.drill.exec.proto.BitControl.FragmentStatus message) throws java.io.IOException
            {
                if(message.hasProfile())
                    output.writeObject(1, message.getProfile(), org.apache.drill.exec.proto.SchemaUserBitShared.MinorFragmentProfile.WRITE, false);

                if(message.hasHandle())
                    output.writeObject(2, message.getHandle(), org.apache.drill.exec.proto.SchemaExecProtos.FragmentHandle.WRITE, false);

            }
            public boolean isInitialized(org.apache.drill.exec.proto.BitControl.FragmentStatus message)
            {
                return message.isInitialized();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.apache.drill.exec.proto.SchemaBitControl.FragmentStatus.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.apache.drill.exec.proto.SchemaBitControl.FragmentStatus.getFieldNumber(name);
            }
            public java.lang.Class<org.apache.drill.exec.proto.BitControl.FragmentStatus> typeClass()
            {
                return org.apache.drill.exec.proto.BitControl.FragmentStatus.class;
            }
            public java.lang.String messageName()
            {
                return org.apache.drill.exec.proto.BitControl.FragmentStatus.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.apache.drill.exec.proto.BitControl.FragmentStatus.class.getName();
            }
            //unused
            public void mergeFrom(com.dyuproject.protostuff.Input input, org.apache.drill.exec.proto.BitControl.FragmentStatus message) throws java.io.IOException {}
            public org.apache.drill.exec.proto.BitControl.FragmentStatus newMessage() { return null; }
        }
        public static class BuilderSchema implements com.dyuproject.protostuff.Schema<org.apache.drill.exec.proto.BitControl.FragmentStatus.Builder>
        {
            public void mergeFrom(com.dyuproject.protostuff.Input input, org.apache.drill.exec.proto.BitControl.FragmentStatus.Builder builder) throws java.io.IOException
            {
                for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
                {
                    switch(number)
                    {
                        case 0:
                            return;
                        case 1:
                            builder.setProfile(input.mergeObject(org.apache.drill.exec.proto.UserBitShared.MinorFragmentProfile.newBuilder(), org.apache.drill.exec.proto.SchemaUserBitShared.MinorFragmentProfile.MERGE));

                            break;
                        case 2:
                            builder.setHandle(input.mergeObject(org.apache.drill.exec.proto.ExecProtos.FragmentHandle.newBuilder(), org.apache.drill.exec.proto.SchemaExecProtos.FragmentHandle.MERGE));

                            break;
                        default:
                            input.handleUnknownField(number, this);
                    }
                }
            }
            public boolean isInitialized(org.apache.drill.exec.proto.BitControl.FragmentStatus.Builder builder)
            {
                return builder.isInitialized();
            }
            public org.apache.drill.exec.proto.BitControl.FragmentStatus.Builder newMessage()
            {
                return org.apache.drill.exec.proto.BitControl.FragmentStatus.newBuilder();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.apache.drill.exec.proto.SchemaBitControl.FragmentStatus.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.apache.drill.exec.proto.SchemaBitControl.FragmentStatus.getFieldNumber(name);
            }
            public java.lang.Class<org.apache.drill.exec.proto.BitControl.FragmentStatus.Builder> typeClass()
            {
                return org.apache.drill.exec.proto.BitControl.FragmentStatus.Builder.class;
            }
            public java.lang.String messageName()
            {
                return org.apache.drill.exec.proto.BitControl.FragmentStatus.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.apache.drill.exec.proto.BitControl.FragmentStatus.class.getName();
            }
            //unused
            public void writeTo(com.dyuproject.protostuff.Output output, org.apache.drill.exec.proto.BitControl.FragmentStatus.Builder builder) throws java.io.IOException {}
        }
        public static java.lang.String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "profile";
                case 2: return "handle";
                default: return null;
            }
        }
        public static int getFieldNumber(java.lang.String name)
        {
            java.lang.Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }
        private static final java.util.HashMap<java.lang.String,java.lang.Integer> fieldMap = new java.util.HashMap<java.lang.String,java.lang.Integer>();
        static
        {
            fieldMap.put("profile", 1);
            fieldMap.put("handle", 2);
        }
    }

    public static final class PlanFragment
    {
        public static final org.apache.drill.exec.proto.SchemaBitControl.PlanFragment.MessageSchema WRITE =
            new org.apache.drill.exec.proto.SchemaBitControl.PlanFragment.MessageSchema();
        public static final org.apache.drill.exec.proto.SchemaBitControl.PlanFragment.BuilderSchema MERGE =
            new org.apache.drill.exec.proto.SchemaBitControl.PlanFragment.BuilderSchema();
        
        public static class MessageSchema implements com.dyuproject.protostuff.Schema<org.apache.drill.exec.proto.BitControl.PlanFragment>
        {
            public void writeTo(com.dyuproject.protostuff.Output output, org.apache.drill.exec.proto.BitControl.PlanFragment message) throws java.io.IOException
            {
                if(message.hasHandle())
                    output.writeObject(1, message.getHandle(), org.apache.drill.exec.proto.SchemaExecProtos.FragmentHandle.WRITE, false);

                if(message.hasNetworkCost())
                    output.writeFloat(4, message.getNetworkCost(), false);
                if(message.hasCpuCost())
                    output.writeFloat(5, message.getCpuCost(), false);
                if(message.hasDiskCost())
                    output.writeFloat(6, message.getDiskCost(), false);
                if(message.hasMemoryCost())
                    output.writeFloat(7, message.getMemoryCost(), false);
                if(message.hasFragmentJson())
                    output.writeString(8, message.getFragmentJson(), false);
                if(message.hasLeafFragment())
                    output.writeBool(9, message.getLeafFragment(), false);
                if(message.hasAssignment())
                    output.writeObject(10, message.getAssignment(), org.apache.drill.exec.proto.SchemaCoordinationProtos.DrillbitEndpoint.WRITE, false);

                if(message.hasForeman())
                    output.writeObject(11, message.getForeman(), org.apache.drill.exec.proto.SchemaCoordinationProtos.DrillbitEndpoint.WRITE, false);

                if(message.hasMemInitial())
                    output.writeInt64(12, message.getMemInitial(), false);
                if(message.hasMemMax())
                    output.writeInt64(13, message.getMemMax(), false);
                if(message.hasQueryStartTime())
                    output.writeInt64(14, message.getQueryStartTime(), false);
                if(message.hasCredentials())
                    output.writeObject(15, message.getCredentials(), org.apache.drill.exec.proto.SchemaUserBitShared.UserCredentials.WRITE, false);

                if(message.hasTimeZone())
                    output.writeInt32(16, message.getTimeZone(), false);
                if(message.hasOptionsJson())
                    output.writeString(17, message.getOptionsJson(), false);
            }
            public boolean isInitialized(org.apache.drill.exec.proto.BitControl.PlanFragment message)
            {
                return message.isInitialized();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.apache.drill.exec.proto.SchemaBitControl.PlanFragment.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.apache.drill.exec.proto.SchemaBitControl.PlanFragment.getFieldNumber(name);
            }
            public java.lang.Class<org.apache.drill.exec.proto.BitControl.PlanFragment> typeClass()
            {
                return org.apache.drill.exec.proto.BitControl.PlanFragment.class;
            }
            public java.lang.String messageName()
            {
                return org.apache.drill.exec.proto.BitControl.PlanFragment.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.apache.drill.exec.proto.BitControl.PlanFragment.class.getName();
            }
            //unused
            public void mergeFrom(com.dyuproject.protostuff.Input input, org.apache.drill.exec.proto.BitControl.PlanFragment message) throws java.io.IOException {}
            public org.apache.drill.exec.proto.BitControl.PlanFragment newMessage() { return null; }
        }
        public static class BuilderSchema implements com.dyuproject.protostuff.Schema<org.apache.drill.exec.proto.BitControl.PlanFragment.Builder>
        {
            public void mergeFrom(com.dyuproject.protostuff.Input input, org.apache.drill.exec.proto.BitControl.PlanFragment.Builder builder) throws java.io.IOException
            {
                for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
                {
                    switch(number)
                    {
                        case 0:
                            return;
                        case 1:
                            builder.setHandle(input.mergeObject(org.apache.drill.exec.proto.ExecProtos.FragmentHandle.newBuilder(), org.apache.drill.exec.proto.SchemaExecProtos.FragmentHandle.MERGE));

                            break;
                        case 4:
                            builder.setNetworkCost(input.readFloat());
                            break;
                        case 5:
                            builder.setCpuCost(input.readFloat());
                            break;
                        case 6:
                            builder.setDiskCost(input.readFloat());
                            break;
                        case 7:
                            builder.setMemoryCost(input.readFloat());
                            break;
                        case 8:
                            builder.setFragmentJson(input.readString());
                            break;
                        case 9:
                            builder.setLeafFragment(input.readBool());
                            break;
                        case 10:
                            builder.setAssignment(input.mergeObject(org.apache.drill.exec.proto.CoordinationProtos.DrillbitEndpoint.newBuilder(), org.apache.drill.exec.proto.SchemaCoordinationProtos.DrillbitEndpoint.MERGE));

                            break;
                        case 11:
                            builder.setForeman(input.mergeObject(org.apache.drill.exec.proto.CoordinationProtos.DrillbitEndpoint.newBuilder(), org.apache.drill.exec.proto.SchemaCoordinationProtos.DrillbitEndpoint.MERGE));

                            break;
                        case 12:
                            builder.setMemInitial(input.readInt64());
                            break;
                        case 13:
                            builder.setMemMax(input.readInt64());
                            break;
                        case 14:
                            builder.setQueryStartTime(input.readInt64());
                            break;
                        case 15:
                            builder.setCredentials(input.mergeObject(org.apache.drill.exec.proto.UserBitShared.UserCredentials.newBuilder(), org.apache.drill.exec.proto.SchemaUserBitShared.UserCredentials.MERGE));

                            break;
                        case 16:
                            builder.setTimeZone(input.readInt32());
                            break;
                        case 17:
                            builder.setOptionsJson(input.readString());
                            break;
                        default:
                            input.handleUnknownField(number, this);
                    }
                }
            }
            public boolean isInitialized(org.apache.drill.exec.proto.BitControl.PlanFragment.Builder builder)
            {
                return builder.isInitialized();
            }
            public org.apache.drill.exec.proto.BitControl.PlanFragment.Builder newMessage()
            {
                return org.apache.drill.exec.proto.BitControl.PlanFragment.newBuilder();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.apache.drill.exec.proto.SchemaBitControl.PlanFragment.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.apache.drill.exec.proto.SchemaBitControl.PlanFragment.getFieldNumber(name);
            }
            public java.lang.Class<org.apache.drill.exec.proto.BitControl.PlanFragment.Builder> typeClass()
            {
                return org.apache.drill.exec.proto.BitControl.PlanFragment.Builder.class;
            }
            public java.lang.String messageName()
            {
                return org.apache.drill.exec.proto.BitControl.PlanFragment.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.apache.drill.exec.proto.BitControl.PlanFragment.class.getName();
            }
            //unused
            public void writeTo(com.dyuproject.protostuff.Output output, org.apache.drill.exec.proto.BitControl.PlanFragment.Builder builder) throws java.io.IOException {}
        }
        public static java.lang.String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "handle";
                case 4: return "networkCost";
                case 5: return "cpuCost";
                case 6: return "diskCost";
                case 7: return "memoryCost";
                case 8: return "fragmentJson";
                case 9: return "leafFragment";
                case 10: return "assignment";
                case 11: return "foreman";
                case 12: return "memInitial";
                case 13: return "memMax";
                case 14: return "queryStartTime";
                case 15: return "credentials";
                case 16: return "timeZone";
                case 17: return "optionsJson";
                default: return null;
            }
        }
        public static int getFieldNumber(java.lang.String name)
        {
            java.lang.Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }
        private static final java.util.HashMap<java.lang.String,java.lang.Integer> fieldMap = new java.util.HashMap<java.lang.String,java.lang.Integer>();
        static
        {
            fieldMap.put("handle", 1);
            fieldMap.put("networkCost", 4);
            fieldMap.put("cpuCost", 5);
            fieldMap.put("diskCost", 6);
            fieldMap.put("memoryCost", 7);
            fieldMap.put("fragmentJson", 8);
            fieldMap.put("leafFragment", 9);
            fieldMap.put("assignment", 10);
            fieldMap.put("foreman", 11);
            fieldMap.put("memInitial", 12);
            fieldMap.put("memMax", 13);
            fieldMap.put("queryStartTime", 14);
            fieldMap.put("credentials", 15);
            fieldMap.put("timeZone", 16);
            fieldMap.put("optionsJson", 17);
        }
    }

    public static final class WorkQueueStatus
    {
        public static final org.apache.drill.exec.proto.SchemaBitControl.WorkQueueStatus.MessageSchema WRITE =
            new org.apache.drill.exec.proto.SchemaBitControl.WorkQueueStatus.MessageSchema();
        public static final org.apache.drill.exec.proto.SchemaBitControl.WorkQueueStatus.BuilderSchema MERGE =
            new org.apache.drill.exec.proto.SchemaBitControl.WorkQueueStatus.BuilderSchema();
        
        public static class MessageSchema implements com.dyuproject.protostuff.Schema<org.apache.drill.exec.proto.BitControl.WorkQueueStatus>
        {
            public void writeTo(com.dyuproject.protostuff.Output output, org.apache.drill.exec.proto.BitControl.WorkQueueStatus message) throws java.io.IOException
            {
                if(message.hasEndpoint())
                    output.writeObject(1, message.getEndpoint(), org.apache.drill.exec.proto.SchemaCoordinationProtos.DrillbitEndpoint.WRITE, false);

                if(message.hasQueueLength())
                    output.writeInt32(2, message.getQueueLength(), false);
                if(message.hasReportTime())
                    output.writeInt64(3, message.getReportTime(), false);
            }
            public boolean isInitialized(org.apache.drill.exec.proto.BitControl.WorkQueueStatus message)
            {
                return message.isInitialized();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.apache.drill.exec.proto.SchemaBitControl.WorkQueueStatus.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.apache.drill.exec.proto.SchemaBitControl.WorkQueueStatus.getFieldNumber(name);
            }
            public java.lang.Class<org.apache.drill.exec.proto.BitControl.WorkQueueStatus> typeClass()
            {
                return org.apache.drill.exec.proto.BitControl.WorkQueueStatus.class;
            }
            public java.lang.String messageName()
            {
                return org.apache.drill.exec.proto.BitControl.WorkQueueStatus.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.apache.drill.exec.proto.BitControl.WorkQueueStatus.class.getName();
            }
            //unused
            public void mergeFrom(com.dyuproject.protostuff.Input input, org.apache.drill.exec.proto.BitControl.WorkQueueStatus message) throws java.io.IOException {}
            public org.apache.drill.exec.proto.BitControl.WorkQueueStatus newMessage() { return null; }
        }
        public static class BuilderSchema implements com.dyuproject.protostuff.Schema<org.apache.drill.exec.proto.BitControl.WorkQueueStatus.Builder>
        {
            public void mergeFrom(com.dyuproject.protostuff.Input input, org.apache.drill.exec.proto.BitControl.WorkQueueStatus.Builder builder) throws java.io.IOException
            {
                for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
                {
                    switch(number)
                    {
                        case 0:
                            return;
                        case 1:
                            builder.setEndpoint(input.mergeObject(org.apache.drill.exec.proto.CoordinationProtos.DrillbitEndpoint.newBuilder(), org.apache.drill.exec.proto.SchemaCoordinationProtos.DrillbitEndpoint.MERGE));

                            break;
                        case 2:
                            builder.setQueueLength(input.readInt32());
                            break;
                        case 3:
                            builder.setReportTime(input.readInt64());
                            break;
                        default:
                            input.handleUnknownField(number, this);
                    }
                }
            }
            public boolean isInitialized(org.apache.drill.exec.proto.BitControl.WorkQueueStatus.Builder builder)
            {
                return builder.isInitialized();
            }
            public org.apache.drill.exec.proto.BitControl.WorkQueueStatus.Builder newMessage()
            {
                return org.apache.drill.exec.proto.BitControl.WorkQueueStatus.newBuilder();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.apache.drill.exec.proto.SchemaBitControl.WorkQueueStatus.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.apache.drill.exec.proto.SchemaBitControl.WorkQueueStatus.getFieldNumber(name);
            }
            public java.lang.Class<org.apache.drill.exec.proto.BitControl.WorkQueueStatus.Builder> typeClass()
            {
                return org.apache.drill.exec.proto.BitControl.WorkQueueStatus.Builder.class;
            }
            public java.lang.String messageName()
            {
                return org.apache.drill.exec.proto.BitControl.WorkQueueStatus.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.apache.drill.exec.proto.BitControl.WorkQueueStatus.class.getName();
            }
            //unused
            public void writeTo(com.dyuproject.protostuff.Output output, org.apache.drill.exec.proto.BitControl.WorkQueueStatus.Builder builder) throws java.io.IOException {}
        }
        public static java.lang.String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "endpoint";
                case 2: return "queueLength";
                case 3: return "reportTime";
                default: return null;
            }
        }
        public static int getFieldNumber(java.lang.String name)
        {
            java.lang.Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }
        private static final java.util.HashMap<java.lang.String,java.lang.Integer> fieldMap = new java.util.HashMap<java.lang.String,java.lang.Integer>();
        static
        {
            fieldMap.put("endpoint", 1);
            fieldMap.put("queueLength", 2);
            fieldMap.put("reportTime", 3);
        }
    }

    public static final class FinishedReceiver
    {
        public static final org.apache.drill.exec.proto.SchemaBitControl.FinishedReceiver.MessageSchema WRITE =
            new org.apache.drill.exec.proto.SchemaBitControl.FinishedReceiver.MessageSchema();
        public static final org.apache.drill.exec.proto.SchemaBitControl.FinishedReceiver.BuilderSchema MERGE =
            new org.apache.drill.exec.proto.SchemaBitControl.FinishedReceiver.BuilderSchema();
        
        public static class MessageSchema implements com.dyuproject.protostuff.Schema<org.apache.drill.exec.proto.BitControl.FinishedReceiver>
        {
            public void writeTo(com.dyuproject.protostuff.Output output, org.apache.drill.exec.proto.BitControl.FinishedReceiver message) throws java.io.IOException
            {
                if(message.hasReceiver())
                    output.writeObject(1, message.getReceiver(), org.apache.drill.exec.proto.SchemaExecProtos.FragmentHandle.WRITE, false);

                if(message.hasSender())
                    output.writeObject(2, message.getSender(), org.apache.drill.exec.proto.SchemaExecProtos.FragmentHandle.WRITE, false);

            }
            public boolean isInitialized(org.apache.drill.exec.proto.BitControl.FinishedReceiver message)
            {
                return message.isInitialized();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.apache.drill.exec.proto.SchemaBitControl.FinishedReceiver.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.apache.drill.exec.proto.SchemaBitControl.FinishedReceiver.getFieldNumber(name);
            }
            public java.lang.Class<org.apache.drill.exec.proto.BitControl.FinishedReceiver> typeClass()
            {
                return org.apache.drill.exec.proto.BitControl.FinishedReceiver.class;
            }
            public java.lang.String messageName()
            {
                return org.apache.drill.exec.proto.BitControl.FinishedReceiver.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.apache.drill.exec.proto.BitControl.FinishedReceiver.class.getName();
            }
            //unused
            public void mergeFrom(com.dyuproject.protostuff.Input input, org.apache.drill.exec.proto.BitControl.FinishedReceiver message) throws java.io.IOException {}
            public org.apache.drill.exec.proto.BitControl.FinishedReceiver newMessage() { return null; }
        }
        public static class BuilderSchema implements com.dyuproject.protostuff.Schema<org.apache.drill.exec.proto.BitControl.FinishedReceiver.Builder>
        {
            public void mergeFrom(com.dyuproject.protostuff.Input input, org.apache.drill.exec.proto.BitControl.FinishedReceiver.Builder builder) throws java.io.IOException
            {
                for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
                {
                    switch(number)
                    {
                        case 0:
                            return;
                        case 1:
                            builder.setReceiver(input.mergeObject(org.apache.drill.exec.proto.ExecProtos.FragmentHandle.newBuilder(), org.apache.drill.exec.proto.SchemaExecProtos.FragmentHandle.MERGE));

                            break;
                        case 2:
                            builder.setSender(input.mergeObject(org.apache.drill.exec.proto.ExecProtos.FragmentHandle.newBuilder(), org.apache.drill.exec.proto.SchemaExecProtos.FragmentHandle.MERGE));

                            break;
                        default:
                            input.handleUnknownField(number, this);
                    }
                }
            }
            public boolean isInitialized(org.apache.drill.exec.proto.BitControl.FinishedReceiver.Builder builder)
            {
                return builder.isInitialized();
            }
            public org.apache.drill.exec.proto.BitControl.FinishedReceiver.Builder newMessage()
            {
                return org.apache.drill.exec.proto.BitControl.FinishedReceiver.newBuilder();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.apache.drill.exec.proto.SchemaBitControl.FinishedReceiver.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.apache.drill.exec.proto.SchemaBitControl.FinishedReceiver.getFieldNumber(name);
            }
            public java.lang.Class<org.apache.drill.exec.proto.BitControl.FinishedReceiver.Builder> typeClass()
            {
                return org.apache.drill.exec.proto.BitControl.FinishedReceiver.Builder.class;
            }
            public java.lang.String messageName()
            {
                return org.apache.drill.exec.proto.BitControl.FinishedReceiver.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.apache.drill.exec.proto.BitControl.FinishedReceiver.class.getName();
            }
            //unused
            public void writeTo(com.dyuproject.protostuff.Output output, org.apache.drill.exec.proto.BitControl.FinishedReceiver.Builder builder) throws java.io.IOException {}
        }
        public static java.lang.String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "receiver";
                case 2: return "sender";
                default: return null;
            }
        }
        public static int getFieldNumber(java.lang.String name)
        {
            java.lang.Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }
        private static final java.util.HashMap<java.lang.String,java.lang.Integer> fieldMap = new java.util.HashMap<java.lang.String,java.lang.Integer>();
        static
        {
            fieldMap.put("receiver", 1);
            fieldMap.put("sender", 2);
        }
    }

}
