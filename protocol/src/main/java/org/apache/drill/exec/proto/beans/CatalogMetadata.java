/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from protobuf

package org.apache.drill.exec.proto.beans;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class CatalogMetadata implements Externalizable, Message<CatalogMetadata>, Schema<CatalogMetadata>
{

    public static Schema<CatalogMetadata> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static CatalogMetadata getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final CatalogMetadata DEFAULT_INSTANCE = new CatalogMetadata();

    
    private String catalogName;
    private String description;
    private String connect;

    public CatalogMetadata()
    {
        
    }

    // getters and setters

    // catalogName

    public String getCatalogName()
    {
        return catalogName;
    }

    public CatalogMetadata setCatalogName(String catalogName)
    {
        this.catalogName = catalogName;
        return this;
    }

    // description

    public String getDescription()
    {
        return description;
    }

    public CatalogMetadata setDescription(String description)
    {
        this.description = description;
        return this;
    }

    // connect

    public String getConnect()
    {
        return connect;
    }

    public CatalogMetadata setConnect(String connect)
    {
        this.connect = connect;
        return this;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<CatalogMetadata> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public CatalogMetadata newMessage()
    {
        return new CatalogMetadata();
    }

    public Class<CatalogMetadata> typeClass()
    {
        return CatalogMetadata.class;
    }

    public String messageName()
    {
        return CatalogMetadata.class.getSimpleName();
    }

    public String messageFullName()
    {
        return CatalogMetadata.class.getName();
    }

    public boolean isInitialized(CatalogMetadata message)
    {
        return true;
    }

    public void mergeFrom(Input input, CatalogMetadata message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    message.catalogName = input.readString();
                    break;
                case 2:
                    message.description = input.readString();
                    break;
                case 3:
                    message.connect = input.readString();
                    break;
                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, CatalogMetadata message) throws IOException
    {
        if(message.catalogName != null)
            output.writeString(1, message.catalogName, false);

        if(message.description != null)
            output.writeString(2, message.description, false);

        if(message.connect != null)
            output.writeString(3, message.connect, false);
    }

    public String getFieldName(int number)
    {
        switch(number)
        {
            case 1: return "catalogName";
            case 2: return "description";
            case 3: return "connect";
            default: return null;
        }
    }

    public int getFieldNumber(String name)
    {
        final Integer number = __fieldMap.get(name);
        return number == null ? 0 : number.intValue();
    }

    private static final java.util.HashMap<String,Integer> __fieldMap = new java.util.HashMap<String,Integer>();
    static
    {
        __fieldMap.put("catalogName", 1);
        __fieldMap.put("description", 2);
        __fieldMap.put("connect", 3);
    }
    
}
