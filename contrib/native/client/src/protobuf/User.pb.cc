// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: User.proto

#include "User.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_BitControl_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_BitControl_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_PlanFragment;
}  // namespace protobuf_BitControl_2eproto
namespace protobuf_UserBitShared_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_UserBitShared_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_QueryId;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_UserBitShared_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_UserCredentials;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_UserBitShared_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_DrillPBError;
}  // namespace protobuf_UserBitShared_2eproto
namespace protobuf_User_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_User_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CatalogMetadata;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_User_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ColumnMetadata;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_User_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ConvertSupport;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_User_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_LikeFilter;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_User_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PreparedStatementHandle;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_User_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Property;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_User_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ResultColumnMetadata;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_User_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RpcEndpointInfos;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_User_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SchemaMetadata;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_User_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TableMetadata;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_User_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ServerMeta;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_User_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_UserProperties;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_User_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_PreparedStatement;
}  // namespace protobuf_User_2eproto
namespace exec {
namespace user {
class PropertyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Property>
      _instance;
} _Property_default_instance_;
class UserPropertiesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserProperties>
      _instance;
} _UserProperties_default_instance_;
class RpcEndpointInfosDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RpcEndpointInfos>
      _instance;
} _RpcEndpointInfos_default_instance_;
class UserToBitHandshakeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserToBitHandshake>
      _instance;
} _UserToBitHandshake_default_instance_;
class RequestResultsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RequestResults>
      _instance;
} _RequestResults_default_instance_;
class GetQueryPlanFragmentsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetQueryPlanFragments>
      _instance;
} _GetQueryPlanFragments_default_instance_;
class QueryPlanFragmentsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<QueryPlanFragments>
      _instance;
} _QueryPlanFragments_default_instance_;
class BitToUserHandshakeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BitToUserHandshake>
      _instance;
} _BitToUserHandshake_default_instance_;
class LikeFilterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LikeFilter>
      _instance;
} _LikeFilter_default_instance_;
class GetCatalogsReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetCatalogsReq>
      _instance;
} _GetCatalogsReq_default_instance_;
class CatalogMetadataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CatalogMetadata>
      _instance;
} _CatalogMetadata_default_instance_;
class GetCatalogsRespDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetCatalogsResp>
      _instance;
} _GetCatalogsResp_default_instance_;
class GetSchemasReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetSchemasReq>
      _instance;
} _GetSchemasReq_default_instance_;
class SchemaMetadataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SchemaMetadata>
      _instance;
} _SchemaMetadata_default_instance_;
class GetSchemasRespDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetSchemasResp>
      _instance;
} _GetSchemasResp_default_instance_;
class GetTablesReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetTablesReq>
      _instance;
} _GetTablesReq_default_instance_;
class TableMetadataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TableMetadata>
      _instance;
} _TableMetadata_default_instance_;
class GetTablesRespDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetTablesResp>
      _instance;
} _GetTablesResp_default_instance_;
class GetColumnsReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetColumnsReq>
      _instance;
} _GetColumnsReq_default_instance_;
class ColumnMetadataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ColumnMetadata>
      _instance;
} _ColumnMetadata_default_instance_;
class GetColumnsRespDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetColumnsResp>
      _instance;
} _GetColumnsResp_default_instance_;
class CreatePreparedStatementReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CreatePreparedStatementReq>
      _instance;
} _CreatePreparedStatementReq_default_instance_;
class ResultColumnMetadataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResultColumnMetadata>
      _instance;
} _ResultColumnMetadata_default_instance_;
class PreparedStatementHandleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PreparedStatementHandle>
      _instance;
} _PreparedStatementHandle_default_instance_;
class PreparedStatementDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PreparedStatement>
      _instance;
} _PreparedStatement_default_instance_;
class CreatePreparedStatementRespDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CreatePreparedStatementResp>
      _instance;
} _CreatePreparedStatementResp_default_instance_;
class GetServerMetaReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetServerMetaReq>
      _instance;
} _GetServerMetaReq_default_instance_;
class ConvertSupportDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConvertSupport>
      _instance;
} _ConvertSupport_default_instance_;
class GetServerMetaRespDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetServerMetaResp>
      _instance;
} _GetServerMetaResp_default_instance_;
class ServerMetaDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ServerMeta>
      _instance;
} _ServerMeta_default_instance_;
class RunQueryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RunQuery>
      _instance;
} _RunQuery_default_instance_;
}  // namespace user
}  // namespace exec
namespace protobuf_User_2eproto {
static void InitDefaultsProperty() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::exec::user::_Property_default_instance_;
    new (ptr) ::exec::user::Property();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::exec::user::Property::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Property =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsProperty}, {}};

static void InitDefaultsUserProperties() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::exec::user::_UserProperties_default_instance_;
    new (ptr) ::exec::user::UserProperties();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::exec::user::UserProperties::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_UserProperties =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsUserProperties}, {
      &protobuf_User_2eproto::scc_info_Property.base,}};

static void InitDefaultsRpcEndpointInfos() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::exec::user::_RpcEndpointInfos_default_instance_;
    new (ptr) ::exec::user::RpcEndpointInfos();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::exec::user::RpcEndpointInfos::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RpcEndpointInfos =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRpcEndpointInfos}, {}};

static void InitDefaultsUserToBitHandshake() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::exec::user::_UserToBitHandshake_default_instance_;
    new (ptr) ::exec::user::UserToBitHandshake();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::exec::user::UserToBitHandshake::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_UserToBitHandshake =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsUserToBitHandshake}, {
      &protobuf_UserBitShared_2eproto::scc_info_UserCredentials.base,
      &protobuf_User_2eproto::scc_info_UserProperties.base,
      &protobuf_User_2eproto::scc_info_RpcEndpointInfos.base,}};

static void InitDefaultsRequestResults() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::exec::user::_RequestResults_default_instance_;
    new (ptr) ::exec::user::RequestResults();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::exec::user::RequestResults::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RequestResults =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRequestResults}, {
      &protobuf_UserBitShared_2eproto::scc_info_QueryId.base,}};

static void InitDefaultsGetQueryPlanFragments() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::exec::user::_GetQueryPlanFragments_default_instance_;
    new (ptr) ::exec::user::GetQueryPlanFragments();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::exec::user::GetQueryPlanFragments::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetQueryPlanFragments =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetQueryPlanFragments}, {}};

static void InitDefaultsQueryPlanFragments() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::exec::user::_QueryPlanFragments_default_instance_;
    new (ptr) ::exec::user::QueryPlanFragments();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::exec::user::QueryPlanFragments::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_QueryPlanFragments =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsQueryPlanFragments}, {
      &protobuf_UserBitShared_2eproto::scc_info_QueryId.base,
      &protobuf_BitControl_2eproto::scc_info_PlanFragment.base,
      &protobuf_UserBitShared_2eproto::scc_info_DrillPBError.base,}};

static void InitDefaultsBitToUserHandshake() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::exec::user::_BitToUserHandshake_default_instance_;
    new (ptr) ::exec::user::BitToUserHandshake();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::exec::user::BitToUserHandshake::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_BitToUserHandshake =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsBitToUserHandshake}, {
      &protobuf_User_2eproto::scc_info_RpcEndpointInfos.base,}};

static void InitDefaultsLikeFilter() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::exec::user::_LikeFilter_default_instance_;
    new (ptr) ::exec::user::LikeFilter();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::exec::user::LikeFilter::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LikeFilter =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLikeFilter}, {}};

static void InitDefaultsGetCatalogsReq() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::exec::user::_GetCatalogsReq_default_instance_;
    new (ptr) ::exec::user::GetCatalogsReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::exec::user::GetCatalogsReq::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetCatalogsReq =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetCatalogsReq}, {
      &protobuf_User_2eproto::scc_info_LikeFilter.base,}};

static void InitDefaultsCatalogMetadata() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::exec::user::_CatalogMetadata_default_instance_;
    new (ptr) ::exec::user::CatalogMetadata();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::exec::user::CatalogMetadata::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CatalogMetadata =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCatalogMetadata}, {}};

static void InitDefaultsGetCatalogsResp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::exec::user::_GetCatalogsResp_default_instance_;
    new (ptr) ::exec::user::GetCatalogsResp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::exec::user::GetCatalogsResp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_GetCatalogsResp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsGetCatalogsResp}, {
      &protobuf_User_2eproto::scc_info_CatalogMetadata.base,
      &protobuf_UserBitShared_2eproto::scc_info_DrillPBError.base,}};

static void InitDefaultsGetSchemasReq() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::exec::user::_GetSchemasReq_default_instance_;
    new (ptr) ::exec::user::GetSchemasReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::exec::user::GetSchemasReq::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetSchemasReq =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetSchemasReq}, {
      &protobuf_User_2eproto::scc_info_LikeFilter.base,}};

static void InitDefaultsSchemaMetadata() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::exec::user::_SchemaMetadata_default_instance_;
    new (ptr) ::exec::user::SchemaMetadata();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::exec::user::SchemaMetadata::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SchemaMetadata =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSchemaMetadata}, {}};

static void InitDefaultsGetSchemasResp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::exec::user::_GetSchemasResp_default_instance_;
    new (ptr) ::exec::user::GetSchemasResp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::exec::user::GetSchemasResp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_GetSchemasResp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsGetSchemasResp}, {
      &protobuf_User_2eproto::scc_info_SchemaMetadata.base,
      &protobuf_UserBitShared_2eproto::scc_info_DrillPBError.base,}};

static void InitDefaultsGetTablesReq() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::exec::user::_GetTablesReq_default_instance_;
    new (ptr) ::exec::user::GetTablesReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::exec::user::GetTablesReq::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetTablesReq =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetTablesReq}, {
      &protobuf_User_2eproto::scc_info_LikeFilter.base,}};

static void InitDefaultsTableMetadata() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::exec::user::_TableMetadata_default_instance_;
    new (ptr) ::exec::user::TableMetadata();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::exec::user::TableMetadata::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TableMetadata =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTableMetadata}, {}};

static void InitDefaultsGetTablesResp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::exec::user::_GetTablesResp_default_instance_;
    new (ptr) ::exec::user::GetTablesResp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::exec::user::GetTablesResp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_GetTablesResp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsGetTablesResp}, {
      &protobuf_User_2eproto::scc_info_TableMetadata.base,
      &protobuf_UserBitShared_2eproto::scc_info_DrillPBError.base,}};

static void InitDefaultsGetColumnsReq() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::exec::user::_GetColumnsReq_default_instance_;
    new (ptr) ::exec::user::GetColumnsReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::exec::user::GetColumnsReq::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetColumnsReq =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetColumnsReq}, {
      &protobuf_User_2eproto::scc_info_LikeFilter.base,}};

static void InitDefaultsColumnMetadata() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::exec::user::_ColumnMetadata_default_instance_;
    new (ptr) ::exec::user::ColumnMetadata();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::exec::user::ColumnMetadata::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ColumnMetadata =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsColumnMetadata}, {}};

static void InitDefaultsGetColumnsResp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::exec::user::_GetColumnsResp_default_instance_;
    new (ptr) ::exec::user::GetColumnsResp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::exec::user::GetColumnsResp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_GetColumnsResp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsGetColumnsResp}, {
      &protobuf_User_2eproto::scc_info_ColumnMetadata.base,
      &protobuf_UserBitShared_2eproto::scc_info_DrillPBError.base,}};

static void InitDefaultsCreatePreparedStatementReq() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::exec::user::_CreatePreparedStatementReq_default_instance_;
    new (ptr) ::exec::user::CreatePreparedStatementReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::exec::user::CreatePreparedStatementReq::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CreatePreparedStatementReq =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCreatePreparedStatementReq}, {}};

static void InitDefaultsResultColumnMetadata() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::exec::user::_ResultColumnMetadata_default_instance_;
    new (ptr) ::exec::user::ResultColumnMetadata();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::exec::user::ResultColumnMetadata::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ResultColumnMetadata =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsResultColumnMetadata}, {}};

static void InitDefaultsPreparedStatementHandle() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::exec::user::_PreparedStatementHandle_default_instance_;
    new (ptr) ::exec::user::PreparedStatementHandle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::exec::user::PreparedStatementHandle::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PreparedStatementHandle =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPreparedStatementHandle}, {}};

static void InitDefaultsPreparedStatement() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::exec::user::_PreparedStatement_default_instance_;
    new (ptr) ::exec::user::PreparedStatement();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::exec::user::PreparedStatement::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_PreparedStatement =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsPreparedStatement}, {
      &protobuf_User_2eproto::scc_info_ResultColumnMetadata.base,
      &protobuf_User_2eproto::scc_info_PreparedStatementHandle.base,}};

static void InitDefaultsCreatePreparedStatementResp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::exec::user::_CreatePreparedStatementResp_default_instance_;
    new (ptr) ::exec::user::CreatePreparedStatementResp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::exec::user::CreatePreparedStatementResp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CreatePreparedStatementResp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCreatePreparedStatementResp}, {
      &protobuf_User_2eproto::scc_info_PreparedStatement.base,
      &protobuf_UserBitShared_2eproto::scc_info_DrillPBError.base,}};

static void InitDefaultsGetServerMetaReq() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::exec::user::_GetServerMetaReq_default_instance_;
    new (ptr) ::exec::user::GetServerMetaReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::exec::user::GetServerMetaReq::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetServerMetaReq =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetServerMetaReq}, {}};

static void InitDefaultsConvertSupport() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::exec::user::_ConvertSupport_default_instance_;
    new (ptr) ::exec::user::ConvertSupport();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::exec::user::ConvertSupport::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConvertSupport =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConvertSupport}, {}};

static void InitDefaultsGetServerMetaResp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::exec::user::_GetServerMetaResp_default_instance_;
    new (ptr) ::exec::user::GetServerMetaResp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::exec::user::GetServerMetaResp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_GetServerMetaResp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsGetServerMetaResp}, {
      &protobuf_User_2eproto::scc_info_ServerMeta.base,
      &protobuf_UserBitShared_2eproto::scc_info_DrillPBError.base,}};

static void InitDefaultsServerMeta() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::exec::user::_ServerMeta_default_instance_;
    new (ptr) ::exec::user::ServerMeta();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::exec::user::ServerMeta::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ServerMeta =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsServerMeta}, {
      &protobuf_User_2eproto::scc_info_ConvertSupport.base,}};

static void InitDefaultsRunQuery() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::exec::user::_RunQuery_default_instance_;
    new (ptr) ::exec::user::RunQuery();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::exec::user::RunQuery::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_RunQuery =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsRunQuery}, {
      &protobuf_BitControl_2eproto::scc_info_PlanFragment.base,
      &protobuf_User_2eproto::scc_info_PreparedStatementHandle.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Property.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserProperties.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RpcEndpointInfos.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserToBitHandshake.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RequestResults.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetQueryPlanFragments.base);
  ::google::protobuf::internal::InitSCC(&scc_info_QueryPlanFragments.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BitToUserHandshake.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LikeFilter.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetCatalogsReq.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CatalogMetadata.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetCatalogsResp.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetSchemasReq.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SchemaMetadata.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetSchemasResp.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetTablesReq.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TableMetadata.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetTablesResp.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetColumnsReq.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ColumnMetadata.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetColumnsResp.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CreatePreparedStatementReq.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ResultColumnMetadata.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PreparedStatementHandle.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PreparedStatement.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CreatePreparedStatementResp.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetServerMetaReq.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConvertSupport.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetServerMetaResp.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ServerMeta.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RunQuery.base);
}

::google::protobuf::Metadata file_level_metadata[31];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[17];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::Property, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::Property, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::Property, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::Property, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::UserProperties, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::UserProperties, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::UserProperties, properties_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::RpcEndpointInfos, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::RpcEndpointInfos, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::RpcEndpointInfos, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::RpcEndpointInfos, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::RpcEndpointInfos, majorversion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::RpcEndpointInfos, minorversion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::RpcEndpointInfos, patchversion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::RpcEndpointInfos, application_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::RpcEndpointInfos, buildnumber_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::RpcEndpointInfos, versionqualifier_),
  0,
  1,
  4,
  5,
  6,
  2,
  7,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::UserToBitHandshake, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::UserToBitHandshake, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::UserToBitHandshake, channel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::UserToBitHandshake, support_listening_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::UserToBitHandshake, rpc_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::UserToBitHandshake, credentials_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::UserToBitHandshake, properties_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::UserToBitHandshake, support_complex_types_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::UserToBitHandshake, support_timeout_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::UserToBitHandshake, client_infos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::UserToBitHandshake, sasl_support_),
  8,
  4,
  3,
  0,
  1,
  5,
  6,
  2,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::RequestResults, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::RequestResults, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::RequestResults, query_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::RequestResults, maximum_responses_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::GetQueryPlanFragments, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::GetQueryPlanFragments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::GetQueryPlanFragments, query_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::GetQueryPlanFragments, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::GetQueryPlanFragments, split_plan_),
  0,
  2,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::QueryPlanFragments, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::QueryPlanFragments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::QueryPlanFragments, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::QueryPlanFragments, query_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::QueryPlanFragments, fragments_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::QueryPlanFragments, error_),
  2,
  0,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::BitToUserHandshake, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::BitToUserHandshake, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::BitToUserHandshake, rpc_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::BitToUserHandshake, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::BitToUserHandshake, errorid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::BitToUserHandshake, errormessage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::BitToUserHandshake, server_infos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::BitToUserHandshake, authenticationmechanisms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::BitToUserHandshake, supported_methods_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::BitToUserHandshake, encrypted_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::BitToUserHandshake, maxwrappedsize_),
  3,
  6,
  0,
  1,
  2,
  ~0u,
  ~0u,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::LikeFilter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::LikeFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::LikeFilter, pattern_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::LikeFilter, escape_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::GetCatalogsReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::GetCatalogsReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::GetCatalogsReq, catalog_name_filter_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::CatalogMetadata, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::CatalogMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::CatalogMetadata, catalog_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::CatalogMetadata, description_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::CatalogMetadata, connect_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::GetCatalogsResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::GetCatalogsResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::GetCatalogsResp, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::GetCatalogsResp, catalogs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::GetCatalogsResp, error_),
  1,
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::GetSchemasReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::GetSchemasReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::GetSchemasReq, catalog_name_filter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::GetSchemasReq, schema_name_filter_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::SchemaMetadata, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::SchemaMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::SchemaMetadata, catalog_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::SchemaMetadata, schema_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::SchemaMetadata, owner_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::SchemaMetadata, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::SchemaMetadata, mutable__),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::GetSchemasResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::GetSchemasResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::GetSchemasResp, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::GetSchemasResp, schemas_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::GetSchemasResp, error_),
  1,
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::GetTablesReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::GetTablesReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::GetTablesReq, catalog_name_filter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::GetTablesReq, schema_name_filter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::GetTablesReq, table_name_filter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::GetTablesReq, table_type_filter_),
  0,
  1,
  2,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::TableMetadata, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::TableMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::TableMetadata, catalog_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::TableMetadata, schema_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::TableMetadata, table_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::TableMetadata, type_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::GetTablesResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::GetTablesResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::GetTablesResp, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::GetTablesResp, tables_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::GetTablesResp, error_),
  1,
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::GetColumnsReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::GetColumnsReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::GetColumnsReq, catalog_name_filter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::GetColumnsReq, schema_name_filter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::GetColumnsReq, table_name_filter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::GetColumnsReq, column_name_filter_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::ColumnMetadata, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::ColumnMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::ColumnMetadata, catalog_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::ColumnMetadata, schema_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::ColumnMetadata, table_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::ColumnMetadata, column_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::ColumnMetadata, ordinal_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::ColumnMetadata, default_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::ColumnMetadata, is_nullable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::ColumnMetadata, data_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::ColumnMetadata, char_max_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::ColumnMetadata, char_octet_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::ColumnMetadata, numeric_precision_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::ColumnMetadata, numeric_precision_radix_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::ColumnMetadata, numeric_scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::ColumnMetadata, date_time_precision_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::ColumnMetadata, interval_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::ColumnMetadata, interval_precision_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::ColumnMetadata, column_size_),
  0,
  1,
  2,
  3,
  7,
  4,
  8,
  5,
  9,
  10,
  11,
  12,
  13,
  14,
  6,
  15,
  16,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::GetColumnsResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::GetColumnsResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::GetColumnsResp, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::GetColumnsResp, columns_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::GetColumnsResp, error_),
  1,
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::CreatePreparedStatementReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::CreatePreparedStatementReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::CreatePreparedStatementReq, sql_query_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::ResultColumnMetadata, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::ResultColumnMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::ResultColumnMetadata, catalog_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::ResultColumnMetadata, schema_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::ResultColumnMetadata, table_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::ResultColumnMetadata, column_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::ResultColumnMetadata, label_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::ResultColumnMetadata, data_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::ResultColumnMetadata, is_nullable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::ResultColumnMetadata, precision_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::ResultColumnMetadata, scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::ResultColumnMetadata, signed__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::ResultColumnMetadata, display_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::ResultColumnMetadata, is_aliased_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::ResultColumnMetadata, searchability_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::ResultColumnMetadata, updatability_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::ResultColumnMetadata, auto_increment_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::ResultColumnMetadata, case_sensitivity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::ResultColumnMetadata, sortable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::ResultColumnMetadata, class_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::ResultColumnMetadata, is_currency_),
  0,
  1,
  2,
  3,
  4,
  5,
  10,
  7,
  8,
  11,
  9,
  12,
  14,
  15,
  13,
  16,
  17,
  6,
  18,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::PreparedStatementHandle, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::PreparedStatementHandle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::PreparedStatementHandle, server_info_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::PreparedStatement, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::PreparedStatement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::PreparedStatement, columns_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::PreparedStatement, server_handle_),
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::CreatePreparedStatementResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::CreatePreparedStatementResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::CreatePreparedStatementResp, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::CreatePreparedStatementResp, prepared_statement_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::CreatePreparedStatementResp, error_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::GetServerMetaReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::GetServerMetaReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::ConvertSupport, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::ConvertSupport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::ConvertSupport, from_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::ConvertSupport, to_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::GetServerMetaResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::GetServerMetaResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::GetServerMetaResp, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::GetServerMetaResp, server_meta_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::GetServerMetaResp, error_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::ServerMeta, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::ServerMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::ServerMeta, all_tables_selectable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::ServerMeta, blob_included_in_max_row_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::ServerMeta, catalog_at_start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::ServerMeta, catalog_separator_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::ServerMeta, catalog_term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::ServerMeta, collate_support_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::ServerMeta, column_aliasing_supported_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::ServerMeta, convert_support_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::ServerMeta, correlation_names_support_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::ServerMeta, date_time_functions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::ServerMeta, date_time_literals_support_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::ServerMeta, group_by_support_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::ServerMeta, identifier_casing_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::ServerMeta, identifier_quote_string_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::ServerMeta, like_escape_clause_supported_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::ServerMeta, max_binary_literal_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::ServerMeta, max_catalog_name_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::ServerMeta, max_char_literal_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::ServerMeta, max_column_name_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::ServerMeta, max_columns_in_group_by_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::ServerMeta, max_columns_in_order_by_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::ServerMeta, max_columns_in_select_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::ServerMeta, max_cursor_name_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::ServerMeta, max_logical_lob_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::ServerMeta, max_row_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::ServerMeta, max_schema_name_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::ServerMeta, max_statement_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::ServerMeta, max_statements_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::ServerMeta, max_table_name_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::ServerMeta, max_tables_in_select_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::ServerMeta, max_user_name_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::ServerMeta, null_collation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::ServerMeta, null_plus_non_null_equals_null_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::ServerMeta, numeric_functions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::ServerMeta, order_by_support_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::ServerMeta, outer_join_support_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::ServerMeta, quoted_identifier_casing_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::ServerMeta, read_only_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::ServerMeta, schema_term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::ServerMeta, search_escape_string_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::ServerMeta, select_for_update_supported_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::ServerMeta, special_characters_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::ServerMeta, sql_keywords_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::ServerMeta, string_functions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::ServerMeta, subquery_support_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::ServerMeta, system_functions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::ServerMeta, table_term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::ServerMeta, transaction_supported_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::ServerMeta, union_support_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::ServerMeta, current_schema_),
  8,
  9,
  10,
  0,
  1,
  ~0u,
  11,
  ~0u,
  36,
  ~0u,
  ~0u,
  37,
  12,
  2,
  29,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  33,
  30,
  ~0u,
  ~0u,
  ~0u,
  34,
  31,
  3,
  4,
  32,
  5,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  6,
  35,
  ~0u,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::RunQuery, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::RunQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::RunQuery, results_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::RunQuery, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::RunQuery, plan_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::RunQuery, fragments_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::RunQuery, prepared_statement_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::user::RunQuery, autolimit_rowcount_),
  3,
  4,
  0,
  ~0u,
  1,
  2,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::exec::user::Property)},
  { 9, 15, sizeof(::exec::user::UserProperties)},
  { 16, 29, sizeof(::exec::user::RpcEndpointInfos)},
  { 37, 51, sizeof(::exec::user::UserToBitHandshake)},
  { 60, 67, sizeof(::exec::user::RequestResults)},
  { 69, 77, sizeof(::exec::user::GetQueryPlanFragments)},
  { 80, 89, sizeof(::exec::user::QueryPlanFragments)},
  { 93, 107, sizeof(::exec::user::BitToUserHandshake)},
  { 116, 123, sizeof(::exec::user::LikeFilter)},
  { 125, 131, sizeof(::exec::user::GetCatalogsReq)},
  { 132, 140, sizeof(::exec::user::CatalogMetadata)},
  { 143, 151, sizeof(::exec::user::GetCatalogsResp)},
  { 154, 161, sizeof(::exec::user::GetSchemasReq)},
  { 163, 173, sizeof(::exec::user::SchemaMetadata)},
  { 178, 186, sizeof(::exec::user::GetSchemasResp)},
  { 189, 198, sizeof(::exec::user::GetTablesReq)},
  { 202, 211, sizeof(::exec::user::TableMetadata)},
  { 215, 223, sizeof(::exec::user::GetTablesResp)},
  { 226, 235, sizeof(::exec::user::GetColumnsReq)},
  { 239, 261, sizeof(::exec::user::ColumnMetadata)},
  { 278, 286, sizeof(::exec::user::GetColumnsResp)},
  { 289, 295, sizeof(::exec::user::CreatePreparedStatementReq)},
  { 296, 320, sizeof(::exec::user::ResultColumnMetadata)},
  { 339, 345, sizeof(::exec::user::PreparedStatementHandle)},
  { 346, 353, sizeof(::exec::user::PreparedStatement)},
  { 355, 363, sizeof(::exec::user::CreatePreparedStatementResp)},
  { 366, 371, sizeof(::exec::user::GetServerMetaReq)},
  { 371, 378, sizeof(::exec::user::ConvertSupport)},
  { 380, 388, sizeof(::exec::user::GetServerMetaResp)},
  { 391, 446, sizeof(::exec::user::ServerMeta)},
  { 496, 507, sizeof(::exec::user::RunQuery)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::exec::user::_Property_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::exec::user::_UserProperties_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::exec::user::_RpcEndpointInfos_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::exec::user::_UserToBitHandshake_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::exec::user::_RequestResults_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::exec::user::_GetQueryPlanFragments_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::exec::user::_QueryPlanFragments_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::exec::user::_BitToUserHandshake_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::exec::user::_LikeFilter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::exec::user::_GetCatalogsReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::exec::user::_CatalogMetadata_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::exec::user::_GetCatalogsResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::exec::user::_GetSchemasReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::exec::user::_SchemaMetadata_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::exec::user::_GetSchemasResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::exec::user::_GetTablesReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::exec::user::_TableMetadata_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::exec::user::_GetTablesResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::exec::user::_GetColumnsReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::exec::user::_ColumnMetadata_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::exec::user::_GetColumnsResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::exec::user::_CreatePreparedStatementReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::exec::user::_ResultColumnMetadata_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::exec::user::_PreparedStatementHandle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::exec::user::_PreparedStatement_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::exec::user::_CreatePreparedStatementResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::exec::user::_GetServerMetaReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::exec::user::_ConvertSupport_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::exec::user::_GetServerMetaResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::exec::user::_ServerMeta_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::exec::user::_RunQuery_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "User.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 31);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\nUser.proto\022\texec.user\032\017SchemaDef.proto"
      "\032\013Types.proto\032\023UserBitShared.proto\032\rBitD"
      "ata.proto\032\020BitControl.proto\032\025ExecutionPr"
      "otos.proto\"&\n\010Property\022\013\n\003key\030\001 \002(\t\022\r\n\005v"
      "alue\030\002 \002(\t\"9\n\016UserProperties\022\'\n\nproperti"
      "es\030\001 \003(\0132\023.exec.user.Property\"\267\001\n\020RpcEnd"
      "pointInfos\022\014\n\004name\030\001 \001(\t\022\017\n\007version\030\002 \001("
      "\t\022\024\n\014majorVersion\030\003 \001(\r\022\024\n\014minorVersion\030"
      "\004 \001(\r\022\024\n\014patchVersion\030\005 \001(\r\022\023\n\013applicati"
      "on\030\006 \001(\t\022\023\n\013buildNumber\030\007 \001(\r\022\030\n\020version"
      "Qualifier\030\010 \001(\t\"\375\002\n\022UserToBitHandshake\022."
      "\n\007channel\030\001 \001(\0162\027.exec.shared.RpcChannel"
      ":\004USER\022\031\n\021support_listening\030\002 \001(\010\022\023\n\013rpc"
      "_version\030\003 \001(\005\0221\n\013credentials\030\004 \001(\0132\034.ex"
      "ec.shared.UserCredentials\022-\n\nproperties\030"
      "\005 \001(\0132\031.exec.user.UserProperties\022$\n\025supp"
      "ort_complex_types\030\006 \001(\010:\005false\022\036\n\017suppor"
      "t_timeout\030\007 \001(\010:\005false\0221\n\014client_infos\030\010"
      " \001(\0132\033.exec.user.RpcEndpointInfos\022,\n\014sas"
      "l_support\030\t \001(\0162\026.exec.user.SaslSupport\""
      "S\n\016RequestResults\022&\n\010query_id\030\001 \001(\0132\024.ex"
      "ec.shared.QueryId\022\031\n\021maximum_responses\030\002"
      " \001(\005\"g\n\025GetQueryPlanFragments\022\r\n\005query\030\001"
      " \002(\t\022$\n\004type\030\002 \001(\0162\026.exec.shared.QueryTy"
      "pe\022\031\n\nsplit_plan\030\003 \001(\010:\005false\"\316\001\n\022QueryP"
      "lanFragments\0223\n\006status\030\001 \002(\0162#.exec.shar"
      "ed.QueryResult.QueryState\022&\n\010query_id\030\002 "
      "\001(\0132\024.exec.shared.QueryId\0221\n\tfragments\030\003"
      " \003(\0132\036.exec.bit.control.PlanFragment\022(\n\005"
      "error\030\004 \001(\0132\031.exec.shared.DrillPBError\"\253"
      "\002\n\022BitToUserHandshake\022\023\n\013rpc_version\030\002 \001"
      "(\005\022*\n\006status\030\003 \001(\0162\032.exec.user.Handshake"
      "Status\022\017\n\007errorId\030\004 \001(\t\022\024\n\014errorMessage\030"
      "\005 \001(\t\0221\n\014server_infos\030\006 \001(\0132\033.exec.user."
      "RpcEndpointInfos\022 \n\030authenticationMechan"
      "isms\030\007 \003(\t\022-\n\021supported_methods\030\010 \003(\0162\022."
      "exec.user.RpcType\022\021\n\tencrypted\030\t \001(\010\022\026\n\016"
      "maxWrappedSize\030\n \001(\005\"-\n\nLikeFilter\022\017\n\007pa"
      "ttern\030\001 \001(\t\022\016\n\006escape\030\002 \001(\t\"D\n\016GetCatalo"
      "gsReq\0222\n\023catalog_name_filter\030\001 \001(\0132\025.exe"
      "c.user.LikeFilter\"M\n\017CatalogMetadata\022\024\n\014"
      "catalog_name\030\001 \001(\t\022\023\n\013description\030\002 \001(\t\022"
      "\017\n\007connect\030\003 \001(\t\"\223\001\n\017GetCatalogsResp\022(\n\006"
      "status\030\001 \001(\0162\030.exec.user.RequestStatus\022,"
      "\n\010catalogs\030\002 \003(\0132\032.exec.user.CatalogMeta"
      "data\022(\n\005error\030\003 \001(\0132\031.exec.shared.DrillP"
      "BError\"v\n\rGetSchemasReq\0222\n\023catalog_name_"
      "filter\030\001 \001(\0132\025.exec.user.LikeFilter\0221\n\022s"
      "chema_name_filter\030\002 \001(\0132\025.exec.user.Like"
      "Filter\"i\n\016SchemaMetadata\022\024\n\014catalog_name"
      "\030\001 \001(\t\022\023\n\013schema_name\030\002 \001(\t\022\r\n\005owner\030\003 \001"
      "(\t\022\014\n\004type\030\004 \001(\t\022\017\n\007mutable\030\005 \001(\t\"\220\001\n\016Ge"
      "tSchemasResp\022(\n\006status\030\001 \001(\0162\030.exec.user"
      ".RequestStatus\022*\n\007schemas\030\002 \003(\0132\031.exec.u"
      "ser.SchemaMetadata\022(\n\005error\030\003 \001(\0132\031.exec"
      ".shared.DrillPBError\"\302\001\n\014GetTablesReq\0222\n"
      "\023catalog_name_filter\030\001 \001(\0132\025.exec.user.L"
      "ikeFilter\0221\n\022schema_name_filter\030\002 \001(\0132\025."
      "exec.user.LikeFilter\0220\n\021table_name_filte"
      "r\030\003 \001(\0132\025.exec.user.LikeFilter\022\031\n\021table_"
      "type_filter\030\004 \003(\t\"\\\n\rTableMetadata\022\024\n\014ca"
      "talog_name\030\001 \001(\t\022\023\n\013schema_name\030\002 \001(\t\022\022\n"
      "\ntable_name\030\003 \001(\t\022\014\n\004type\030\004 \001(\t\"\215\001\n\rGetT"
      "ablesResp\022(\n\006status\030\001 \001(\0162\030.exec.user.Re"
      "questStatus\022(\n\006tables\030\002 \003(\0132\030.exec.user."
      "TableMetadata\022(\n\005error\030\003 \001(\0132\031.exec.shar"
      "ed.DrillPBError\"\333\001\n\rGetColumnsReq\0222\n\023cat"
      "alog_name_filter\030\001 \001(\0132\025.exec.user.LikeF"
      "ilter\0221\n\022schema_name_filter\030\002 \001(\0132\025.exec"
      ".user.LikeFilter\0220\n\021table_name_filter\030\003 "
      "\001(\0132\025.exec.user.LikeFilter\0221\n\022column_nam"
      "e_filter\030\004 \001(\0132\025.exec.user.LikeFilter\"\251\003"
      "\n\016ColumnMetadata\022\024\n\014catalog_name\030\001 \001(\t\022\023"
      "\n\013schema_name\030\002 \001(\t\022\022\n\ntable_name\030\003 \001(\t\022"
      "\023\n\013column_name\030\004 \001(\t\022\030\n\020ordinal_position"
      "\030\005 \001(\005\022\025\n\rdefault_value\030\006 \001(\t\022\023\n\013is_null"
      "able\030\007 \001(\010\022\021\n\tdata_type\030\010 \001(\t\022\027\n\017char_ma"
      "x_length\030\t \001(\005\022\031\n\021char_octet_length\030\n \001("
      "\005\022\031\n\021numeric_precision\030\013 \001(\005\022\037\n\027numeric_"
      "precision_radix\030\014 \001(\005\022\025\n\rnumeric_scale\030\r"
      " \001(\005\022\033\n\023date_time_precision\030\016 \001(\005\022\025\n\rint"
      "erval_type\030\017 \001(\t\022\032\n\022interval_precision\030\020"
      " \001(\005\022\023\n\013column_size\030\021 \001(\005\"\220\001\n\016GetColumns"
      "Resp\022(\n\006status\030\001 \001(\0162\030.exec.user.Request"
      "Status\022*\n\007columns\030\002 \003(\0132\031.exec.user.Colu"
      "mnMetadata\022(\n\005error\030\003 \001(\0132\031.exec.shared."
      "DrillPBError\"/\n\032CreatePreparedStatementR"
      "eq\022\021\n\tsql_query\030\001 \001(\t\"\326\003\n\024ResultColumnMe"
      "tadata\022\024\n\014catalog_name\030\001 \001(\t\022\023\n\013schema_n"
      "ame\030\002 \001(\t\022\022\n\ntable_name\030\003 \001(\t\022\023\n\013column_"
      "name\030\004 \001(\t\022\r\n\005label\030\005 \001(\t\022\021\n\tdata_type\030\006"
      " \001(\t\022\023\n\013is_nullable\030\007 \001(\010\022\021\n\tprecision\030\010"
      " \001(\005\022\r\n\005scale\030\t \001(\005\022\016\n\006signed\030\n \001(\010\022\024\n\014d"
      "isplay_size\030\013 \001(\005\022\022\n\nis_aliased\030\014 \001(\010\0225\n"
      "\rsearchability\030\r \001(\0162\036.exec.user.ColumnS"
      "earchability\0223\n\014updatability\030\016 \001(\0162\035.exe"
      "c.user.ColumnUpdatability\022\026\n\016auto_increm"
      "ent\030\017 \001(\010\022\030\n\020case_sensitivity\030\020 \001(\010\022\020\n\010s"
      "ortable\030\021 \001(\010\022\022\n\nclass_name\030\022 \001(\t\022\023\n\013is_"
      "currency\030\024 \001(\010\".\n\027PreparedStatementHandl"
      "e\022\023\n\013server_info\030\001 \001(\014\"\200\001\n\021PreparedState"
      "ment\0220\n\007columns\030\001 \003(\0132\037.exec.user.Result"
      "ColumnMetadata\0229\n\rserver_handle\030\002 \001(\0132\"."
      "exec.user.PreparedStatementHandle\"\253\001\n\033Cr"
      "eatePreparedStatementResp\022(\n\006status\030\001 \001("
      "\0162\030.exec.user.RequestStatus\0228\n\022prepared_"
      "statement\030\002 \001(\0132\034.exec.user.PreparedStat"
      "ement\022(\n\005error\030\003 \001(\0132\031.exec.shared.Drill"
      "PBError\"\022\n\020GetServerMetaReq\"P\n\016ConvertSu"
      "pport\022\037\n\004from\030\001 \002(\0162\021.common.MinorType\022\035"
      "\n\002to\030\002 \002(\0162\021.common.MinorType\"\223\001\n\021GetSer"
      "verMetaResp\022(\n\006status\030\001 \001(\0162\030.exec.user."
      "RequestStatus\022*\n\013server_meta\030\002 \001(\0132\025.exe"
      "c.user.ServerMeta\022(\n\005error\030\003 \001(\0132\031.exec."
      "shared.DrillPBError\"\227\016\n\nServerMeta\022\035\n\025al"
      "l_tables_selectable\030\001 \001(\010\022%\n\035blob_includ"
      "ed_in_max_row_size\030\002 \001(\010\022\030\n\020catalog_at_s"
      "tart\030\003 \001(\010\022\031\n\021catalog_separator\030\004 \001(\t\022\024\n"
      "\014catalog_term\030\005 \001(\t\0222\n\017collate_support\030\006"
      " \003(\0162\031.exec.user.CollateSupport\022!\n\031colum"
      "n_aliasing_supported\030\007 \001(\010\0222\n\017convert_su"
      "pport\030\010 \003(\0132\031.exec.user.ConvertSupport\022E"
      "\n\031correlation_names_support\030\t \001(\0162\".exec"
      ".user.CorrelationNamesSupport\022\033\n\023date_ti"
      "me_functions\030\n \003(\t\022F\n\032date_time_literals"
      "_support\030\013 \003(\0162\".exec.user.DateTimeLiter"
      "alsSupport\0223\n\020group_by_support\030\014 \001(\0162\031.e"
      "xec.user.GroupBySupport\0226\n\021identifier_ca"
      "sing\030\r \001(\0162\033.exec.user.IdentifierCasing\022"
      "\037\n\027identifier_quote_string\030\016 \001(\t\022$\n\034like"
      "_escape_clause_supported\030\017 \001(\010\022!\n\031max_bi"
      "nary_literal_length\030\020 \001(\r\022\037\n\027max_catalog"
      "_name_length\030\021 \001(\r\022\037\n\027max_char_literal_l"
      "ength\030\022 \001(\r\022\036\n\026max_column_name_length\030\023 "
      "\001(\r\022\037\n\027max_columns_in_group_by\030\024 \001(\r\022\037\n\027"
      "max_columns_in_order_by\030\025 \001(\r\022\035\n\025max_col"
      "umns_in_select\030\026 \001(\r\022\036\n\026max_cursor_name_"
      "length\030\027 \001(\r\022\034\n\024max_logical_lob_size\030\030 \001"
      "(\r\022\024\n\014max_row_size\030\031 \001(\r\022\036\n\026max_schema_n"
      "ame_length\030\032 \001(\r\022\034\n\024max_statement_length"
      "\030\033 \001(\r\022\026\n\016max_statements\030\034 \001(\r\022\035\n\025max_ta"
      "ble_name_length\030\035 \001(\r\022\034\n\024max_tables_in_s"
      "elect\030\036 \001(\r\022\034\n\024max_user_name_length\030\037 \001("
      "\r\0220\n\016null_collation\030  \001(\0162\030.exec.user.Nu"
      "llCollation\022&\n\036null_plus_non_null_equals"
      "_null\030! \001(\010\022\031\n\021numeric_functions\030\" \003(\t\0223"
      "\n\020order_by_support\030# \003(\0162\031.exec.user.Ord"
      "erBySupport\0227\n\022outer_join_support\030$ \003(\0162"
      "\033.exec.user.OuterJoinSupport\022=\n\030quoted_i"
      "dentifier_casing\030% \001(\0162\033.exec.user.Ident"
      "ifierCasing\022\021\n\tread_only\030& \001(\010\022\023\n\013schema"
      "_term\030\' \001(\t\022\034\n\024search_escape_string\030( \001("
      "\t\022#\n\033select_for_update_supported\030) \001(\010\022\032"
      "\n\022special_characters\030* \001(\t\022\024\n\014sql_keywor"
      "ds\030+ \003(\t\022\030\n\020string_functions\030, \003(\t\0224\n\020su"
      "bquery_support\030- \003(\0162\032.exec.user.SubQuer"
      "ySupport\022\030\n\020system_functions\030. \003(\t\022\022\n\nta"
      "ble_term\030/ \001(\t\022\035\n\025transaction_supported\030"
      "0 \001(\010\022.\n\runion_support\0301 \003(\0162\027.exec.user"
      ".UnionSupport\022\026\n\016current_schema\0302 \001(\t\"\207\002"
      "\n\010RunQuery\0221\n\014results_mode\030\001 \001(\0162\033.exec."
      "user.QueryResultsMode\022$\n\004type\030\002 \001(\0162\026.ex"
      "ec.shared.QueryType\022\014\n\004plan\030\003 \001(\t\0221\n\tfra"
      "gments\030\004 \003(\0132\036.exec.bit.control.PlanFrag"
      "ment\022E\n\031prepared_statement_handle\030\005 \001(\0132"
      "\".exec.user.PreparedStatementHandle\022\032\n\022a"
      "utolimit_rowcount\030\006 \001(\005*\320\003\n\007RpcType\022\r\n\tH"
      "ANDSHAKE\020\000\022\007\n\003ACK\020\001\022\013\n\007GOODBYE\020\002\022\r\n\tRUN_"
      "QUERY\020\003\022\020\n\014CANCEL_QUERY\020\004\022\023\n\017REQUEST_RES"
      "ULTS\020\005\022\027\n\023RESUME_PAUSED_QUERY\020\013\022\034\n\030GET_Q"
      "UERY_PLAN_FRAGMENTS\020\014\022\020\n\014GET_CATALOGS\020\016\022"
      "\017\n\013GET_SCHEMAS\020\017\022\016\n\nGET_TABLES\020\020\022\017\n\013GET_"
      "COLUMNS\020\021\022\035\n\031CREATE_PREPARED_STATEMENT\020\026"
      "\022\023\n\017GET_SERVER_META\020\010\022\016\n\nQUERY_DATA\020\006\022\020\n"
      "\014QUERY_HANDLE\020\007\022\030\n\024QUERY_PLAN_FRAGMENTS\020"
      "\r\022\014\n\010CATALOGS\020\022\022\013\n\007SCHEMAS\020\023\022\n\n\006TABLES\020\024"
      "\022\013\n\007COLUMNS\020\025\022\026\n\022PREPARED_STATEMENT\020\027\022\017\n"
      "\013SERVER_META\020\t\022\020\n\014QUERY_RESULT\020\n\022\020\n\014SASL"
      "_MESSAGE\020\030*H\n\013SaslSupport\022\030\n\024UNKNOWN_SAS"
      "L_SUPPORT\020\000\022\r\n\tSASL_AUTH\020\001\022\020\n\014SASL_PRIVA"
      "CY\020\002*#\n\020QueryResultsMode\022\017\n\013STREAM_FULL\020"
      "\001*q\n\017HandshakeStatus\022\013\n\007SUCCESS\020\001\022\030\n\024RPC"
      "_VERSION_MISMATCH\020\002\022\017\n\013AUTH_FAILED\020\003\022\023\n\017"
      "UNKNOWN_FAILURE\020\004\022\021\n\rAUTH_REQUIRED\020\005*D\n\r"
      "RequestStatus\022\022\n\016UNKNOWN_STATUS\020\000\022\006\n\002OK\020"
      "\001\022\n\n\006FAILED\020\002\022\013\n\007TIMEOUT\020\003*Y\n\023ColumnSear"
      "chability\022\031\n\025UNKNOWN_SEARCHABILITY\020\000\022\010\n\004"
      "NONE\020\001\022\010\n\004CHAR\020\002\022\n\n\006NUMBER\020\003\022\007\n\003ALL\020\004*K\n"
      "\022ColumnUpdatability\022\030\n\024UNKNOWN_UPDATABIL"
      "ITY\020\000\022\r\n\tREAD_ONLY\020\001\022\014\n\010WRITABLE\020\002*1\n\016Co"
      "llateSupport\022\016\n\nCS_UNKNOWN\020\000\022\017\n\013CS_GROUP"
      "_BY\020\001*J\n\027CorrelationNamesSupport\022\013\n\007CN_N"
      "ONE\020\001\022\026\n\022CN_DIFFERENT_NAMES\020\002\022\n\n\006CN_ANY\020"
      "\003*\271\003\n\027DateTimeLiteralsSupport\022\016\n\nDL_UNKN"
      "OWN\020\000\022\013\n\007DL_DATE\020\001\022\013\n\007DL_TIME\020\002\022\020\n\014DL_TI"
      "MESTAMP\020\003\022\024\n\020DL_INTERVAL_YEAR\020\004\022\025\n\021DL_IN"
      "TERVAL_MONTH\020\005\022\023\n\017DL_INTERVAL_DAY\020\006\022\024\n\020D"
      "L_INTERVAL_HOUR\020\007\022\026\n\022DL_INTERVAL_MINUTE\020"
      "\010\022\026\n\022DL_INTERVAL_SECOND\020\t\022\035\n\031DL_INTERVAL"
      "_YEAR_TO_MONTH\020\n\022\033\n\027DL_INTERVAL_DAY_TO_H"
      "OUR\020\013\022\035\n\031DL_INTERVAL_DAY_TO_MINUTE\020\014\022\035\n\031"
      "DL_INTERVAL_DAY_TO_SECOND\020\r\022\036\n\032DL_INTERV"
      "AL_HOUR_TO_MINUTE\020\016\022\036\n\032DL_INTERVAL_HOUR_"
      "TO_SECOND\020\017\022 \n\034DL_INTERVAL_MINUTE_TO_SEC"
      "OND\020\020*Y\n\016GroupBySupport\022\013\n\007GB_NONE\020\001\022\022\n\016"
      "GB_SELECT_ONLY\020\002\022\024\n\020GB_BEYOND_SELECT\020\003\022\020"
      "\n\014GB_UNRELATED\020\004*x\n\020IdentifierCasing\022\016\n\n"
      "IC_UNKNOWN\020\000\022\023\n\017IC_STORES_LOWER\020\001\022\023\n\017IC_"
      "STORES_MIXED\020\002\022\023\n\017IC_STORES_UPPER\020\003\022\025\n\021I"
      "C_SUPPORTS_MIXED\020\004*X\n\rNullCollation\022\016\n\nN"
      "C_UNKNOWN\020\000\022\017\n\013NC_AT_START\020\001\022\r\n\tNC_AT_EN"
      "D\020\002\022\013\n\007NC_HIGH\020\003\022\n\n\006NC_LOW\020\004*E\n\016OrderByS"
      "upport\022\016\n\nOB_UNKNOWN\020\000\022\020\n\014OB_UNRELATED\020\001"
      "\022\021\n\rOB_EXPRESSION\020\002*\226\001\n\020OuterJoinSupport"
      "\022\016\n\nOJ_UNKNOWN\020\000\022\013\n\007OJ_LEFT\020\001\022\014\n\010OJ_RIGH"
      "T\020\002\022\013\n\007OJ_FULL\020\003\022\r\n\tOJ_NESTED\020\004\022\022\n\016OJ_NO"
      "T_ORDERED\020\005\022\014\n\010OJ_INNER\020\006\022\031\n\025OJ_ALL_COMP"
      "ARISON_OPS\020\007*\204\001\n\017SubQuerySupport\022\016\n\nSQ_U"
      "NKNOWN\020\000\022\021\n\rSQ_CORRELATED\020\001\022\024\n\020SQ_IN_COM"
      "PARISON\020\002\022\020\n\014SQ_IN_EXISTS\020\003\022\020\n\014SQ_IN_INS"
      "ERT\020\004\022\024\n\020SQ_IN_QUANTIFIED\020\005*;\n\014UnionSupp"
      "ort\022\r\n\tU_UNKNOWN\020\000\022\013\n\007U_UNION\020\001\022\017\n\013U_UNI"
      "ON_ALL\020\002B+\n\033org.apache.drill.exec.protoB"
      "\nUserProtosH\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 8933);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "User.proto", &protobuf_RegisterTypes);
  ::protobuf_SchemaDef_2eproto::AddDescriptors();
  ::protobuf_Types_2eproto::AddDescriptors();
  ::protobuf_UserBitShared_2eproto::AddDescriptors();
  ::protobuf_BitData_2eproto::AddDescriptors();
  ::protobuf_BitControl_2eproto::AddDescriptors();
  ::protobuf_ExecutionProtos_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_User_2eproto
namespace exec {
namespace user {
const ::google::protobuf::EnumDescriptor* RpcType_descriptor() {
  protobuf_User_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_User_2eproto::file_level_enum_descriptors[0];
}
bool RpcType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SaslSupport_descriptor() {
  protobuf_User_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_User_2eproto::file_level_enum_descriptors[1];
}
bool SaslSupport_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* QueryResultsMode_descriptor() {
  protobuf_User_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_User_2eproto::file_level_enum_descriptors[2];
}
bool QueryResultsMode_IsValid(int value) {
  switch (value) {
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* HandshakeStatus_descriptor() {
  protobuf_User_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_User_2eproto::file_level_enum_descriptors[3];
}
bool HandshakeStatus_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RequestStatus_descriptor() {
  protobuf_User_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_User_2eproto::file_level_enum_descriptors[4];
}
bool RequestStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ColumnSearchability_descriptor() {
  protobuf_User_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_User_2eproto::file_level_enum_descriptors[5];
}
bool ColumnSearchability_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ColumnUpdatability_descriptor() {
  protobuf_User_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_User_2eproto::file_level_enum_descriptors[6];
}
bool ColumnUpdatability_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CollateSupport_descriptor() {
  protobuf_User_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_User_2eproto::file_level_enum_descriptors[7];
}
bool CollateSupport_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CorrelationNamesSupport_descriptor() {
  protobuf_User_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_User_2eproto::file_level_enum_descriptors[8];
}
bool CorrelationNamesSupport_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DateTimeLiteralsSupport_descriptor() {
  protobuf_User_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_User_2eproto::file_level_enum_descriptors[9];
}
bool DateTimeLiteralsSupport_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GroupBySupport_descriptor() {
  protobuf_User_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_User_2eproto::file_level_enum_descriptors[10];
}
bool GroupBySupport_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* IdentifierCasing_descriptor() {
  protobuf_User_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_User_2eproto::file_level_enum_descriptors[11];
}
bool IdentifierCasing_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* NullCollation_descriptor() {
  protobuf_User_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_User_2eproto::file_level_enum_descriptors[12];
}
bool NullCollation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OrderBySupport_descriptor() {
  protobuf_User_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_User_2eproto::file_level_enum_descriptors[13];
}
bool OrderBySupport_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OuterJoinSupport_descriptor() {
  protobuf_User_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_User_2eproto::file_level_enum_descriptors[14];
}
bool OuterJoinSupport_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SubQuerySupport_descriptor() {
  protobuf_User_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_User_2eproto::file_level_enum_descriptors[15];
}
bool SubQuerySupport_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* UnionSupport_descriptor() {
  protobuf_User_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_User_2eproto::file_level_enum_descriptors[16];
}
bool UnionSupport_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Property::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Property::kKeyFieldNumber;
const int Property::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Property::Property()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_User_2eproto::scc_info_Property.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:exec.user.Property)
}
Property::Property(const Property& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_key()) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:exec.user.Property)
}

void Property::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Property::~Property() {
  // @@protoc_insertion_point(destructor:exec.user.Property)
  SharedDtor();
}

void Property::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Property::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Property::descriptor() {
  ::protobuf_User_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_User_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Property& Property::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_User_2eproto::scc_info_Property.base);
  return *internal_default_instance();
}


void Property::Clear() {
// @@protoc_insertion_point(message_clear_start:exec.user.Property)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      key_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      value_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Property::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:exec.user.Property)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "exec.user.Property.key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), static_cast<int>(this->value().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "exec.user.Property.value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:exec.user.Property)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:exec.user.Property)
  return false;
#undef DO_
}

void Property::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:exec.user.Property)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.Property.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // required string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.Property.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:exec.user.Property)
}

::google::protobuf::uint8* Property::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:exec.user.Property)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.Property.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // required string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.Property.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:exec.user.Property)
  return target;
}

size_t Property::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:exec.user.Property)
  size_t total_size = 0;

  if (has_key()) {
    // required string key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  if (has_value()) {
    // required string value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  return total_size;
}
size_t Property::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:exec.user.Property)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());

    // required string value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Property::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:exec.user.Property)
  GOOGLE_DCHECK_NE(&from, this);
  const Property* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Property>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:exec.user.Property)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:exec.user.Property)
    MergeFrom(*source);
  }
}

void Property::MergeFrom(const Property& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:exec.user.Property)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
}

void Property::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:exec.user.Property)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Property::CopyFrom(const Property& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:exec.user.Property)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Property::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Property::Swap(Property* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Property::InternalSwap(Property* other) {
  using std::swap;
  key_.Swap(&other->key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Property::GetMetadata() const {
  protobuf_User_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_User_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserProperties::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserProperties::kPropertiesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserProperties::UserProperties()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_User_2eproto::scc_info_UserProperties.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:exec.user.UserProperties)
}
UserProperties::UserProperties(const UserProperties& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      properties_(from.properties_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:exec.user.UserProperties)
}

void UserProperties::SharedCtor() {
}

UserProperties::~UserProperties() {
  // @@protoc_insertion_point(destructor:exec.user.UserProperties)
  SharedDtor();
}

void UserProperties::SharedDtor() {
}

void UserProperties::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserProperties::descriptor() {
  ::protobuf_User_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_User_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserProperties& UserProperties::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_User_2eproto::scc_info_UserProperties.base);
  return *internal_default_instance();
}


void UserProperties::Clear() {
// @@protoc_insertion_point(message_clear_start:exec.user.UserProperties)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  properties_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserProperties::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:exec.user.UserProperties)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .exec.user.Property properties = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_properties()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:exec.user.UserProperties)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:exec.user.UserProperties)
  return false;
#undef DO_
}

void UserProperties::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:exec.user.UserProperties)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .exec.user.Property properties = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->properties_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->properties(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:exec.user.UserProperties)
}

::google::protobuf::uint8* UserProperties::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:exec.user.UserProperties)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .exec.user.Property properties = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->properties_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->properties(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:exec.user.UserProperties)
  return target;
}

size_t UserProperties::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:exec.user.UserProperties)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .exec.user.Property properties = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->properties_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->properties(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserProperties::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:exec.user.UserProperties)
  GOOGLE_DCHECK_NE(&from, this);
  const UserProperties* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserProperties>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:exec.user.UserProperties)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:exec.user.UserProperties)
    MergeFrom(*source);
  }
}

void UserProperties::MergeFrom(const UserProperties& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:exec.user.UserProperties)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  properties_.MergeFrom(from.properties_);
}

void UserProperties::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:exec.user.UserProperties)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserProperties::CopyFrom(const UserProperties& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:exec.user.UserProperties)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserProperties::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->properties())) return false;
  return true;
}

void UserProperties::Swap(UserProperties* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserProperties::InternalSwap(UserProperties* other) {
  using std::swap;
  CastToBase(&properties_)->InternalSwap(CastToBase(&other->properties_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserProperties::GetMetadata() const {
  protobuf_User_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_User_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RpcEndpointInfos::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RpcEndpointInfos::kNameFieldNumber;
const int RpcEndpointInfos::kVersionFieldNumber;
const int RpcEndpointInfos::kMajorVersionFieldNumber;
const int RpcEndpointInfos::kMinorVersionFieldNumber;
const int RpcEndpointInfos::kPatchVersionFieldNumber;
const int RpcEndpointInfos::kApplicationFieldNumber;
const int RpcEndpointInfos::kBuildNumberFieldNumber;
const int RpcEndpointInfos::kVersionQualifierFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RpcEndpointInfos::RpcEndpointInfos()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_User_2eproto::scc_info_RpcEndpointInfos.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:exec.user.RpcEndpointInfos)
}
RpcEndpointInfos::RpcEndpointInfos(const RpcEndpointInfos& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_version()) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  application_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_application()) {
    application_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.application_);
  }
  versionqualifier_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_versionqualifier()) {
    versionqualifier_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.versionqualifier_);
  }
  ::memcpy(&majorversion_, &from.majorversion_,
    static_cast<size_t>(reinterpret_cast<char*>(&buildnumber_) -
    reinterpret_cast<char*>(&majorversion_)) + sizeof(buildnumber_));
  // @@protoc_insertion_point(copy_constructor:exec.user.RpcEndpointInfos)
}

void RpcEndpointInfos::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  application_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  versionqualifier_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&majorversion_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&buildnumber_) -
      reinterpret_cast<char*>(&majorversion_)) + sizeof(buildnumber_));
}

RpcEndpointInfos::~RpcEndpointInfos() {
  // @@protoc_insertion_point(destructor:exec.user.RpcEndpointInfos)
  SharedDtor();
}

void RpcEndpointInfos::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  application_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  versionqualifier_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RpcEndpointInfos::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RpcEndpointInfos::descriptor() {
  ::protobuf_User_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_User_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RpcEndpointInfos& RpcEndpointInfos::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_User_2eproto::scc_info_RpcEndpointInfos.base);
  return *internal_default_instance();
}


void RpcEndpointInfos::Clear() {
// @@protoc_insertion_point(message_clear_start:exec.user.RpcEndpointInfos)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      version_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      application_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      versionqualifier_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 240u) {
    ::memset(&majorversion_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&buildnumber_) -
        reinterpret_cast<char*>(&majorversion_)) + sizeof(buildnumber_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RpcEndpointInfos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:exec.user.RpcEndpointInfos)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "exec.user.RpcEndpointInfos.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), static_cast<int>(this->version().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "exec.user.RpcEndpointInfos.version");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 majorVersion = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_majorversion();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &majorversion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 minorVersion = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_minorversion();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &minorversion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 patchVersion = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_patchversion();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &patchversion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string application = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_application()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->application().data(), static_cast<int>(this->application().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "exec.user.RpcEndpointInfos.application");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 buildNumber = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_buildnumber();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buildnumber_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string versionQualifier = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_versionqualifier()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->versionqualifier().data(), static_cast<int>(this->versionqualifier().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "exec.user.RpcEndpointInfos.versionQualifier");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:exec.user.RpcEndpointInfos)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:exec.user.RpcEndpointInfos)
  return false;
#undef DO_
}

void RpcEndpointInfos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:exec.user.RpcEndpointInfos)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.RpcEndpointInfos.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string version = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.RpcEndpointInfos.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->version(), output);
  }

  // optional uint32 majorVersion = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->majorversion(), output);
  }

  // optional uint32 minorVersion = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->minorversion(), output);
  }

  // optional uint32 patchVersion = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->patchversion(), output);
  }

  // optional string application = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->application().data(), static_cast<int>(this->application().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.RpcEndpointInfos.application");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->application(), output);
  }

  // optional uint32 buildNumber = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->buildnumber(), output);
  }

  // optional string versionQualifier = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->versionqualifier().data(), static_cast<int>(this->versionqualifier().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.RpcEndpointInfos.versionQualifier");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->versionqualifier(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:exec.user.RpcEndpointInfos)
}

::google::protobuf::uint8* RpcEndpointInfos::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:exec.user.RpcEndpointInfos)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.RpcEndpointInfos.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string version = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.RpcEndpointInfos.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->version(), target);
  }

  // optional uint32 majorVersion = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->majorversion(), target);
  }

  // optional uint32 minorVersion = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->minorversion(), target);
  }

  // optional uint32 patchVersion = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->patchversion(), target);
  }

  // optional string application = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->application().data(), static_cast<int>(this->application().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.RpcEndpointInfos.application");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->application(), target);
  }

  // optional uint32 buildNumber = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->buildnumber(), target);
  }

  // optional string versionQualifier = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->versionqualifier().data(), static_cast<int>(this->versionqualifier().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.RpcEndpointInfos.versionQualifier");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->versionqualifier(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:exec.user.RpcEndpointInfos)
  return target;
}

size_t RpcEndpointInfos::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:exec.user.RpcEndpointInfos)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string version = 2;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional string application = 6;
    if (has_application()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->application());
    }

    // optional string versionQualifier = 8;
    if (has_versionqualifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->versionqualifier());
    }

    // optional uint32 majorVersion = 3;
    if (has_majorversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->majorversion());
    }

    // optional uint32 minorVersion = 4;
    if (has_minorversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->minorversion());
    }

    // optional uint32 patchVersion = 5;
    if (has_patchversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->patchversion());
    }

    // optional uint32 buildNumber = 7;
    if (has_buildnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buildnumber());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RpcEndpointInfos::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:exec.user.RpcEndpointInfos)
  GOOGLE_DCHECK_NE(&from, this);
  const RpcEndpointInfos* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RpcEndpointInfos>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:exec.user.RpcEndpointInfos)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:exec.user.RpcEndpointInfos)
    MergeFrom(*source);
  }
}

void RpcEndpointInfos::MergeFrom(const RpcEndpointInfos& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:exec.user.RpcEndpointInfos)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_version();
      version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_application();
      application_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.application_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_versionqualifier();
      versionqualifier_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.versionqualifier_);
    }
    if (cached_has_bits & 0x00000010u) {
      majorversion_ = from.majorversion_;
    }
    if (cached_has_bits & 0x00000020u) {
      minorversion_ = from.minorversion_;
    }
    if (cached_has_bits & 0x00000040u) {
      patchversion_ = from.patchversion_;
    }
    if (cached_has_bits & 0x00000080u) {
      buildnumber_ = from.buildnumber_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RpcEndpointInfos::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:exec.user.RpcEndpointInfos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpcEndpointInfos::CopyFrom(const RpcEndpointInfos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:exec.user.RpcEndpointInfos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpcEndpointInfos::IsInitialized() const {
  return true;
}

void RpcEndpointInfos::Swap(RpcEndpointInfos* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RpcEndpointInfos::InternalSwap(RpcEndpointInfos* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  version_.Swap(&other->version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  application_.Swap(&other->application_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  versionqualifier_.Swap(&other->versionqualifier_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(majorversion_, other->majorversion_);
  swap(minorversion_, other->minorversion_);
  swap(patchversion_, other->patchversion_);
  swap(buildnumber_, other->buildnumber_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RpcEndpointInfos::GetMetadata() const {
  protobuf_User_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_User_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserToBitHandshake::InitAsDefaultInstance() {
  ::exec::user::_UserToBitHandshake_default_instance_._instance.get_mutable()->credentials_ = const_cast< ::exec::shared::UserCredentials*>(
      ::exec::shared::UserCredentials::internal_default_instance());
  ::exec::user::_UserToBitHandshake_default_instance_._instance.get_mutable()->properties_ = const_cast< ::exec::user::UserProperties*>(
      ::exec::user::UserProperties::internal_default_instance());
  ::exec::user::_UserToBitHandshake_default_instance_._instance.get_mutable()->client_infos_ = const_cast< ::exec::user::RpcEndpointInfos*>(
      ::exec::user::RpcEndpointInfos::internal_default_instance());
}
void UserToBitHandshake::clear_credentials() {
  if (credentials_ != NULL) credentials_->Clear();
  clear_has_credentials();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserToBitHandshake::kChannelFieldNumber;
const int UserToBitHandshake::kSupportListeningFieldNumber;
const int UserToBitHandshake::kRpcVersionFieldNumber;
const int UserToBitHandshake::kCredentialsFieldNumber;
const int UserToBitHandshake::kPropertiesFieldNumber;
const int UserToBitHandshake::kSupportComplexTypesFieldNumber;
const int UserToBitHandshake::kSupportTimeoutFieldNumber;
const int UserToBitHandshake::kClientInfosFieldNumber;
const int UserToBitHandshake::kSaslSupportFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserToBitHandshake::UserToBitHandshake()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_User_2eproto::scc_info_UserToBitHandshake.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:exec.user.UserToBitHandshake)
}
UserToBitHandshake::UserToBitHandshake(const UserToBitHandshake& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_credentials()) {
    credentials_ = new ::exec::shared::UserCredentials(*from.credentials_);
  } else {
    credentials_ = NULL;
  }
  if (from.has_properties()) {
    properties_ = new ::exec::user::UserProperties(*from.properties_);
  } else {
    properties_ = NULL;
  }
  if (from.has_client_infos()) {
    client_infos_ = new ::exec::user::RpcEndpointInfos(*from.client_infos_);
  } else {
    client_infos_ = NULL;
  }
  ::memcpy(&rpc_version_, &from.rpc_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&channel_) -
    reinterpret_cast<char*>(&rpc_version_)) + sizeof(channel_));
  // @@protoc_insertion_point(copy_constructor:exec.user.UserToBitHandshake)
}

void UserToBitHandshake::SharedCtor() {
  ::memset(&credentials_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sasl_support_) -
      reinterpret_cast<char*>(&credentials_)) + sizeof(sasl_support_));
  channel_ = 2;
}

UserToBitHandshake::~UserToBitHandshake() {
  // @@protoc_insertion_point(destructor:exec.user.UserToBitHandshake)
  SharedDtor();
}

void UserToBitHandshake::SharedDtor() {
  if (this != internal_default_instance()) delete credentials_;
  if (this != internal_default_instance()) delete properties_;
  if (this != internal_default_instance()) delete client_infos_;
}

void UserToBitHandshake::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserToBitHandshake::descriptor() {
  ::protobuf_User_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_User_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserToBitHandshake& UserToBitHandshake::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_User_2eproto::scc_info_UserToBitHandshake.base);
  return *internal_default_instance();
}


void UserToBitHandshake::Clear() {
// @@protoc_insertion_point(message_clear_start:exec.user.UserToBitHandshake)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(credentials_ != NULL);
      credentials_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(properties_ != NULL);
      properties_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(client_infos_ != NULL);
      client_infos_->Clear();
    }
  }
  if (cached_has_bits & 248u) {
    ::memset(&rpc_version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sasl_support_) -
        reinterpret_cast<char*>(&rpc_version_)) + sizeof(sasl_support_));
  }
  channel_ = 2;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserToBitHandshake::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:exec.user.UserToBitHandshake)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .exec.shared.RpcChannel channel = 1 [default = USER];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::exec::shared::RpcChannel_IsValid(value)) {
            set_channel(static_cast< ::exec::shared::RpcChannel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool support_listening = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_support_listening();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &support_listening_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 rpc_version = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_rpc_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rpc_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .exec.shared.UserCredentials credentials = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_credentials()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .exec.user.UserProperties properties = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_properties()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool support_complex_types = 6 [default = false];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_support_complex_types();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &support_complex_types_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool support_timeout = 7 [default = false];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_support_timeout();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &support_timeout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .exec.user.RpcEndpointInfos client_infos = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_client_infos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .exec.user.SaslSupport sasl_support = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::exec::user::SaslSupport_IsValid(value)) {
            set_sasl_support(static_cast< ::exec::user::SaslSupport >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                9, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:exec.user.UserToBitHandshake)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:exec.user.UserToBitHandshake)
  return false;
#undef DO_
}

void UserToBitHandshake::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:exec.user.UserToBitHandshake)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .exec.shared.RpcChannel channel = 1 [default = USER];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->channel(), output);
  }

  // optional bool support_listening = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->support_listening(), output);
  }

  // optional int32 rpc_version = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rpc_version(), output);
  }

  // optional .exec.shared.UserCredentials credentials = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_credentials(), output);
  }

  // optional .exec.user.UserProperties properties = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_properties(), output);
  }

  // optional bool support_complex_types = 6 [default = false];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->support_complex_types(), output);
  }

  // optional bool support_timeout = 7 [default = false];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->support_timeout(), output);
  }

  // optional .exec.user.RpcEndpointInfos client_infos = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_client_infos(), output);
  }

  // optional .exec.user.SaslSupport sasl_support = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->sasl_support(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:exec.user.UserToBitHandshake)
}

::google::protobuf::uint8* UserToBitHandshake::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:exec.user.UserToBitHandshake)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .exec.shared.RpcChannel channel = 1 [default = USER];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->channel(), target);
  }

  // optional bool support_listening = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->support_listening(), target);
  }

  // optional int32 rpc_version = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rpc_version(), target);
  }

  // optional .exec.shared.UserCredentials credentials = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_credentials(), deterministic, target);
  }

  // optional .exec.user.UserProperties properties = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_properties(), deterministic, target);
  }

  // optional bool support_complex_types = 6 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->support_complex_types(), target);
  }

  // optional bool support_timeout = 7 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->support_timeout(), target);
  }

  // optional .exec.user.RpcEndpointInfos client_infos = 8;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_client_infos(), deterministic, target);
  }

  // optional .exec.user.SaslSupport sasl_support = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->sasl_support(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:exec.user.UserToBitHandshake)
  return target;
}

size_t UserToBitHandshake::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:exec.user.UserToBitHandshake)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .exec.shared.UserCredentials credentials = 4;
    if (has_credentials()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *credentials_);
    }

    // optional .exec.user.UserProperties properties = 5;
    if (has_properties()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *properties_);
    }

    // optional .exec.user.RpcEndpointInfos client_infos = 8;
    if (has_client_infos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *client_infos_);
    }

    // optional int32 rpc_version = 3;
    if (has_rpc_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rpc_version());
    }

    // optional bool support_listening = 2;
    if (has_support_listening()) {
      total_size += 1 + 1;
    }

    // optional bool support_complex_types = 6 [default = false];
    if (has_support_complex_types()) {
      total_size += 1 + 1;
    }

    // optional bool support_timeout = 7 [default = false];
    if (has_support_timeout()) {
      total_size += 1 + 1;
    }

    // optional .exec.user.SaslSupport sasl_support = 9;
    if (has_sasl_support()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sasl_support());
    }

  }
  // optional .exec.shared.RpcChannel channel = 1 [default = USER];
  if (has_channel()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->channel());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserToBitHandshake::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:exec.user.UserToBitHandshake)
  GOOGLE_DCHECK_NE(&from, this);
  const UserToBitHandshake* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserToBitHandshake>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:exec.user.UserToBitHandshake)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:exec.user.UserToBitHandshake)
    MergeFrom(*source);
  }
}

void UserToBitHandshake::MergeFrom(const UserToBitHandshake& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:exec.user.UserToBitHandshake)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_credentials()->::exec::shared::UserCredentials::MergeFrom(from.credentials());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_properties()->::exec::user::UserProperties::MergeFrom(from.properties());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_client_infos()->::exec::user::RpcEndpointInfos::MergeFrom(from.client_infos());
    }
    if (cached_has_bits & 0x00000008u) {
      rpc_version_ = from.rpc_version_;
    }
    if (cached_has_bits & 0x00000010u) {
      support_listening_ = from.support_listening_;
    }
    if (cached_has_bits & 0x00000020u) {
      support_complex_types_ = from.support_complex_types_;
    }
    if (cached_has_bits & 0x00000040u) {
      support_timeout_ = from.support_timeout_;
    }
    if (cached_has_bits & 0x00000080u) {
      sasl_support_ = from.sasl_support_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_channel(from.channel());
  }
}

void UserToBitHandshake::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:exec.user.UserToBitHandshake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserToBitHandshake::CopyFrom(const UserToBitHandshake& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:exec.user.UserToBitHandshake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserToBitHandshake::IsInitialized() const {
  if (has_properties()) {
    if (!this->properties_->IsInitialized()) return false;
  }
  return true;
}

void UserToBitHandshake::Swap(UserToBitHandshake* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserToBitHandshake::InternalSwap(UserToBitHandshake* other) {
  using std::swap;
  swap(credentials_, other->credentials_);
  swap(properties_, other->properties_);
  swap(client_infos_, other->client_infos_);
  swap(rpc_version_, other->rpc_version_);
  swap(support_listening_, other->support_listening_);
  swap(support_complex_types_, other->support_complex_types_);
  swap(support_timeout_, other->support_timeout_);
  swap(sasl_support_, other->sasl_support_);
  swap(channel_, other->channel_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserToBitHandshake::GetMetadata() const {
  protobuf_User_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_User_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RequestResults::InitAsDefaultInstance() {
  ::exec::user::_RequestResults_default_instance_._instance.get_mutable()->query_id_ = const_cast< ::exec::shared::QueryId*>(
      ::exec::shared::QueryId::internal_default_instance());
}
void RequestResults::clear_query_id() {
  if (query_id_ != NULL) query_id_->Clear();
  clear_has_query_id();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestResults::kQueryIdFieldNumber;
const int RequestResults::kMaximumResponsesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestResults::RequestResults()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_User_2eproto::scc_info_RequestResults.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:exec.user.RequestResults)
}
RequestResults::RequestResults(const RequestResults& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_query_id()) {
    query_id_ = new ::exec::shared::QueryId(*from.query_id_);
  } else {
    query_id_ = NULL;
  }
  maximum_responses_ = from.maximum_responses_;
  // @@protoc_insertion_point(copy_constructor:exec.user.RequestResults)
}

void RequestResults::SharedCtor() {
  ::memset(&query_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maximum_responses_) -
      reinterpret_cast<char*>(&query_id_)) + sizeof(maximum_responses_));
}

RequestResults::~RequestResults() {
  // @@protoc_insertion_point(destructor:exec.user.RequestResults)
  SharedDtor();
}

void RequestResults::SharedDtor() {
  if (this != internal_default_instance()) delete query_id_;
}

void RequestResults::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RequestResults::descriptor() {
  ::protobuf_User_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_User_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RequestResults& RequestResults::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_User_2eproto::scc_info_RequestResults.base);
  return *internal_default_instance();
}


void RequestResults::Clear() {
// @@protoc_insertion_point(message_clear_start:exec.user.RequestResults)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(query_id_ != NULL);
    query_id_->Clear();
  }
  maximum_responses_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RequestResults::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:exec.user.RequestResults)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .exec.shared.QueryId query_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_query_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 maximum_responses = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_maximum_responses();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maximum_responses_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:exec.user.RequestResults)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:exec.user.RequestResults)
  return false;
#undef DO_
}

void RequestResults::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:exec.user.RequestResults)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .exec.shared.QueryId query_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_query_id(), output);
  }

  // optional int32 maximum_responses = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->maximum_responses(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:exec.user.RequestResults)
}

::google::protobuf::uint8* RequestResults::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:exec.user.RequestResults)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .exec.shared.QueryId query_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_query_id(), deterministic, target);
  }

  // optional int32 maximum_responses = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->maximum_responses(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:exec.user.RequestResults)
  return target;
}

size_t RequestResults::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:exec.user.RequestResults)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .exec.shared.QueryId query_id = 1;
    if (has_query_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *query_id_);
    }

    // optional int32 maximum_responses = 2;
    if (has_maximum_responses()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maximum_responses());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestResults::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:exec.user.RequestResults)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestResults* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestResults>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:exec.user.RequestResults)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:exec.user.RequestResults)
    MergeFrom(*source);
  }
}

void RequestResults::MergeFrom(const RequestResults& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:exec.user.RequestResults)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_query_id()->::exec::shared::QueryId::MergeFrom(from.query_id());
    }
    if (cached_has_bits & 0x00000002u) {
      maximum_responses_ = from.maximum_responses_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RequestResults::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:exec.user.RequestResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestResults::CopyFrom(const RequestResults& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:exec.user.RequestResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestResults::IsInitialized() const {
  return true;
}

void RequestResults::Swap(RequestResults* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestResults::InternalSwap(RequestResults* other) {
  using std::swap;
  swap(query_id_, other->query_id_);
  swap(maximum_responses_, other->maximum_responses_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RequestResults::GetMetadata() const {
  protobuf_User_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_User_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetQueryPlanFragments::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetQueryPlanFragments::kQueryFieldNumber;
const int GetQueryPlanFragments::kTypeFieldNumber;
const int GetQueryPlanFragments::kSplitPlanFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetQueryPlanFragments::GetQueryPlanFragments()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_User_2eproto::scc_info_GetQueryPlanFragments.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:exec.user.GetQueryPlanFragments)
}
GetQueryPlanFragments::GetQueryPlanFragments(const GetQueryPlanFragments& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_query()) {
    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
  ::memcpy(&split_plan_, &from.split_plan_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&split_plan_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:exec.user.GetQueryPlanFragments)
}

void GetQueryPlanFragments::SharedCtor() {
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  split_plan_ = false;
  type_ = 1;
}

GetQueryPlanFragments::~GetQueryPlanFragments() {
  // @@protoc_insertion_point(destructor:exec.user.GetQueryPlanFragments)
  SharedDtor();
}

void GetQueryPlanFragments::SharedDtor() {
  query_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetQueryPlanFragments::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetQueryPlanFragments::descriptor() {
  ::protobuf_User_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_User_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetQueryPlanFragments& GetQueryPlanFragments::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_User_2eproto::scc_info_GetQueryPlanFragments.base);
  return *internal_default_instance();
}


void GetQueryPlanFragments::Clear() {
// @@protoc_insertion_point(message_clear_start:exec.user.GetQueryPlanFragments)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    query_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 6u) {
    split_plan_ = false;
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetQueryPlanFragments::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:exec.user.GetQueryPlanFragments)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string query = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->query().data(), static_cast<int>(this->query().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "exec.user.GetQueryPlanFragments.query");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .exec.shared.QueryType type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::exec::shared::QueryType_IsValid(value)) {
            set_type(static_cast< ::exec::shared::QueryType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool split_plan = 3 [default = false];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_split_plan();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &split_plan_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:exec.user.GetQueryPlanFragments)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:exec.user.GetQueryPlanFragments)
  return false;
#undef DO_
}

void GetQueryPlanFragments::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:exec.user.GetQueryPlanFragments)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string query = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query().data(), static_cast<int>(this->query().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.GetQueryPlanFragments.query");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->query(), output);
  }

  // optional .exec.shared.QueryType type = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional bool split_plan = 3 [default = false];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->split_plan(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:exec.user.GetQueryPlanFragments)
}

::google::protobuf::uint8* GetQueryPlanFragments::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:exec.user.GetQueryPlanFragments)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string query = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query().data(), static_cast<int>(this->query().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.GetQueryPlanFragments.query");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->query(), target);
  }

  // optional .exec.shared.QueryType type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional bool split_plan = 3 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->split_plan(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:exec.user.GetQueryPlanFragments)
  return target;
}

size_t GetQueryPlanFragments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:exec.user.GetQueryPlanFragments)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string query = 1;
  if (has_query()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->query());
  }
  if (_has_bits_[0 / 32] & 6u) {
    // optional bool split_plan = 3 [default = false];
    if (has_split_plan()) {
      total_size += 1 + 1;
    }

    // optional .exec.shared.QueryType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetQueryPlanFragments::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:exec.user.GetQueryPlanFragments)
  GOOGLE_DCHECK_NE(&from, this);
  const GetQueryPlanFragments* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetQueryPlanFragments>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:exec.user.GetQueryPlanFragments)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:exec.user.GetQueryPlanFragments)
    MergeFrom(*source);
  }
}

void GetQueryPlanFragments::MergeFrom(const GetQueryPlanFragments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:exec.user.GetQueryPlanFragments)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_query();
      query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
    }
    if (cached_has_bits & 0x00000002u) {
      split_plan_ = from.split_plan_;
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetQueryPlanFragments::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:exec.user.GetQueryPlanFragments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetQueryPlanFragments::CopyFrom(const GetQueryPlanFragments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:exec.user.GetQueryPlanFragments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetQueryPlanFragments::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void GetQueryPlanFragments::Swap(GetQueryPlanFragments* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetQueryPlanFragments::InternalSwap(GetQueryPlanFragments* other) {
  using std::swap;
  query_.Swap(&other->query_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(split_plan_, other->split_plan_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetQueryPlanFragments::GetMetadata() const {
  protobuf_User_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_User_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void QueryPlanFragments::InitAsDefaultInstance() {
  ::exec::user::_QueryPlanFragments_default_instance_._instance.get_mutable()->query_id_ = const_cast< ::exec::shared::QueryId*>(
      ::exec::shared::QueryId::internal_default_instance());
  ::exec::user::_QueryPlanFragments_default_instance_._instance.get_mutable()->error_ = const_cast< ::exec::shared::DrillPBError*>(
      ::exec::shared::DrillPBError::internal_default_instance());
}
void QueryPlanFragments::clear_query_id() {
  if (query_id_ != NULL) query_id_->Clear();
  clear_has_query_id();
}
void QueryPlanFragments::clear_fragments() {
  fragments_.Clear();
}
void QueryPlanFragments::clear_error() {
  if (error_ != NULL) error_->Clear();
  clear_has_error();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryPlanFragments::kStatusFieldNumber;
const int QueryPlanFragments::kQueryIdFieldNumber;
const int QueryPlanFragments::kFragmentsFieldNumber;
const int QueryPlanFragments::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryPlanFragments::QueryPlanFragments()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_User_2eproto::scc_info_QueryPlanFragments.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:exec.user.QueryPlanFragments)
}
QueryPlanFragments::QueryPlanFragments(const QueryPlanFragments& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      fragments_(from.fragments_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_query_id()) {
    query_id_ = new ::exec::shared::QueryId(*from.query_id_);
  } else {
    query_id_ = NULL;
  }
  if (from.has_error()) {
    error_ = new ::exec::shared::DrillPBError(*from.error_);
  } else {
    error_ = NULL;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:exec.user.QueryPlanFragments)
}

void QueryPlanFragments::SharedCtor() {
  ::memset(&query_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&query_id_)) + sizeof(status_));
}

QueryPlanFragments::~QueryPlanFragments() {
  // @@protoc_insertion_point(destructor:exec.user.QueryPlanFragments)
  SharedDtor();
}

void QueryPlanFragments::SharedDtor() {
  if (this != internal_default_instance()) delete query_id_;
  if (this != internal_default_instance()) delete error_;
}

void QueryPlanFragments::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* QueryPlanFragments::descriptor() {
  ::protobuf_User_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_User_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QueryPlanFragments& QueryPlanFragments::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_User_2eproto::scc_info_QueryPlanFragments.base);
  return *internal_default_instance();
}


void QueryPlanFragments::Clear() {
// @@protoc_insertion_point(message_clear_start:exec.user.QueryPlanFragments)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fragments_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(query_id_ != NULL);
      query_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(error_ != NULL);
      error_->Clear();
    }
  }
  status_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool QueryPlanFragments::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:exec.user.QueryPlanFragments)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .exec.shared.QueryResult.QueryState status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::exec::shared::QueryResult_QueryState_IsValid(value)) {
            set_status(static_cast< ::exec::shared::QueryResult_QueryState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .exec.shared.QueryId query_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_query_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .exec.bit.control.PlanFragment fragments = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_fragments()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .exec.shared.DrillPBError error = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:exec.user.QueryPlanFragments)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:exec.user.QueryPlanFragments)
  return false;
#undef DO_
}

void QueryPlanFragments::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:exec.user.QueryPlanFragments)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .exec.shared.QueryResult.QueryState status = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // optional .exec.shared.QueryId query_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_query_id(), output);
  }

  // repeated .exec.bit.control.PlanFragment fragments = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fragments_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->fragments(static_cast<int>(i)),
      output);
  }

  // optional .exec.shared.DrillPBError error = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_error(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:exec.user.QueryPlanFragments)
}

::google::protobuf::uint8* QueryPlanFragments::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:exec.user.QueryPlanFragments)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .exec.shared.QueryResult.QueryState status = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // optional .exec.shared.QueryId query_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_query_id(), deterministic, target);
  }

  // repeated .exec.bit.control.PlanFragment fragments = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fragments_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->fragments(static_cast<int>(i)), deterministic, target);
  }

  // optional .exec.shared.DrillPBError error = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_error(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:exec.user.QueryPlanFragments)
  return target;
}

size_t QueryPlanFragments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:exec.user.QueryPlanFragments)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .exec.shared.QueryResult.QueryState status = 1;
  if (has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }
  // repeated .exec.bit.control.PlanFragment fragments = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->fragments_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->fragments(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional .exec.shared.QueryId query_id = 2;
    if (has_query_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *query_id_);
    }

    // optional .exec.shared.DrillPBError error = 4;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *error_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryPlanFragments::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:exec.user.QueryPlanFragments)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryPlanFragments* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryPlanFragments>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:exec.user.QueryPlanFragments)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:exec.user.QueryPlanFragments)
    MergeFrom(*source);
  }
}

void QueryPlanFragments::MergeFrom(const QueryPlanFragments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:exec.user.QueryPlanFragments)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fragments_.MergeFrom(from.fragments_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_query_id()->::exec::shared::QueryId::MergeFrom(from.query_id());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_error()->::exec::shared::DrillPBError::MergeFrom(from.error());
    }
    if (cached_has_bits & 0x00000004u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void QueryPlanFragments::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:exec.user.QueryPlanFragments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryPlanFragments::CopyFrom(const QueryPlanFragments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:exec.user.QueryPlanFragments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryPlanFragments::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  return true;
}

void QueryPlanFragments::Swap(QueryPlanFragments* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryPlanFragments::InternalSwap(QueryPlanFragments* other) {
  using std::swap;
  CastToBase(&fragments_)->InternalSwap(CastToBase(&other->fragments_));
  swap(query_id_, other->query_id_);
  swap(error_, other->error_);
  swap(status_, other->status_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata QueryPlanFragments::GetMetadata() const {
  protobuf_User_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_User_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BitToUserHandshake::InitAsDefaultInstance() {
  ::exec::user::_BitToUserHandshake_default_instance_._instance.get_mutable()->server_infos_ = const_cast< ::exec::user::RpcEndpointInfos*>(
      ::exec::user::RpcEndpointInfos::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BitToUserHandshake::kRpcVersionFieldNumber;
const int BitToUserHandshake::kStatusFieldNumber;
const int BitToUserHandshake::kErrorIdFieldNumber;
const int BitToUserHandshake::kErrorMessageFieldNumber;
const int BitToUserHandshake::kServerInfosFieldNumber;
const int BitToUserHandshake::kAuthenticationMechanismsFieldNumber;
const int BitToUserHandshake::kSupportedMethodsFieldNumber;
const int BitToUserHandshake::kEncryptedFieldNumber;
const int BitToUserHandshake::kMaxWrappedSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BitToUserHandshake::BitToUserHandshake()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_User_2eproto::scc_info_BitToUserHandshake.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:exec.user.BitToUserHandshake)
}
BitToUserHandshake::BitToUserHandshake(const BitToUserHandshake& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      authenticationmechanisms_(from.authenticationmechanisms_),
      supported_methods_(from.supported_methods_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  errorid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_errorid()) {
    errorid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errorid_);
  }
  errormessage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_errormessage()) {
    errormessage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errormessage_);
  }
  if (from.has_server_infos()) {
    server_infos_ = new ::exec::user::RpcEndpointInfos(*from.server_infos_);
  } else {
    server_infos_ = NULL;
  }
  ::memcpy(&rpc_version_, &from.rpc_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&rpc_version_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:exec.user.BitToUserHandshake)
}

void BitToUserHandshake::SharedCtor() {
  errorid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errormessage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&server_infos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maxwrappedsize_) -
      reinterpret_cast<char*>(&server_infos_)) + sizeof(maxwrappedsize_));
  status_ = 1;
}

BitToUserHandshake::~BitToUserHandshake() {
  // @@protoc_insertion_point(destructor:exec.user.BitToUserHandshake)
  SharedDtor();
}

void BitToUserHandshake::SharedDtor() {
  errorid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errormessage_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete server_infos_;
}

void BitToUserHandshake::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* BitToUserHandshake::descriptor() {
  ::protobuf_User_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_User_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BitToUserHandshake& BitToUserHandshake::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_User_2eproto::scc_info_BitToUserHandshake.base);
  return *internal_default_instance();
}


void BitToUserHandshake::Clear() {
// @@protoc_insertion_point(message_clear_start:exec.user.BitToUserHandshake)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  authenticationmechanisms_.Clear();
  supported_methods_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      errorid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      errormessage_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(server_infos_ != NULL);
      server_infos_->Clear();
    }
  }
  if (cached_has_bits & 120u) {
    ::memset(&rpc_version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&maxwrappedsize_) -
        reinterpret_cast<char*>(&rpc_version_)) + sizeof(maxwrappedsize_));
    status_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BitToUserHandshake::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:exec.user.BitToUserHandshake)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 rpc_version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_rpc_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rpc_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .exec.user.HandshakeStatus status = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::exec::user::HandshakeStatus_IsValid(value)) {
            set_status(static_cast< ::exec::user::HandshakeStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string errorId = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errorid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errorid().data(), static_cast<int>(this->errorid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "exec.user.BitToUserHandshake.errorId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string errorMessage = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errormessage()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errormessage().data(), static_cast<int>(this->errormessage().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "exec.user.BitToUserHandshake.errorMessage");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .exec.user.RpcEndpointInfos server_infos = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_server_infos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string authenticationMechanisms = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_authenticationmechanisms()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->authenticationmechanisms(this->authenticationmechanisms_size() - 1).data(),
            static_cast<int>(this->authenticationmechanisms(this->authenticationmechanisms_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "exec.user.BitToUserHandshake.authenticationMechanisms");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .exec.user.RpcType supported_methods = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::exec::user::RpcType_IsValid(value)) {
            add_supported_methods(static_cast< ::exec::user::RpcType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                8, static_cast< ::google::protobuf::uint64>(value));
          }
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 8,
                 ::exec::user::RpcType_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_supported_methods())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool encrypted = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_encrypted();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encrypted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 maxWrappedSize = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_maxwrappedsize();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxwrappedsize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:exec.user.BitToUserHandshake)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:exec.user.BitToUserHandshake)
  return false;
#undef DO_
}

void BitToUserHandshake::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:exec.user.BitToUserHandshake)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 rpc_version = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rpc_version(), output);
  }

  // optional .exec.user.HandshakeStatus status = 3;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

  // optional string errorId = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errorid().data(), static_cast<int>(this->errorid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.BitToUserHandshake.errorId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->errorid(), output);
  }

  // optional string errorMessage = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errormessage().data(), static_cast<int>(this->errormessage().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.BitToUserHandshake.errorMessage");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->errormessage(), output);
  }

  // optional .exec.user.RpcEndpointInfos server_infos = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_server_infos(), output);
  }

  // repeated string authenticationMechanisms = 7;
  for (int i = 0, n = this->authenticationmechanisms_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->authenticationmechanisms(i).data(), static_cast<int>(this->authenticationmechanisms(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.BitToUserHandshake.authenticationMechanisms");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->authenticationmechanisms(i), output);
  }

  // repeated .exec.user.RpcType supported_methods = 8;
  for (int i = 0, n = this->supported_methods_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->supported_methods(i), output);
  }

  // optional bool encrypted = 9;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->encrypted(), output);
  }

  // optional int32 maxWrappedSize = 10;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->maxwrappedsize(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:exec.user.BitToUserHandshake)
}

::google::protobuf::uint8* BitToUserHandshake::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:exec.user.BitToUserHandshake)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 rpc_version = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rpc_version(), target);
  }

  // optional .exec.user.HandshakeStatus status = 3;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->status(), target);
  }

  // optional string errorId = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errorid().data(), static_cast<int>(this->errorid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.BitToUserHandshake.errorId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->errorid(), target);
  }

  // optional string errorMessage = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errormessage().data(), static_cast<int>(this->errormessage().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.BitToUserHandshake.errorMessage");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->errormessage(), target);
  }

  // optional .exec.user.RpcEndpointInfos server_infos = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_server_infos(), deterministic, target);
  }

  // repeated string authenticationMechanisms = 7;
  for (int i = 0, n = this->authenticationmechanisms_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->authenticationmechanisms(i).data(), static_cast<int>(this->authenticationmechanisms(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.BitToUserHandshake.authenticationMechanisms");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->authenticationmechanisms(i), target);
  }

  // repeated .exec.user.RpcType supported_methods = 8;
  target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
    8, this->supported_methods_, target);

  // optional bool encrypted = 9;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->encrypted(), target);
  }

  // optional int32 maxWrappedSize = 10;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->maxwrappedsize(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:exec.user.BitToUserHandshake)
  return target;
}

size_t BitToUserHandshake::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:exec.user.BitToUserHandshake)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string authenticationMechanisms = 7;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->authenticationmechanisms_size());
  for (int i = 0, n = this->authenticationmechanisms_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->authenticationmechanisms(i));
  }

  // repeated .exec.user.RpcType supported_methods = 8;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->supported_methods_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->supported_methods(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  if (_has_bits_[0 / 32] & 127u) {
    // optional string errorId = 4;
    if (has_errorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errorid());
    }

    // optional string errorMessage = 5;
    if (has_errormessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errormessage());
    }

    // optional .exec.user.RpcEndpointInfos server_infos = 6;
    if (has_server_infos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *server_infos_);
    }

    // optional int32 rpc_version = 2;
    if (has_rpc_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rpc_version());
    }

    // optional bool encrypted = 9;
    if (has_encrypted()) {
      total_size += 1 + 1;
    }

    // optional int32 maxWrappedSize = 10;
    if (has_maxwrappedsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxwrappedsize());
    }

    // optional .exec.user.HandshakeStatus status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BitToUserHandshake::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:exec.user.BitToUserHandshake)
  GOOGLE_DCHECK_NE(&from, this);
  const BitToUserHandshake* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BitToUserHandshake>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:exec.user.BitToUserHandshake)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:exec.user.BitToUserHandshake)
    MergeFrom(*source);
  }
}

void BitToUserHandshake::MergeFrom(const BitToUserHandshake& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:exec.user.BitToUserHandshake)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  authenticationmechanisms_.MergeFrom(from.authenticationmechanisms_);
  supported_methods_.MergeFrom(from.supported_methods_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_errorid();
      errorid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errorid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_errormessage();
      errormessage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errormessage_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_server_infos()->::exec::user::RpcEndpointInfos::MergeFrom(from.server_infos());
    }
    if (cached_has_bits & 0x00000008u) {
      rpc_version_ = from.rpc_version_;
    }
    if (cached_has_bits & 0x00000010u) {
      encrypted_ = from.encrypted_;
    }
    if (cached_has_bits & 0x00000020u) {
      maxwrappedsize_ = from.maxwrappedsize_;
    }
    if (cached_has_bits & 0x00000040u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BitToUserHandshake::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:exec.user.BitToUserHandshake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BitToUserHandshake::CopyFrom(const BitToUserHandshake& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:exec.user.BitToUserHandshake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BitToUserHandshake::IsInitialized() const {
  return true;
}

void BitToUserHandshake::Swap(BitToUserHandshake* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BitToUserHandshake::InternalSwap(BitToUserHandshake* other) {
  using std::swap;
  authenticationmechanisms_.InternalSwap(CastToBase(&other->authenticationmechanisms_));
  supported_methods_.InternalSwap(&other->supported_methods_);
  errorid_.Swap(&other->errorid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  errormessage_.Swap(&other->errormessage_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(server_infos_, other->server_infos_);
  swap(rpc_version_, other->rpc_version_);
  swap(encrypted_, other->encrypted_);
  swap(maxwrappedsize_, other->maxwrappedsize_);
  swap(status_, other->status_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata BitToUserHandshake::GetMetadata() const {
  protobuf_User_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_User_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LikeFilter::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LikeFilter::kPatternFieldNumber;
const int LikeFilter::kEscapeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LikeFilter::LikeFilter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_User_2eproto::scc_info_LikeFilter.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:exec.user.LikeFilter)
}
LikeFilter::LikeFilter(const LikeFilter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pattern_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pattern()) {
    pattern_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pattern_);
  }
  escape_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_escape()) {
    escape_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.escape_);
  }
  // @@protoc_insertion_point(copy_constructor:exec.user.LikeFilter)
}

void LikeFilter::SharedCtor() {
  pattern_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  escape_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

LikeFilter::~LikeFilter() {
  // @@protoc_insertion_point(destructor:exec.user.LikeFilter)
  SharedDtor();
}

void LikeFilter::SharedDtor() {
  pattern_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  escape_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LikeFilter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LikeFilter::descriptor() {
  ::protobuf_User_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_User_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LikeFilter& LikeFilter::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_User_2eproto::scc_info_LikeFilter.base);
  return *internal_default_instance();
}


void LikeFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:exec.user.LikeFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      pattern_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      escape_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LikeFilter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:exec.user.LikeFilter)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string pattern = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pattern()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pattern().data(), static_cast<int>(this->pattern().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "exec.user.LikeFilter.pattern");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string escape = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_escape()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->escape().data(), static_cast<int>(this->escape().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "exec.user.LikeFilter.escape");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:exec.user.LikeFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:exec.user.LikeFilter)
  return false;
#undef DO_
}

void LikeFilter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:exec.user.LikeFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string pattern = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pattern().data(), static_cast<int>(this->pattern().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.LikeFilter.pattern");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->pattern(), output);
  }

  // optional string escape = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->escape().data(), static_cast<int>(this->escape().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.LikeFilter.escape");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->escape(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:exec.user.LikeFilter)
}

::google::protobuf::uint8* LikeFilter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:exec.user.LikeFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string pattern = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pattern().data(), static_cast<int>(this->pattern().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.LikeFilter.pattern");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->pattern(), target);
  }

  // optional string escape = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->escape().data(), static_cast<int>(this->escape().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.LikeFilter.escape");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->escape(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:exec.user.LikeFilter)
  return target;
}

size_t LikeFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:exec.user.LikeFilter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string pattern = 1;
    if (has_pattern()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pattern());
    }

    // optional string escape = 2;
    if (has_escape()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->escape());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LikeFilter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:exec.user.LikeFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const LikeFilter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LikeFilter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:exec.user.LikeFilter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:exec.user.LikeFilter)
    MergeFrom(*source);
  }
}

void LikeFilter::MergeFrom(const LikeFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:exec.user.LikeFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_pattern();
      pattern_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pattern_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_escape();
      escape_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.escape_);
    }
  }
}

void LikeFilter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:exec.user.LikeFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LikeFilter::CopyFrom(const LikeFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:exec.user.LikeFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LikeFilter::IsInitialized() const {
  return true;
}

void LikeFilter::Swap(LikeFilter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LikeFilter::InternalSwap(LikeFilter* other) {
  using std::swap;
  pattern_.Swap(&other->pattern_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  escape_.Swap(&other->escape_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LikeFilter::GetMetadata() const {
  protobuf_User_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_User_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetCatalogsReq::InitAsDefaultInstance() {
  ::exec::user::_GetCatalogsReq_default_instance_._instance.get_mutable()->catalog_name_filter_ = const_cast< ::exec::user::LikeFilter*>(
      ::exec::user::LikeFilter::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetCatalogsReq::kCatalogNameFilterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetCatalogsReq::GetCatalogsReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_User_2eproto::scc_info_GetCatalogsReq.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:exec.user.GetCatalogsReq)
}
GetCatalogsReq::GetCatalogsReq(const GetCatalogsReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_catalog_name_filter()) {
    catalog_name_filter_ = new ::exec::user::LikeFilter(*from.catalog_name_filter_);
  } else {
    catalog_name_filter_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:exec.user.GetCatalogsReq)
}

void GetCatalogsReq::SharedCtor() {
  catalog_name_filter_ = NULL;
}

GetCatalogsReq::~GetCatalogsReq() {
  // @@protoc_insertion_point(destructor:exec.user.GetCatalogsReq)
  SharedDtor();
}

void GetCatalogsReq::SharedDtor() {
  if (this != internal_default_instance()) delete catalog_name_filter_;
}

void GetCatalogsReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetCatalogsReq::descriptor() {
  ::protobuf_User_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_User_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetCatalogsReq& GetCatalogsReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_User_2eproto::scc_info_GetCatalogsReq.base);
  return *internal_default_instance();
}


void GetCatalogsReq::Clear() {
// @@protoc_insertion_point(message_clear_start:exec.user.GetCatalogsReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(catalog_name_filter_ != NULL);
    catalog_name_filter_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetCatalogsReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:exec.user.GetCatalogsReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .exec.user.LikeFilter catalog_name_filter = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_catalog_name_filter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:exec.user.GetCatalogsReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:exec.user.GetCatalogsReq)
  return false;
#undef DO_
}

void GetCatalogsReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:exec.user.GetCatalogsReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .exec.user.LikeFilter catalog_name_filter = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_catalog_name_filter(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:exec.user.GetCatalogsReq)
}

::google::protobuf::uint8* GetCatalogsReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:exec.user.GetCatalogsReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .exec.user.LikeFilter catalog_name_filter = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_catalog_name_filter(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:exec.user.GetCatalogsReq)
  return target;
}

size_t GetCatalogsReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:exec.user.GetCatalogsReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .exec.user.LikeFilter catalog_name_filter = 1;
  if (has_catalog_name_filter()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *catalog_name_filter_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetCatalogsReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:exec.user.GetCatalogsReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetCatalogsReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetCatalogsReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:exec.user.GetCatalogsReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:exec.user.GetCatalogsReq)
    MergeFrom(*source);
  }
}

void GetCatalogsReq::MergeFrom(const GetCatalogsReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:exec.user.GetCatalogsReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_catalog_name_filter()) {
    mutable_catalog_name_filter()->::exec::user::LikeFilter::MergeFrom(from.catalog_name_filter());
  }
}

void GetCatalogsReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:exec.user.GetCatalogsReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCatalogsReq::CopyFrom(const GetCatalogsReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:exec.user.GetCatalogsReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCatalogsReq::IsInitialized() const {
  return true;
}

void GetCatalogsReq::Swap(GetCatalogsReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetCatalogsReq::InternalSwap(GetCatalogsReq* other) {
  using std::swap;
  swap(catalog_name_filter_, other->catalog_name_filter_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetCatalogsReq::GetMetadata() const {
  protobuf_User_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_User_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CatalogMetadata::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CatalogMetadata::kCatalogNameFieldNumber;
const int CatalogMetadata::kDescriptionFieldNumber;
const int CatalogMetadata::kConnectFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CatalogMetadata::CatalogMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_User_2eproto::scc_info_CatalogMetadata.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:exec.user.CatalogMetadata)
}
CatalogMetadata::CatalogMetadata(const CatalogMetadata& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  catalog_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_catalog_name()) {
    catalog_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.catalog_name_);
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_description()) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  connect_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_connect()) {
    connect_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.connect_);
  }
  // @@protoc_insertion_point(copy_constructor:exec.user.CatalogMetadata)
}

void CatalogMetadata::SharedCtor() {
  catalog_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  connect_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CatalogMetadata::~CatalogMetadata() {
  // @@protoc_insertion_point(destructor:exec.user.CatalogMetadata)
  SharedDtor();
}

void CatalogMetadata::SharedDtor() {
  catalog_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  connect_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CatalogMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CatalogMetadata::descriptor() {
  ::protobuf_User_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_User_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CatalogMetadata& CatalogMetadata::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_User_2eproto::scc_info_CatalogMetadata.base);
  return *internal_default_instance();
}


void CatalogMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:exec.user.CatalogMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      catalog_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      description_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      connect_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CatalogMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:exec.user.CatalogMetadata)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string catalog_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_catalog_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->catalog_name().data(), static_cast<int>(this->catalog_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "exec.user.CatalogMetadata.catalog_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string description = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), static_cast<int>(this->description().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "exec.user.CatalogMetadata.description");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string connect = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_connect()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->connect().data(), static_cast<int>(this->connect().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "exec.user.CatalogMetadata.connect");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:exec.user.CatalogMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:exec.user.CatalogMetadata)
  return false;
#undef DO_
}

void CatalogMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:exec.user.CatalogMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string catalog_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->catalog_name().data(), static_cast<int>(this->catalog_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.CatalogMetadata.catalog_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->catalog_name(), output);
  }

  // optional string description = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.CatalogMetadata.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->description(), output);
  }

  // optional string connect = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->connect().data(), static_cast<int>(this->connect().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.CatalogMetadata.connect");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->connect(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:exec.user.CatalogMetadata)
}

::google::protobuf::uint8* CatalogMetadata::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:exec.user.CatalogMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string catalog_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->catalog_name().data(), static_cast<int>(this->catalog_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.CatalogMetadata.catalog_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->catalog_name(), target);
  }

  // optional string description = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.CatalogMetadata.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->description(), target);
  }

  // optional string connect = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->connect().data(), static_cast<int>(this->connect().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.CatalogMetadata.connect");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->connect(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:exec.user.CatalogMetadata)
  return target;
}

size_t CatalogMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:exec.user.CatalogMetadata)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string catalog_name = 1;
    if (has_catalog_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->catalog_name());
    }

    // optional string description = 2;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional string connect = 3;
    if (has_connect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->connect());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CatalogMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:exec.user.CatalogMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const CatalogMetadata* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CatalogMetadata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:exec.user.CatalogMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:exec.user.CatalogMetadata)
    MergeFrom(*source);
  }
}

void CatalogMetadata::MergeFrom(const CatalogMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:exec.user.CatalogMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_catalog_name();
      catalog_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.catalog_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_description();
      description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_connect();
      connect_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.connect_);
    }
  }
}

void CatalogMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:exec.user.CatalogMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CatalogMetadata::CopyFrom(const CatalogMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:exec.user.CatalogMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CatalogMetadata::IsInitialized() const {
  return true;
}

void CatalogMetadata::Swap(CatalogMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CatalogMetadata::InternalSwap(CatalogMetadata* other) {
  using std::swap;
  catalog_name_.Swap(&other->catalog_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  connect_.Swap(&other->connect_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CatalogMetadata::GetMetadata() const {
  protobuf_User_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_User_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetCatalogsResp::InitAsDefaultInstance() {
  ::exec::user::_GetCatalogsResp_default_instance_._instance.get_mutable()->error_ = const_cast< ::exec::shared::DrillPBError*>(
      ::exec::shared::DrillPBError::internal_default_instance());
}
void GetCatalogsResp::clear_error() {
  if (error_ != NULL) error_->Clear();
  clear_has_error();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetCatalogsResp::kStatusFieldNumber;
const int GetCatalogsResp::kCatalogsFieldNumber;
const int GetCatalogsResp::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetCatalogsResp::GetCatalogsResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_User_2eproto::scc_info_GetCatalogsResp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:exec.user.GetCatalogsResp)
}
GetCatalogsResp::GetCatalogsResp(const GetCatalogsResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      catalogs_(from.catalogs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_error()) {
    error_ = new ::exec::shared::DrillPBError(*from.error_);
  } else {
    error_ = NULL;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:exec.user.GetCatalogsResp)
}

void GetCatalogsResp::SharedCtor() {
  ::memset(&error_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&error_)) + sizeof(status_));
}

GetCatalogsResp::~GetCatalogsResp() {
  // @@protoc_insertion_point(destructor:exec.user.GetCatalogsResp)
  SharedDtor();
}

void GetCatalogsResp::SharedDtor() {
  if (this != internal_default_instance()) delete error_;
}

void GetCatalogsResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetCatalogsResp::descriptor() {
  ::protobuf_User_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_User_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetCatalogsResp& GetCatalogsResp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_User_2eproto::scc_info_GetCatalogsResp.base);
  return *internal_default_instance();
}


void GetCatalogsResp::Clear() {
// @@protoc_insertion_point(message_clear_start:exec.user.GetCatalogsResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  catalogs_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(error_ != NULL);
    error_->Clear();
  }
  status_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetCatalogsResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:exec.user.GetCatalogsResp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .exec.user.RequestStatus status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::exec::user::RequestStatus_IsValid(value)) {
            set_status(static_cast< ::exec::user::RequestStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .exec.user.CatalogMetadata catalogs = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_catalogs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .exec.shared.DrillPBError error = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:exec.user.GetCatalogsResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:exec.user.GetCatalogsResp)
  return false;
#undef DO_
}

void GetCatalogsResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:exec.user.GetCatalogsResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .exec.user.RequestStatus status = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // repeated .exec.user.CatalogMetadata catalogs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->catalogs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->catalogs(static_cast<int>(i)),
      output);
  }

  // optional .exec.shared.DrillPBError error = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_error(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:exec.user.GetCatalogsResp)
}

::google::protobuf::uint8* GetCatalogsResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:exec.user.GetCatalogsResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .exec.user.RequestStatus status = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // repeated .exec.user.CatalogMetadata catalogs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->catalogs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->catalogs(static_cast<int>(i)), deterministic, target);
  }

  // optional .exec.shared.DrillPBError error = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_error(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:exec.user.GetCatalogsResp)
  return target;
}

size_t GetCatalogsResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:exec.user.GetCatalogsResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .exec.user.CatalogMetadata catalogs = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->catalogs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->catalogs(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional .exec.shared.DrillPBError error = 3;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *error_);
    }

    // optional .exec.user.RequestStatus status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetCatalogsResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:exec.user.GetCatalogsResp)
  GOOGLE_DCHECK_NE(&from, this);
  const GetCatalogsResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetCatalogsResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:exec.user.GetCatalogsResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:exec.user.GetCatalogsResp)
    MergeFrom(*source);
  }
}

void GetCatalogsResp::MergeFrom(const GetCatalogsResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:exec.user.GetCatalogsResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  catalogs_.MergeFrom(from.catalogs_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_error()->::exec::shared::DrillPBError::MergeFrom(from.error());
    }
    if (cached_has_bits & 0x00000002u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetCatalogsResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:exec.user.GetCatalogsResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCatalogsResp::CopyFrom(const GetCatalogsResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:exec.user.GetCatalogsResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCatalogsResp::IsInitialized() const {
  return true;
}

void GetCatalogsResp::Swap(GetCatalogsResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetCatalogsResp::InternalSwap(GetCatalogsResp* other) {
  using std::swap;
  CastToBase(&catalogs_)->InternalSwap(CastToBase(&other->catalogs_));
  swap(error_, other->error_);
  swap(status_, other->status_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetCatalogsResp::GetMetadata() const {
  protobuf_User_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_User_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetSchemasReq::InitAsDefaultInstance() {
  ::exec::user::_GetSchemasReq_default_instance_._instance.get_mutable()->catalog_name_filter_ = const_cast< ::exec::user::LikeFilter*>(
      ::exec::user::LikeFilter::internal_default_instance());
  ::exec::user::_GetSchemasReq_default_instance_._instance.get_mutable()->schema_name_filter_ = const_cast< ::exec::user::LikeFilter*>(
      ::exec::user::LikeFilter::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetSchemasReq::kCatalogNameFilterFieldNumber;
const int GetSchemasReq::kSchemaNameFilterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetSchemasReq::GetSchemasReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_User_2eproto::scc_info_GetSchemasReq.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:exec.user.GetSchemasReq)
}
GetSchemasReq::GetSchemasReq(const GetSchemasReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_catalog_name_filter()) {
    catalog_name_filter_ = new ::exec::user::LikeFilter(*from.catalog_name_filter_);
  } else {
    catalog_name_filter_ = NULL;
  }
  if (from.has_schema_name_filter()) {
    schema_name_filter_ = new ::exec::user::LikeFilter(*from.schema_name_filter_);
  } else {
    schema_name_filter_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:exec.user.GetSchemasReq)
}

void GetSchemasReq::SharedCtor() {
  ::memset(&catalog_name_filter_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&schema_name_filter_) -
      reinterpret_cast<char*>(&catalog_name_filter_)) + sizeof(schema_name_filter_));
}

GetSchemasReq::~GetSchemasReq() {
  // @@protoc_insertion_point(destructor:exec.user.GetSchemasReq)
  SharedDtor();
}

void GetSchemasReq::SharedDtor() {
  if (this != internal_default_instance()) delete catalog_name_filter_;
  if (this != internal_default_instance()) delete schema_name_filter_;
}

void GetSchemasReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetSchemasReq::descriptor() {
  ::protobuf_User_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_User_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetSchemasReq& GetSchemasReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_User_2eproto::scc_info_GetSchemasReq.base);
  return *internal_default_instance();
}


void GetSchemasReq::Clear() {
// @@protoc_insertion_point(message_clear_start:exec.user.GetSchemasReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(catalog_name_filter_ != NULL);
      catalog_name_filter_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(schema_name_filter_ != NULL);
      schema_name_filter_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetSchemasReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:exec.user.GetSchemasReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .exec.user.LikeFilter catalog_name_filter = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_catalog_name_filter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .exec.user.LikeFilter schema_name_filter = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_schema_name_filter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:exec.user.GetSchemasReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:exec.user.GetSchemasReq)
  return false;
#undef DO_
}

void GetSchemasReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:exec.user.GetSchemasReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .exec.user.LikeFilter catalog_name_filter = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_catalog_name_filter(), output);
  }

  // optional .exec.user.LikeFilter schema_name_filter = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_schema_name_filter(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:exec.user.GetSchemasReq)
}

::google::protobuf::uint8* GetSchemasReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:exec.user.GetSchemasReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .exec.user.LikeFilter catalog_name_filter = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_catalog_name_filter(), deterministic, target);
  }

  // optional .exec.user.LikeFilter schema_name_filter = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_schema_name_filter(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:exec.user.GetSchemasReq)
  return target;
}

size_t GetSchemasReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:exec.user.GetSchemasReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .exec.user.LikeFilter catalog_name_filter = 1;
    if (has_catalog_name_filter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *catalog_name_filter_);
    }

    // optional .exec.user.LikeFilter schema_name_filter = 2;
    if (has_schema_name_filter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *schema_name_filter_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetSchemasReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:exec.user.GetSchemasReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetSchemasReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetSchemasReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:exec.user.GetSchemasReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:exec.user.GetSchemasReq)
    MergeFrom(*source);
  }
}

void GetSchemasReq::MergeFrom(const GetSchemasReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:exec.user.GetSchemasReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_catalog_name_filter()->::exec::user::LikeFilter::MergeFrom(from.catalog_name_filter());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_schema_name_filter()->::exec::user::LikeFilter::MergeFrom(from.schema_name_filter());
    }
  }
}

void GetSchemasReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:exec.user.GetSchemasReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSchemasReq::CopyFrom(const GetSchemasReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:exec.user.GetSchemasReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSchemasReq::IsInitialized() const {
  return true;
}

void GetSchemasReq::Swap(GetSchemasReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetSchemasReq::InternalSwap(GetSchemasReq* other) {
  using std::swap;
  swap(catalog_name_filter_, other->catalog_name_filter_);
  swap(schema_name_filter_, other->schema_name_filter_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetSchemasReq::GetMetadata() const {
  protobuf_User_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_User_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SchemaMetadata::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SchemaMetadata::kCatalogNameFieldNumber;
const int SchemaMetadata::kSchemaNameFieldNumber;
const int SchemaMetadata::kOwnerFieldNumber;
const int SchemaMetadata::kTypeFieldNumber;
const int SchemaMetadata::kMutableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SchemaMetadata::SchemaMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_User_2eproto::scc_info_SchemaMetadata.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:exec.user.SchemaMetadata)
}
SchemaMetadata::SchemaMetadata(const SchemaMetadata& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  catalog_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_catalog_name()) {
    catalog_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.catalog_name_);
  }
  schema_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_schema_name()) {
    schema_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.schema_name_);
  }
  owner_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_owner()) {
    owner_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.owner_);
  }
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_type()) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  mutable__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_mutable_()) {
    mutable__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mutable__);
  }
  // @@protoc_insertion_point(copy_constructor:exec.user.SchemaMetadata)
}

void SchemaMetadata::SharedCtor() {
  catalog_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  schema_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  owner_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mutable__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SchemaMetadata::~SchemaMetadata() {
  // @@protoc_insertion_point(destructor:exec.user.SchemaMetadata)
  SharedDtor();
}

void SchemaMetadata::SharedDtor() {
  catalog_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  schema_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  owner_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mutable__.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SchemaMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SchemaMetadata::descriptor() {
  ::protobuf_User_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_User_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SchemaMetadata& SchemaMetadata::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_User_2eproto::scc_info_SchemaMetadata.base);
  return *internal_default_instance();
}


void SchemaMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:exec.user.SchemaMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      catalog_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      schema_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      owner_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      type_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      mutable__.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SchemaMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:exec.user.SchemaMetadata)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string catalog_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_catalog_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->catalog_name().data(), static_cast<int>(this->catalog_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "exec.user.SchemaMetadata.catalog_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string schema_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_schema_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->schema_name().data(), static_cast<int>(this->schema_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "exec.user.SchemaMetadata.schema_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string owner = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_owner()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->owner().data(), static_cast<int>(this->owner().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "exec.user.SchemaMetadata.owner");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "exec.user.SchemaMetadata.type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string mutable = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mutable_()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mutable_().data(), static_cast<int>(this->mutable_().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "exec.user.SchemaMetadata.mutable");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:exec.user.SchemaMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:exec.user.SchemaMetadata)
  return false;
#undef DO_
}

void SchemaMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:exec.user.SchemaMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string catalog_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->catalog_name().data(), static_cast<int>(this->catalog_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.SchemaMetadata.catalog_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->catalog_name(), output);
  }

  // optional string schema_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->schema_name().data(), static_cast<int>(this->schema_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.SchemaMetadata.schema_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->schema_name(), output);
  }

  // optional string owner = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->owner().data(), static_cast<int>(this->owner().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.SchemaMetadata.owner");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->owner(), output);
  }

  // optional string type = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.SchemaMetadata.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->type(), output);
  }

  // optional string mutable = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mutable_().data(), static_cast<int>(this->mutable_().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.SchemaMetadata.mutable");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->mutable_(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:exec.user.SchemaMetadata)
}

::google::protobuf::uint8* SchemaMetadata::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:exec.user.SchemaMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string catalog_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->catalog_name().data(), static_cast<int>(this->catalog_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.SchemaMetadata.catalog_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->catalog_name(), target);
  }

  // optional string schema_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->schema_name().data(), static_cast<int>(this->schema_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.SchemaMetadata.schema_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->schema_name(), target);
  }

  // optional string owner = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->owner().data(), static_cast<int>(this->owner().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.SchemaMetadata.owner");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->owner(), target);
  }

  // optional string type = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.SchemaMetadata.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->type(), target);
  }

  // optional string mutable = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mutable_().data(), static_cast<int>(this->mutable_().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.SchemaMetadata.mutable");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->mutable_(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:exec.user.SchemaMetadata)
  return target;
}

size_t SchemaMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:exec.user.SchemaMetadata)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string catalog_name = 1;
    if (has_catalog_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->catalog_name());
    }

    // optional string schema_name = 2;
    if (has_schema_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->schema_name());
    }

    // optional string owner = 3;
    if (has_owner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->owner());
    }

    // optional string type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional string mutable = 5;
    if (has_mutable_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mutable_());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SchemaMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:exec.user.SchemaMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const SchemaMetadata* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SchemaMetadata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:exec.user.SchemaMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:exec.user.SchemaMetadata)
    MergeFrom(*source);
  }
}

void SchemaMetadata::MergeFrom(const SchemaMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:exec.user.SchemaMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_catalog_name();
      catalog_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.catalog_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_schema_name();
      schema_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.schema_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_owner();
      owner_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.owner_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_type();
      type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_mutable_();
      mutable__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mutable__);
    }
  }
}

void SchemaMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:exec.user.SchemaMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SchemaMetadata::CopyFrom(const SchemaMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:exec.user.SchemaMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchemaMetadata::IsInitialized() const {
  return true;
}

void SchemaMetadata::Swap(SchemaMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SchemaMetadata::InternalSwap(SchemaMetadata* other) {
  using std::swap;
  catalog_name_.Swap(&other->catalog_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  schema_name_.Swap(&other->schema_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  owner_.Swap(&other->owner_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  type_.Swap(&other->type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  mutable__.Swap(&other->mutable__, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SchemaMetadata::GetMetadata() const {
  protobuf_User_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_User_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetSchemasResp::InitAsDefaultInstance() {
  ::exec::user::_GetSchemasResp_default_instance_._instance.get_mutable()->error_ = const_cast< ::exec::shared::DrillPBError*>(
      ::exec::shared::DrillPBError::internal_default_instance());
}
void GetSchemasResp::clear_error() {
  if (error_ != NULL) error_->Clear();
  clear_has_error();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetSchemasResp::kStatusFieldNumber;
const int GetSchemasResp::kSchemasFieldNumber;
const int GetSchemasResp::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetSchemasResp::GetSchemasResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_User_2eproto::scc_info_GetSchemasResp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:exec.user.GetSchemasResp)
}
GetSchemasResp::GetSchemasResp(const GetSchemasResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      schemas_(from.schemas_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_error()) {
    error_ = new ::exec::shared::DrillPBError(*from.error_);
  } else {
    error_ = NULL;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:exec.user.GetSchemasResp)
}

void GetSchemasResp::SharedCtor() {
  ::memset(&error_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&error_)) + sizeof(status_));
}

GetSchemasResp::~GetSchemasResp() {
  // @@protoc_insertion_point(destructor:exec.user.GetSchemasResp)
  SharedDtor();
}

void GetSchemasResp::SharedDtor() {
  if (this != internal_default_instance()) delete error_;
}

void GetSchemasResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetSchemasResp::descriptor() {
  ::protobuf_User_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_User_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetSchemasResp& GetSchemasResp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_User_2eproto::scc_info_GetSchemasResp.base);
  return *internal_default_instance();
}


void GetSchemasResp::Clear() {
// @@protoc_insertion_point(message_clear_start:exec.user.GetSchemasResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  schemas_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(error_ != NULL);
    error_->Clear();
  }
  status_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetSchemasResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:exec.user.GetSchemasResp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .exec.user.RequestStatus status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::exec::user::RequestStatus_IsValid(value)) {
            set_status(static_cast< ::exec::user::RequestStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .exec.user.SchemaMetadata schemas = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_schemas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .exec.shared.DrillPBError error = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:exec.user.GetSchemasResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:exec.user.GetSchemasResp)
  return false;
#undef DO_
}

void GetSchemasResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:exec.user.GetSchemasResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .exec.user.RequestStatus status = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // repeated .exec.user.SchemaMetadata schemas = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->schemas_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->schemas(static_cast<int>(i)),
      output);
  }

  // optional .exec.shared.DrillPBError error = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_error(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:exec.user.GetSchemasResp)
}

::google::protobuf::uint8* GetSchemasResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:exec.user.GetSchemasResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .exec.user.RequestStatus status = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // repeated .exec.user.SchemaMetadata schemas = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->schemas_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->schemas(static_cast<int>(i)), deterministic, target);
  }

  // optional .exec.shared.DrillPBError error = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_error(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:exec.user.GetSchemasResp)
  return target;
}

size_t GetSchemasResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:exec.user.GetSchemasResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .exec.user.SchemaMetadata schemas = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->schemas_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->schemas(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional .exec.shared.DrillPBError error = 3;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *error_);
    }

    // optional .exec.user.RequestStatus status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetSchemasResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:exec.user.GetSchemasResp)
  GOOGLE_DCHECK_NE(&from, this);
  const GetSchemasResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetSchemasResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:exec.user.GetSchemasResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:exec.user.GetSchemasResp)
    MergeFrom(*source);
  }
}

void GetSchemasResp::MergeFrom(const GetSchemasResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:exec.user.GetSchemasResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  schemas_.MergeFrom(from.schemas_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_error()->::exec::shared::DrillPBError::MergeFrom(from.error());
    }
    if (cached_has_bits & 0x00000002u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetSchemasResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:exec.user.GetSchemasResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSchemasResp::CopyFrom(const GetSchemasResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:exec.user.GetSchemasResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSchemasResp::IsInitialized() const {
  return true;
}

void GetSchemasResp::Swap(GetSchemasResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetSchemasResp::InternalSwap(GetSchemasResp* other) {
  using std::swap;
  CastToBase(&schemas_)->InternalSwap(CastToBase(&other->schemas_));
  swap(error_, other->error_);
  swap(status_, other->status_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetSchemasResp::GetMetadata() const {
  protobuf_User_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_User_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetTablesReq::InitAsDefaultInstance() {
  ::exec::user::_GetTablesReq_default_instance_._instance.get_mutable()->catalog_name_filter_ = const_cast< ::exec::user::LikeFilter*>(
      ::exec::user::LikeFilter::internal_default_instance());
  ::exec::user::_GetTablesReq_default_instance_._instance.get_mutable()->schema_name_filter_ = const_cast< ::exec::user::LikeFilter*>(
      ::exec::user::LikeFilter::internal_default_instance());
  ::exec::user::_GetTablesReq_default_instance_._instance.get_mutable()->table_name_filter_ = const_cast< ::exec::user::LikeFilter*>(
      ::exec::user::LikeFilter::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetTablesReq::kCatalogNameFilterFieldNumber;
const int GetTablesReq::kSchemaNameFilterFieldNumber;
const int GetTablesReq::kTableNameFilterFieldNumber;
const int GetTablesReq::kTableTypeFilterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetTablesReq::GetTablesReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_User_2eproto::scc_info_GetTablesReq.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:exec.user.GetTablesReq)
}
GetTablesReq::GetTablesReq(const GetTablesReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      table_type_filter_(from.table_type_filter_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_catalog_name_filter()) {
    catalog_name_filter_ = new ::exec::user::LikeFilter(*from.catalog_name_filter_);
  } else {
    catalog_name_filter_ = NULL;
  }
  if (from.has_schema_name_filter()) {
    schema_name_filter_ = new ::exec::user::LikeFilter(*from.schema_name_filter_);
  } else {
    schema_name_filter_ = NULL;
  }
  if (from.has_table_name_filter()) {
    table_name_filter_ = new ::exec::user::LikeFilter(*from.table_name_filter_);
  } else {
    table_name_filter_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:exec.user.GetTablesReq)
}

void GetTablesReq::SharedCtor() {
  ::memset(&catalog_name_filter_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&table_name_filter_) -
      reinterpret_cast<char*>(&catalog_name_filter_)) + sizeof(table_name_filter_));
}

GetTablesReq::~GetTablesReq() {
  // @@protoc_insertion_point(destructor:exec.user.GetTablesReq)
  SharedDtor();
}

void GetTablesReq::SharedDtor() {
  if (this != internal_default_instance()) delete catalog_name_filter_;
  if (this != internal_default_instance()) delete schema_name_filter_;
  if (this != internal_default_instance()) delete table_name_filter_;
}

void GetTablesReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetTablesReq::descriptor() {
  ::protobuf_User_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_User_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetTablesReq& GetTablesReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_User_2eproto::scc_info_GetTablesReq.base);
  return *internal_default_instance();
}


void GetTablesReq::Clear() {
// @@protoc_insertion_point(message_clear_start:exec.user.GetTablesReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  table_type_filter_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(catalog_name_filter_ != NULL);
      catalog_name_filter_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(schema_name_filter_ != NULL);
      schema_name_filter_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(table_name_filter_ != NULL);
      table_name_filter_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetTablesReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:exec.user.GetTablesReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .exec.user.LikeFilter catalog_name_filter = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_catalog_name_filter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .exec.user.LikeFilter schema_name_filter = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_schema_name_filter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .exec.user.LikeFilter table_name_filter = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_table_name_filter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string table_type_filter = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_table_type_filter()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->table_type_filter(this->table_type_filter_size() - 1).data(),
            static_cast<int>(this->table_type_filter(this->table_type_filter_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "exec.user.GetTablesReq.table_type_filter");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:exec.user.GetTablesReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:exec.user.GetTablesReq)
  return false;
#undef DO_
}

void GetTablesReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:exec.user.GetTablesReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .exec.user.LikeFilter catalog_name_filter = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_catalog_name_filter(), output);
  }

  // optional .exec.user.LikeFilter schema_name_filter = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_schema_name_filter(), output);
  }

  // optional .exec.user.LikeFilter table_name_filter = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_table_name_filter(), output);
  }

  // repeated string table_type_filter = 4;
  for (int i = 0, n = this->table_type_filter_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->table_type_filter(i).data(), static_cast<int>(this->table_type_filter(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.GetTablesReq.table_type_filter");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->table_type_filter(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:exec.user.GetTablesReq)
}

::google::protobuf::uint8* GetTablesReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:exec.user.GetTablesReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .exec.user.LikeFilter catalog_name_filter = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_catalog_name_filter(), deterministic, target);
  }

  // optional .exec.user.LikeFilter schema_name_filter = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_schema_name_filter(), deterministic, target);
  }

  // optional .exec.user.LikeFilter table_name_filter = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_table_name_filter(), deterministic, target);
  }

  // repeated string table_type_filter = 4;
  for (int i = 0, n = this->table_type_filter_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->table_type_filter(i).data(), static_cast<int>(this->table_type_filter(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.GetTablesReq.table_type_filter");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->table_type_filter(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:exec.user.GetTablesReq)
  return target;
}

size_t GetTablesReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:exec.user.GetTablesReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string table_type_filter = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->table_type_filter_size());
  for (int i = 0, n = this->table_type_filter_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->table_type_filter(i));
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional .exec.user.LikeFilter catalog_name_filter = 1;
    if (has_catalog_name_filter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *catalog_name_filter_);
    }

    // optional .exec.user.LikeFilter schema_name_filter = 2;
    if (has_schema_name_filter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *schema_name_filter_);
    }

    // optional .exec.user.LikeFilter table_name_filter = 3;
    if (has_table_name_filter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *table_name_filter_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetTablesReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:exec.user.GetTablesReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTablesReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetTablesReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:exec.user.GetTablesReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:exec.user.GetTablesReq)
    MergeFrom(*source);
  }
}

void GetTablesReq::MergeFrom(const GetTablesReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:exec.user.GetTablesReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  table_type_filter_.MergeFrom(from.table_type_filter_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_catalog_name_filter()->::exec::user::LikeFilter::MergeFrom(from.catalog_name_filter());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_schema_name_filter()->::exec::user::LikeFilter::MergeFrom(from.schema_name_filter());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_table_name_filter()->::exec::user::LikeFilter::MergeFrom(from.table_name_filter());
    }
  }
}

void GetTablesReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:exec.user.GetTablesReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTablesReq::CopyFrom(const GetTablesReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:exec.user.GetTablesReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTablesReq::IsInitialized() const {
  return true;
}

void GetTablesReq::Swap(GetTablesReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetTablesReq::InternalSwap(GetTablesReq* other) {
  using std::swap;
  table_type_filter_.InternalSwap(CastToBase(&other->table_type_filter_));
  swap(catalog_name_filter_, other->catalog_name_filter_);
  swap(schema_name_filter_, other->schema_name_filter_);
  swap(table_name_filter_, other->table_name_filter_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetTablesReq::GetMetadata() const {
  protobuf_User_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_User_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TableMetadata::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TableMetadata::kCatalogNameFieldNumber;
const int TableMetadata::kSchemaNameFieldNumber;
const int TableMetadata::kTableNameFieldNumber;
const int TableMetadata::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TableMetadata::TableMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_User_2eproto::scc_info_TableMetadata.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:exec.user.TableMetadata)
}
TableMetadata::TableMetadata(const TableMetadata& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  catalog_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_catalog_name()) {
    catalog_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.catalog_name_);
  }
  schema_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_schema_name()) {
    schema_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.schema_name_);
  }
  table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_table_name()) {
    table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_name_);
  }
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_type()) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  // @@protoc_insertion_point(copy_constructor:exec.user.TableMetadata)
}

void TableMetadata::SharedCtor() {
  catalog_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  schema_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

TableMetadata::~TableMetadata() {
  // @@protoc_insertion_point(destructor:exec.user.TableMetadata)
  SharedDtor();
}

void TableMetadata::SharedDtor() {
  catalog_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  schema_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TableMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TableMetadata::descriptor() {
  ::protobuf_User_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_User_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TableMetadata& TableMetadata::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_User_2eproto::scc_info_TableMetadata.base);
  return *internal_default_instance();
}


void TableMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:exec.user.TableMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      catalog_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      schema_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      table_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      type_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TableMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:exec.user.TableMetadata)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string catalog_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_catalog_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->catalog_name().data(), static_cast<int>(this->catalog_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "exec.user.TableMetadata.catalog_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string schema_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_schema_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->schema_name().data(), static_cast<int>(this->schema_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "exec.user.TableMetadata.schema_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string table_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->table_name().data(), static_cast<int>(this->table_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "exec.user.TableMetadata.table_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "exec.user.TableMetadata.type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:exec.user.TableMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:exec.user.TableMetadata)
  return false;
#undef DO_
}

void TableMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:exec.user.TableMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string catalog_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->catalog_name().data(), static_cast<int>(this->catalog_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.TableMetadata.catalog_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->catalog_name(), output);
  }

  // optional string schema_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->schema_name().data(), static_cast<int>(this->schema_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.TableMetadata.schema_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->schema_name(), output);
  }

  // optional string table_name = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->table_name().data(), static_cast<int>(this->table_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.TableMetadata.table_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->table_name(), output);
  }

  // optional string type = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.TableMetadata.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:exec.user.TableMetadata)
}

::google::protobuf::uint8* TableMetadata::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:exec.user.TableMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string catalog_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->catalog_name().data(), static_cast<int>(this->catalog_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.TableMetadata.catalog_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->catalog_name(), target);
  }

  // optional string schema_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->schema_name().data(), static_cast<int>(this->schema_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.TableMetadata.schema_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->schema_name(), target);
  }

  // optional string table_name = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->table_name().data(), static_cast<int>(this->table_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.TableMetadata.table_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->table_name(), target);
  }

  // optional string type = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.TableMetadata.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:exec.user.TableMetadata)
  return target;
}

size_t TableMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:exec.user.TableMetadata)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string catalog_name = 1;
    if (has_catalog_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->catalog_name());
    }

    // optional string schema_name = 2;
    if (has_schema_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->schema_name());
    }

    // optional string table_name = 3;
    if (has_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->table_name());
    }

    // optional string type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TableMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:exec.user.TableMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const TableMetadata* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TableMetadata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:exec.user.TableMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:exec.user.TableMetadata)
    MergeFrom(*source);
  }
}

void TableMetadata::MergeFrom(const TableMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:exec.user.TableMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_catalog_name();
      catalog_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.catalog_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_schema_name();
      schema_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.schema_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_table_name();
      table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_name_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_type();
      type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
  }
}

void TableMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:exec.user.TableMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableMetadata::CopyFrom(const TableMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:exec.user.TableMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableMetadata::IsInitialized() const {
  return true;
}

void TableMetadata::Swap(TableMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TableMetadata::InternalSwap(TableMetadata* other) {
  using std::swap;
  catalog_name_.Swap(&other->catalog_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  schema_name_.Swap(&other->schema_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  table_name_.Swap(&other->table_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  type_.Swap(&other->type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TableMetadata::GetMetadata() const {
  protobuf_User_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_User_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetTablesResp::InitAsDefaultInstance() {
  ::exec::user::_GetTablesResp_default_instance_._instance.get_mutable()->error_ = const_cast< ::exec::shared::DrillPBError*>(
      ::exec::shared::DrillPBError::internal_default_instance());
}
void GetTablesResp::clear_error() {
  if (error_ != NULL) error_->Clear();
  clear_has_error();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetTablesResp::kStatusFieldNumber;
const int GetTablesResp::kTablesFieldNumber;
const int GetTablesResp::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetTablesResp::GetTablesResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_User_2eproto::scc_info_GetTablesResp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:exec.user.GetTablesResp)
}
GetTablesResp::GetTablesResp(const GetTablesResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      tables_(from.tables_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_error()) {
    error_ = new ::exec::shared::DrillPBError(*from.error_);
  } else {
    error_ = NULL;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:exec.user.GetTablesResp)
}

void GetTablesResp::SharedCtor() {
  ::memset(&error_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&error_)) + sizeof(status_));
}

GetTablesResp::~GetTablesResp() {
  // @@protoc_insertion_point(destructor:exec.user.GetTablesResp)
  SharedDtor();
}

void GetTablesResp::SharedDtor() {
  if (this != internal_default_instance()) delete error_;
}

void GetTablesResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetTablesResp::descriptor() {
  ::protobuf_User_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_User_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetTablesResp& GetTablesResp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_User_2eproto::scc_info_GetTablesResp.base);
  return *internal_default_instance();
}


void GetTablesResp::Clear() {
// @@protoc_insertion_point(message_clear_start:exec.user.GetTablesResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tables_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(error_ != NULL);
    error_->Clear();
  }
  status_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetTablesResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:exec.user.GetTablesResp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .exec.user.RequestStatus status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::exec::user::RequestStatus_IsValid(value)) {
            set_status(static_cast< ::exec::user::RequestStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .exec.user.TableMetadata tables = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_tables()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .exec.shared.DrillPBError error = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:exec.user.GetTablesResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:exec.user.GetTablesResp)
  return false;
#undef DO_
}

void GetTablesResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:exec.user.GetTablesResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .exec.user.RequestStatus status = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // repeated .exec.user.TableMetadata tables = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tables_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->tables(static_cast<int>(i)),
      output);
  }

  // optional .exec.shared.DrillPBError error = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_error(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:exec.user.GetTablesResp)
}

::google::protobuf::uint8* GetTablesResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:exec.user.GetTablesResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .exec.user.RequestStatus status = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // repeated .exec.user.TableMetadata tables = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tables_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->tables(static_cast<int>(i)), deterministic, target);
  }

  // optional .exec.shared.DrillPBError error = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_error(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:exec.user.GetTablesResp)
  return target;
}

size_t GetTablesResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:exec.user.GetTablesResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .exec.user.TableMetadata tables = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->tables_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->tables(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional .exec.shared.DrillPBError error = 3;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *error_);
    }

    // optional .exec.user.RequestStatus status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetTablesResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:exec.user.GetTablesResp)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTablesResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetTablesResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:exec.user.GetTablesResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:exec.user.GetTablesResp)
    MergeFrom(*source);
  }
}

void GetTablesResp::MergeFrom(const GetTablesResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:exec.user.GetTablesResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tables_.MergeFrom(from.tables_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_error()->::exec::shared::DrillPBError::MergeFrom(from.error());
    }
    if (cached_has_bits & 0x00000002u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetTablesResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:exec.user.GetTablesResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTablesResp::CopyFrom(const GetTablesResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:exec.user.GetTablesResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTablesResp::IsInitialized() const {
  return true;
}

void GetTablesResp::Swap(GetTablesResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetTablesResp::InternalSwap(GetTablesResp* other) {
  using std::swap;
  CastToBase(&tables_)->InternalSwap(CastToBase(&other->tables_));
  swap(error_, other->error_);
  swap(status_, other->status_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetTablesResp::GetMetadata() const {
  protobuf_User_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_User_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetColumnsReq::InitAsDefaultInstance() {
  ::exec::user::_GetColumnsReq_default_instance_._instance.get_mutable()->catalog_name_filter_ = const_cast< ::exec::user::LikeFilter*>(
      ::exec::user::LikeFilter::internal_default_instance());
  ::exec::user::_GetColumnsReq_default_instance_._instance.get_mutable()->schema_name_filter_ = const_cast< ::exec::user::LikeFilter*>(
      ::exec::user::LikeFilter::internal_default_instance());
  ::exec::user::_GetColumnsReq_default_instance_._instance.get_mutable()->table_name_filter_ = const_cast< ::exec::user::LikeFilter*>(
      ::exec::user::LikeFilter::internal_default_instance());
  ::exec::user::_GetColumnsReq_default_instance_._instance.get_mutable()->column_name_filter_ = const_cast< ::exec::user::LikeFilter*>(
      ::exec::user::LikeFilter::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetColumnsReq::kCatalogNameFilterFieldNumber;
const int GetColumnsReq::kSchemaNameFilterFieldNumber;
const int GetColumnsReq::kTableNameFilterFieldNumber;
const int GetColumnsReq::kColumnNameFilterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetColumnsReq::GetColumnsReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_User_2eproto::scc_info_GetColumnsReq.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:exec.user.GetColumnsReq)
}
GetColumnsReq::GetColumnsReq(const GetColumnsReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_catalog_name_filter()) {
    catalog_name_filter_ = new ::exec::user::LikeFilter(*from.catalog_name_filter_);
  } else {
    catalog_name_filter_ = NULL;
  }
  if (from.has_schema_name_filter()) {
    schema_name_filter_ = new ::exec::user::LikeFilter(*from.schema_name_filter_);
  } else {
    schema_name_filter_ = NULL;
  }
  if (from.has_table_name_filter()) {
    table_name_filter_ = new ::exec::user::LikeFilter(*from.table_name_filter_);
  } else {
    table_name_filter_ = NULL;
  }
  if (from.has_column_name_filter()) {
    column_name_filter_ = new ::exec::user::LikeFilter(*from.column_name_filter_);
  } else {
    column_name_filter_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:exec.user.GetColumnsReq)
}

void GetColumnsReq::SharedCtor() {
  ::memset(&catalog_name_filter_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&column_name_filter_) -
      reinterpret_cast<char*>(&catalog_name_filter_)) + sizeof(column_name_filter_));
}

GetColumnsReq::~GetColumnsReq() {
  // @@protoc_insertion_point(destructor:exec.user.GetColumnsReq)
  SharedDtor();
}

void GetColumnsReq::SharedDtor() {
  if (this != internal_default_instance()) delete catalog_name_filter_;
  if (this != internal_default_instance()) delete schema_name_filter_;
  if (this != internal_default_instance()) delete table_name_filter_;
  if (this != internal_default_instance()) delete column_name_filter_;
}

void GetColumnsReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetColumnsReq::descriptor() {
  ::protobuf_User_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_User_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetColumnsReq& GetColumnsReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_User_2eproto::scc_info_GetColumnsReq.base);
  return *internal_default_instance();
}


void GetColumnsReq::Clear() {
// @@protoc_insertion_point(message_clear_start:exec.user.GetColumnsReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(catalog_name_filter_ != NULL);
      catalog_name_filter_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(schema_name_filter_ != NULL);
      schema_name_filter_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(table_name_filter_ != NULL);
      table_name_filter_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(column_name_filter_ != NULL);
      column_name_filter_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetColumnsReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:exec.user.GetColumnsReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .exec.user.LikeFilter catalog_name_filter = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_catalog_name_filter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .exec.user.LikeFilter schema_name_filter = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_schema_name_filter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .exec.user.LikeFilter table_name_filter = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_table_name_filter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .exec.user.LikeFilter column_name_filter = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_column_name_filter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:exec.user.GetColumnsReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:exec.user.GetColumnsReq)
  return false;
#undef DO_
}

void GetColumnsReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:exec.user.GetColumnsReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .exec.user.LikeFilter catalog_name_filter = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_catalog_name_filter(), output);
  }

  // optional .exec.user.LikeFilter schema_name_filter = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_schema_name_filter(), output);
  }

  // optional .exec.user.LikeFilter table_name_filter = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_table_name_filter(), output);
  }

  // optional .exec.user.LikeFilter column_name_filter = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_column_name_filter(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:exec.user.GetColumnsReq)
}

::google::protobuf::uint8* GetColumnsReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:exec.user.GetColumnsReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .exec.user.LikeFilter catalog_name_filter = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_catalog_name_filter(), deterministic, target);
  }

  // optional .exec.user.LikeFilter schema_name_filter = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_schema_name_filter(), deterministic, target);
  }

  // optional .exec.user.LikeFilter table_name_filter = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_table_name_filter(), deterministic, target);
  }

  // optional .exec.user.LikeFilter column_name_filter = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_column_name_filter(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:exec.user.GetColumnsReq)
  return target;
}

size_t GetColumnsReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:exec.user.GetColumnsReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional .exec.user.LikeFilter catalog_name_filter = 1;
    if (has_catalog_name_filter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *catalog_name_filter_);
    }

    // optional .exec.user.LikeFilter schema_name_filter = 2;
    if (has_schema_name_filter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *schema_name_filter_);
    }

    // optional .exec.user.LikeFilter table_name_filter = 3;
    if (has_table_name_filter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *table_name_filter_);
    }

    // optional .exec.user.LikeFilter column_name_filter = 4;
    if (has_column_name_filter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *column_name_filter_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetColumnsReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:exec.user.GetColumnsReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetColumnsReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetColumnsReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:exec.user.GetColumnsReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:exec.user.GetColumnsReq)
    MergeFrom(*source);
  }
}

void GetColumnsReq::MergeFrom(const GetColumnsReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:exec.user.GetColumnsReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_catalog_name_filter()->::exec::user::LikeFilter::MergeFrom(from.catalog_name_filter());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_schema_name_filter()->::exec::user::LikeFilter::MergeFrom(from.schema_name_filter());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_table_name_filter()->::exec::user::LikeFilter::MergeFrom(from.table_name_filter());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_column_name_filter()->::exec::user::LikeFilter::MergeFrom(from.column_name_filter());
    }
  }
}

void GetColumnsReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:exec.user.GetColumnsReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetColumnsReq::CopyFrom(const GetColumnsReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:exec.user.GetColumnsReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetColumnsReq::IsInitialized() const {
  return true;
}

void GetColumnsReq::Swap(GetColumnsReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetColumnsReq::InternalSwap(GetColumnsReq* other) {
  using std::swap;
  swap(catalog_name_filter_, other->catalog_name_filter_);
  swap(schema_name_filter_, other->schema_name_filter_);
  swap(table_name_filter_, other->table_name_filter_);
  swap(column_name_filter_, other->column_name_filter_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetColumnsReq::GetMetadata() const {
  protobuf_User_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_User_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ColumnMetadata::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ColumnMetadata::kCatalogNameFieldNumber;
const int ColumnMetadata::kSchemaNameFieldNumber;
const int ColumnMetadata::kTableNameFieldNumber;
const int ColumnMetadata::kColumnNameFieldNumber;
const int ColumnMetadata::kOrdinalPositionFieldNumber;
const int ColumnMetadata::kDefaultValueFieldNumber;
const int ColumnMetadata::kIsNullableFieldNumber;
const int ColumnMetadata::kDataTypeFieldNumber;
const int ColumnMetadata::kCharMaxLengthFieldNumber;
const int ColumnMetadata::kCharOctetLengthFieldNumber;
const int ColumnMetadata::kNumericPrecisionFieldNumber;
const int ColumnMetadata::kNumericPrecisionRadixFieldNumber;
const int ColumnMetadata::kNumericScaleFieldNumber;
const int ColumnMetadata::kDateTimePrecisionFieldNumber;
const int ColumnMetadata::kIntervalTypeFieldNumber;
const int ColumnMetadata::kIntervalPrecisionFieldNumber;
const int ColumnMetadata::kColumnSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ColumnMetadata::ColumnMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_User_2eproto::scc_info_ColumnMetadata.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:exec.user.ColumnMetadata)
}
ColumnMetadata::ColumnMetadata(const ColumnMetadata& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  catalog_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_catalog_name()) {
    catalog_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.catalog_name_);
  }
  schema_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_schema_name()) {
    schema_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.schema_name_);
  }
  table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_table_name()) {
    table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_name_);
  }
  column_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_column_name()) {
    column_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.column_name_);
  }
  default_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_default_value()) {
    default_value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.default_value_);
  }
  data_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data_type()) {
    data_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_type_);
  }
  interval_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_interval_type()) {
    interval_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.interval_type_);
  }
  ::memcpy(&ordinal_position_, &from.ordinal_position_,
    static_cast<size_t>(reinterpret_cast<char*>(&column_size_) -
    reinterpret_cast<char*>(&ordinal_position_)) + sizeof(column_size_));
  // @@protoc_insertion_point(copy_constructor:exec.user.ColumnMetadata)
}

void ColumnMetadata::SharedCtor() {
  catalog_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  schema_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  column_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  default_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  interval_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ordinal_position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&column_size_) -
      reinterpret_cast<char*>(&ordinal_position_)) + sizeof(column_size_));
}

ColumnMetadata::~ColumnMetadata() {
  // @@protoc_insertion_point(destructor:exec.user.ColumnMetadata)
  SharedDtor();
}

void ColumnMetadata::SharedDtor() {
  catalog_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  schema_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  column_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  default_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  interval_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ColumnMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ColumnMetadata::descriptor() {
  ::protobuf_User_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_User_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ColumnMetadata& ColumnMetadata::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_User_2eproto::scc_info_ColumnMetadata.base);
  return *internal_default_instance();
}


void ColumnMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:exec.user.ColumnMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      catalog_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      schema_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      table_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      column_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      default_value_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      data_type_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000040u) {
      interval_type_.ClearNonDefaultToEmptyNoArena();
    }
  }
  ordinal_position_ = 0;
  if (cached_has_bits & 65280u) {
    ::memset(&is_nullable_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&interval_precision_) -
        reinterpret_cast<char*>(&is_nullable_)) + sizeof(interval_precision_));
  }
  column_size_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ColumnMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:exec.user.ColumnMetadata)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string catalog_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_catalog_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->catalog_name().data(), static_cast<int>(this->catalog_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "exec.user.ColumnMetadata.catalog_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string schema_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_schema_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->schema_name().data(), static_cast<int>(this->schema_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "exec.user.ColumnMetadata.schema_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string table_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->table_name().data(), static_cast<int>(this->table_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "exec.user.ColumnMetadata.table_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string column_name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_column_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->column_name().data(), static_cast<int>(this->column_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "exec.user.ColumnMetadata.column_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ordinal_position = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_ordinal_position();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ordinal_position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string default_value = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_default_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->default_value().data(), static_cast<int>(this->default_value().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "exec.user.ColumnMetadata.default_value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_nullable = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_is_nullable();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_nullable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string data_type = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->data_type().data(), static_cast<int>(this->data_type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "exec.user.ColumnMetadata.data_type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 char_max_length = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_char_max_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &char_max_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 char_octet_length = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_char_octet_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &char_octet_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 numeric_precision = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_numeric_precision();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numeric_precision_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 numeric_precision_radix = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_numeric_precision_radix();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numeric_precision_radix_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 numeric_scale = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_numeric_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numeric_scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 date_time_precision = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_date_time_precision();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &date_time_precision_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string interval_type = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_interval_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->interval_type().data(), static_cast<int>(this->interval_type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "exec.user.ColumnMetadata.interval_type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 interval_precision = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_interval_precision();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &interval_precision_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 column_size = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_column_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &column_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:exec.user.ColumnMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:exec.user.ColumnMetadata)
  return false;
#undef DO_
}

void ColumnMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:exec.user.ColumnMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string catalog_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->catalog_name().data(), static_cast<int>(this->catalog_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.ColumnMetadata.catalog_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->catalog_name(), output);
  }

  // optional string schema_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->schema_name().data(), static_cast<int>(this->schema_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.ColumnMetadata.schema_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->schema_name(), output);
  }

  // optional string table_name = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->table_name().data(), static_cast<int>(this->table_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.ColumnMetadata.table_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->table_name(), output);
  }

  // optional string column_name = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->column_name().data(), static_cast<int>(this->column_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.ColumnMetadata.column_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->column_name(), output);
  }

  // optional int32 ordinal_position = 5;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ordinal_position(), output);
  }

  // optional string default_value = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->default_value().data(), static_cast<int>(this->default_value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.ColumnMetadata.default_value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->default_value(), output);
  }

  // optional bool is_nullable = 7;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_nullable(), output);
  }

  // optional string data_type = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data_type().data(), static_cast<int>(this->data_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.ColumnMetadata.data_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->data_type(), output);
  }

  // optional int32 char_max_length = 9;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->char_max_length(), output);
  }

  // optional int32 char_octet_length = 10;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->char_octet_length(), output);
  }

  // optional int32 numeric_precision = 11;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->numeric_precision(), output);
  }

  // optional int32 numeric_precision_radix = 12;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->numeric_precision_radix(), output);
  }

  // optional int32 numeric_scale = 13;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->numeric_scale(), output);
  }

  // optional int32 date_time_precision = 14;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->date_time_precision(), output);
  }

  // optional string interval_type = 15;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->interval_type().data(), static_cast<int>(this->interval_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.ColumnMetadata.interval_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->interval_type(), output);
  }

  // optional int32 interval_precision = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->interval_precision(), output);
  }

  // optional int32 column_size = 17;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->column_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:exec.user.ColumnMetadata)
}

::google::protobuf::uint8* ColumnMetadata::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:exec.user.ColumnMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string catalog_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->catalog_name().data(), static_cast<int>(this->catalog_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.ColumnMetadata.catalog_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->catalog_name(), target);
  }

  // optional string schema_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->schema_name().data(), static_cast<int>(this->schema_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.ColumnMetadata.schema_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->schema_name(), target);
  }

  // optional string table_name = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->table_name().data(), static_cast<int>(this->table_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.ColumnMetadata.table_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->table_name(), target);
  }

  // optional string column_name = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->column_name().data(), static_cast<int>(this->column_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.ColumnMetadata.column_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->column_name(), target);
  }

  // optional int32 ordinal_position = 5;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ordinal_position(), target);
  }

  // optional string default_value = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->default_value().data(), static_cast<int>(this->default_value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.ColumnMetadata.default_value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->default_value(), target);
  }

  // optional bool is_nullable = 7;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_nullable(), target);
  }

  // optional string data_type = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data_type().data(), static_cast<int>(this->data_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.ColumnMetadata.data_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->data_type(), target);
  }

  // optional int32 char_max_length = 9;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->char_max_length(), target);
  }

  // optional int32 char_octet_length = 10;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->char_octet_length(), target);
  }

  // optional int32 numeric_precision = 11;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->numeric_precision(), target);
  }

  // optional int32 numeric_precision_radix = 12;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->numeric_precision_radix(), target);
  }

  // optional int32 numeric_scale = 13;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->numeric_scale(), target);
  }

  // optional int32 date_time_precision = 14;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->date_time_precision(), target);
  }

  // optional string interval_type = 15;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->interval_type().data(), static_cast<int>(this->interval_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.ColumnMetadata.interval_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->interval_type(), target);
  }

  // optional int32 interval_precision = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->interval_precision(), target);
  }

  // optional int32 column_size = 17;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->column_size(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:exec.user.ColumnMetadata)
  return target;
}

size_t ColumnMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:exec.user.ColumnMetadata)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string catalog_name = 1;
    if (has_catalog_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->catalog_name());
    }

    // optional string schema_name = 2;
    if (has_schema_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->schema_name());
    }

    // optional string table_name = 3;
    if (has_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->table_name());
    }

    // optional string column_name = 4;
    if (has_column_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->column_name());
    }

    // optional string default_value = 6;
    if (has_default_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->default_value());
    }

    // optional string data_type = 8;
    if (has_data_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data_type());
    }

    // optional string interval_type = 15;
    if (has_interval_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->interval_type());
    }

    // optional int32 ordinal_position = 5;
    if (has_ordinal_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ordinal_position());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional bool is_nullable = 7;
    if (has_is_nullable()) {
      total_size += 1 + 1;
    }

    // optional int32 char_max_length = 9;
    if (has_char_max_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->char_max_length());
    }

    // optional int32 char_octet_length = 10;
    if (has_char_octet_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->char_octet_length());
    }

    // optional int32 numeric_precision = 11;
    if (has_numeric_precision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numeric_precision());
    }

    // optional int32 numeric_precision_radix = 12;
    if (has_numeric_precision_radix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numeric_precision_radix());
    }

    // optional int32 numeric_scale = 13;
    if (has_numeric_scale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numeric_scale());
    }

    // optional int32 date_time_precision = 14;
    if (has_date_time_precision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->date_time_precision());
    }

    // optional int32 interval_precision = 16;
    if (has_interval_precision()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->interval_precision());
    }

  }
  // optional int32 column_size = 17;
  if (has_column_size()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->column_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ColumnMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:exec.user.ColumnMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const ColumnMetadata* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ColumnMetadata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:exec.user.ColumnMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:exec.user.ColumnMetadata)
    MergeFrom(*source);
  }
}

void ColumnMetadata::MergeFrom(const ColumnMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:exec.user.ColumnMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_catalog_name();
      catalog_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.catalog_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_schema_name();
      schema_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.schema_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_table_name();
      table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_name_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_column_name();
      column_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.column_name_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_default_value();
      default_value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.default_value_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_data_type();
      data_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_type_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_interval_type();
      interval_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.interval_type_);
    }
    if (cached_has_bits & 0x00000080u) {
      ordinal_position_ = from.ordinal_position_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      is_nullable_ = from.is_nullable_;
    }
    if (cached_has_bits & 0x00000200u) {
      char_max_length_ = from.char_max_length_;
    }
    if (cached_has_bits & 0x00000400u) {
      char_octet_length_ = from.char_octet_length_;
    }
    if (cached_has_bits & 0x00000800u) {
      numeric_precision_ = from.numeric_precision_;
    }
    if (cached_has_bits & 0x00001000u) {
      numeric_precision_radix_ = from.numeric_precision_radix_;
    }
    if (cached_has_bits & 0x00002000u) {
      numeric_scale_ = from.numeric_scale_;
    }
    if (cached_has_bits & 0x00004000u) {
      date_time_precision_ = from.date_time_precision_;
    }
    if (cached_has_bits & 0x00008000u) {
      interval_precision_ = from.interval_precision_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    set_column_size(from.column_size());
  }
}

void ColumnMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:exec.user.ColumnMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ColumnMetadata::CopyFrom(const ColumnMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:exec.user.ColumnMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColumnMetadata::IsInitialized() const {
  return true;
}

void ColumnMetadata::Swap(ColumnMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ColumnMetadata::InternalSwap(ColumnMetadata* other) {
  using std::swap;
  catalog_name_.Swap(&other->catalog_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  schema_name_.Swap(&other->schema_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  table_name_.Swap(&other->table_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  column_name_.Swap(&other->column_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  default_value_.Swap(&other->default_value_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  data_type_.Swap(&other->data_type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  interval_type_.Swap(&other->interval_type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ordinal_position_, other->ordinal_position_);
  swap(is_nullable_, other->is_nullable_);
  swap(char_max_length_, other->char_max_length_);
  swap(char_octet_length_, other->char_octet_length_);
  swap(numeric_precision_, other->numeric_precision_);
  swap(numeric_precision_radix_, other->numeric_precision_radix_);
  swap(numeric_scale_, other->numeric_scale_);
  swap(date_time_precision_, other->date_time_precision_);
  swap(interval_precision_, other->interval_precision_);
  swap(column_size_, other->column_size_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ColumnMetadata::GetMetadata() const {
  protobuf_User_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_User_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetColumnsResp::InitAsDefaultInstance() {
  ::exec::user::_GetColumnsResp_default_instance_._instance.get_mutable()->error_ = const_cast< ::exec::shared::DrillPBError*>(
      ::exec::shared::DrillPBError::internal_default_instance());
}
void GetColumnsResp::clear_error() {
  if (error_ != NULL) error_->Clear();
  clear_has_error();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetColumnsResp::kStatusFieldNumber;
const int GetColumnsResp::kColumnsFieldNumber;
const int GetColumnsResp::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetColumnsResp::GetColumnsResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_User_2eproto::scc_info_GetColumnsResp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:exec.user.GetColumnsResp)
}
GetColumnsResp::GetColumnsResp(const GetColumnsResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      columns_(from.columns_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_error()) {
    error_ = new ::exec::shared::DrillPBError(*from.error_);
  } else {
    error_ = NULL;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:exec.user.GetColumnsResp)
}

void GetColumnsResp::SharedCtor() {
  ::memset(&error_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&error_)) + sizeof(status_));
}

GetColumnsResp::~GetColumnsResp() {
  // @@protoc_insertion_point(destructor:exec.user.GetColumnsResp)
  SharedDtor();
}

void GetColumnsResp::SharedDtor() {
  if (this != internal_default_instance()) delete error_;
}

void GetColumnsResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetColumnsResp::descriptor() {
  ::protobuf_User_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_User_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetColumnsResp& GetColumnsResp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_User_2eproto::scc_info_GetColumnsResp.base);
  return *internal_default_instance();
}


void GetColumnsResp::Clear() {
// @@protoc_insertion_point(message_clear_start:exec.user.GetColumnsResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  columns_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(error_ != NULL);
    error_->Clear();
  }
  status_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetColumnsResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:exec.user.GetColumnsResp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .exec.user.RequestStatus status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::exec::user::RequestStatus_IsValid(value)) {
            set_status(static_cast< ::exec::user::RequestStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .exec.user.ColumnMetadata columns = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_columns()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .exec.shared.DrillPBError error = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:exec.user.GetColumnsResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:exec.user.GetColumnsResp)
  return false;
#undef DO_
}

void GetColumnsResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:exec.user.GetColumnsResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .exec.user.RequestStatus status = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // repeated .exec.user.ColumnMetadata columns = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->columns_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->columns(static_cast<int>(i)),
      output);
  }

  // optional .exec.shared.DrillPBError error = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_error(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:exec.user.GetColumnsResp)
}

::google::protobuf::uint8* GetColumnsResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:exec.user.GetColumnsResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .exec.user.RequestStatus status = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // repeated .exec.user.ColumnMetadata columns = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->columns_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->columns(static_cast<int>(i)), deterministic, target);
  }

  // optional .exec.shared.DrillPBError error = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_error(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:exec.user.GetColumnsResp)
  return target;
}

size_t GetColumnsResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:exec.user.GetColumnsResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .exec.user.ColumnMetadata columns = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->columns_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->columns(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional .exec.shared.DrillPBError error = 3;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *error_);
    }

    // optional .exec.user.RequestStatus status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetColumnsResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:exec.user.GetColumnsResp)
  GOOGLE_DCHECK_NE(&from, this);
  const GetColumnsResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetColumnsResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:exec.user.GetColumnsResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:exec.user.GetColumnsResp)
    MergeFrom(*source);
  }
}

void GetColumnsResp::MergeFrom(const GetColumnsResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:exec.user.GetColumnsResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  columns_.MergeFrom(from.columns_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_error()->::exec::shared::DrillPBError::MergeFrom(from.error());
    }
    if (cached_has_bits & 0x00000002u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetColumnsResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:exec.user.GetColumnsResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetColumnsResp::CopyFrom(const GetColumnsResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:exec.user.GetColumnsResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetColumnsResp::IsInitialized() const {
  return true;
}

void GetColumnsResp::Swap(GetColumnsResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetColumnsResp::InternalSwap(GetColumnsResp* other) {
  using std::swap;
  CastToBase(&columns_)->InternalSwap(CastToBase(&other->columns_));
  swap(error_, other->error_);
  swap(status_, other->status_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetColumnsResp::GetMetadata() const {
  protobuf_User_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_User_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CreatePreparedStatementReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreatePreparedStatementReq::kSqlQueryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreatePreparedStatementReq::CreatePreparedStatementReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_User_2eproto::scc_info_CreatePreparedStatementReq.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:exec.user.CreatePreparedStatementReq)
}
CreatePreparedStatementReq::CreatePreparedStatementReq(const CreatePreparedStatementReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sql_query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sql_query()) {
    sql_query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sql_query_);
  }
  // @@protoc_insertion_point(copy_constructor:exec.user.CreatePreparedStatementReq)
}

void CreatePreparedStatementReq::SharedCtor() {
  sql_query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CreatePreparedStatementReq::~CreatePreparedStatementReq() {
  // @@protoc_insertion_point(destructor:exec.user.CreatePreparedStatementReq)
  SharedDtor();
}

void CreatePreparedStatementReq::SharedDtor() {
  sql_query_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CreatePreparedStatementReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CreatePreparedStatementReq::descriptor() {
  ::protobuf_User_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_User_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CreatePreparedStatementReq& CreatePreparedStatementReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_User_2eproto::scc_info_CreatePreparedStatementReq.base);
  return *internal_default_instance();
}


void CreatePreparedStatementReq::Clear() {
// @@protoc_insertion_point(message_clear_start:exec.user.CreatePreparedStatementReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    sql_query_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CreatePreparedStatementReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:exec.user.CreatePreparedStatementReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string sql_query = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sql_query()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sql_query().data(), static_cast<int>(this->sql_query().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "exec.user.CreatePreparedStatementReq.sql_query");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:exec.user.CreatePreparedStatementReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:exec.user.CreatePreparedStatementReq)
  return false;
#undef DO_
}

void CreatePreparedStatementReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:exec.user.CreatePreparedStatementReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string sql_query = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sql_query().data(), static_cast<int>(this->sql_query().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.CreatePreparedStatementReq.sql_query");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sql_query(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:exec.user.CreatePreparedStatementReq)
}

::google::protobuf::uint8* CreatePreparedStatementReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:exec.user.CreatePreparedStatementReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string sql_query = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sql_query().data(), static_cast<int>(this->sql_query().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.CreatePreparedStatementReq.sql_query");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sql_query(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:exec.user.CreatePreparedStatementReq)
  return target;
}

size_t CreatePreparedStatementReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:exec.user.CreatePreparedStatementReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional string sql_query = 1;
  if (has_sql_query()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sql_query());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreatePreparedStatementReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:exec.user.CreatePreparedStatementReq)
  GOOGLE_DCHECK_NE(&from, this);
  const CreatePreparedStatementReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreatePreparedStatementReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:exec.user.CreatePreparedStatementReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:exec.user.CreatePreparedStatementReq)
    MergeFrom(*source);
  }
}

void CreatePreparedStatementReq::MergeFrom(const CreatePreparedStatementReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:exec.user.CreatePreparedStatementReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_sql_query()) {
    set_has_sql_query();
    sql_query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sql_query_);
  }
}

void CreatePreparedStatementReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:exec.user.CreatePreparedStatementReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreatePreparedStatementReq::CopyFrom(const CreatePreparedStatementReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:exec.user.CreatePreparedStatementReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreatePreparedStatementReq::IsInitialized() const {
  return true;
}

void CreatePreparedStatementReq::Swap(CreatePreparedStatementReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreatePreparedStatementReq::InternalSwap(CreatePreparedStatementReq* other) {
  using std::swap;
  sql_query_.Swap(&other->sql_query_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CreatePreparedStatementReq::GetMetadata() const {
  protobuf_User_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_User_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ResultColumnMetadata::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResultColumnMetadata::kCatalogNameFieldNumber;
const int ResultColumnMetadata::kSchemaNameFieldNumber;
const int ResultColumnMetadata::kTableNameFieldNumber;
const int ResultColumnMetadata::kColumnNameFieldNumber;
const int ResultColumnMetadata::kLabelFieldNumber;
const int ResultColumnMetadata::kDataTypeFieldNumber;
const int ResultColumnMetadata::kIsNullableFieldNumber;
const int ResultColumnMetadata::kPrecisionFieldNumber;
const int ResultColumnMetadata::kScaleFieldNumber;
const int ResultColumnMetadata::kSignedFieldNumber;
const int ResultColumnMetadata::kDisplaySizeFieldNumber;
const int ResultColumnMetadata::kIsAliasedFieldNumber;
const int ResultColumnMetadata::kSearchabilityFieldNumber;
const int ResultColumnMetadata::kUpdatabilityFieldNumber;
const int ResultColumnMetadata::kAutoIncrementFieldNumber;
const int ResultColumnMetadata::kCaseSensitivityFieldNumber;
const int ResultColumnMetadata::kSortableFieldNumber;
const int ResultColumnMetadata::kClassNameFieldNumber;
const int ResultColumnMetadata::kIsCurrencyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResultColumnMetadata::ResultColumnMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_User_2eproto::scc_info_ResultColumnMetadata.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:exec.user.ResultColumnMetadata)
}
ResultColumnMetadata::ResultColumnMetadata(const ResultColumnMetadata& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  catalog_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_catalog_name()) {
    catalog_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.catalog_name_);
  }
  schema_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_schema_name()) {
    schema_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.schema_name_);
  }
  table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_table_name()) {
    table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_name_);
  }
  column_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_column_name()) {
    column_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.column_name_);
  }
  label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_label()) {
    label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.label_);
  }
  data_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data_type()) {
    data_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_type_);
  }
  class_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_class_name()) {
    class_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.class_name_);
  }
  ::memcpy(&precision_, &from.precision_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_currency_) -
    reinterpret_cast<char*>(&precision_)) + sizeof(is_currency_));
  // @@protoc_insertion_point(copy_constructor:exec.user.ResultColumnMetadata)
}

void ResultColumnMetadata::SharedCtor() {
  catalog_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  schema_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  column_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  class_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&precision_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_currency_) -
      reinterpret_cast<char*>(&precision_)) + sizeof(is_currency_));
}

ResultColumnMetadata::~ResultColumnMetadata() {
  // @@protoc_insertion_point(destructor:exec.user.ResultColumnMetadata)
  SharedDtor();
}

void ResultColumnMetadata::SharedDtor() {
  catalog_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  schema_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  column_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  label_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  class_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ResultColumnMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ResultColumnMetadata::descriptor() {
  ::protobuf_User_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_User_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResultColumnMetadata& ResultColumnMetadata::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_User_2eproto::scc_info_ResultColumnMetadata.base);
  return *internal_default_instance();
}


void ResultColumnMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:exec.user.ResultColumnMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      catalog_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      schema_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      table_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      column_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      label_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      data_type_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000040u) {
      class_name_.ClearNonDefaultToEmptyNoArena();
    }
  }
  precision_ = 0;
  if (cached_has_bits & 65280u) {
    ::memset(&scale_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&updatability_) -
        reinterpret_cast<char*>(&scale_)) + sizeof(updatability_));
  }
  if (cached_has_bits & 458752u) {
    ::memset(&case_sensitivity_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_currency_) -
        reinterpret_cast<char*>(&case_sensitivity_)) + sizeof(is_currency_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ResultColumnMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:exec.user.ResultColumnMetadata)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string catalog_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_catalog_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->catalog_name().data(), static_cast<int>(this->catalog_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "exec.user.ResultColumnMetadata.catalog_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string schema_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_schema_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->schema_name().data(), static_cast<int>(this->schema_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "exec.user.ResultColumnMetadata.schema_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string table_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->table_name().data(), static_cast<int>(this->table_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "exec.user.ResultColumnMetadata.table_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string column_name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_column_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->column_name().data(), static_cast<int>(this->column_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "exec.user.ResultColumnMetadata.column_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string label = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->label().data(), static_cast<int>(this->label().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "exec.user.ResultColumnMetadata.label");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string data_type = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->data_type().data(), static_cast<int>(this->data_type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "exec.user.ResultColumnMetadata.data_type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_nullable = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_is_nullable();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_nullable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 precision = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_precision();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &precision_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 scale = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool signed = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_signed_();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &signed__)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 display_size = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_display_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &display_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_aliased = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_is_aliased();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_aliased_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .exec.user.ColumnSearchability searchability = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::exec::user::ColumnSearchability_IsValid(value)) {
            set_searchability(static_cast< ::exec::user::ColumnSearchability >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                13, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .exec.user.ColumnUpdatability updatability = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::exec::user::ColumnUpdatability_IsValid(value)) {
            set_updatability(static_cast< ::exec::user::ColumnUpdatability >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                14, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool auto_increment = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_auto_increment();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &auto_increment_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool case_sensitivity = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_case_sensitivity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &case_sensitivity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool sortable = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_sortable();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sortable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string class_name = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_class_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->class_name().data(), static_cast<int>(this->class_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "exec.user.ResultColumnMetadata.class_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_currency = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_is_currency();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_currency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:exec.user.ResultColumnMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:exec.user.ResultColumnMetadata)
  return false;
#undef DO_
}

void ResultColumnMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:exec.user.ResultColumnMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string catalog_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->catalog_name().data(), static_cast<int>(this->catalog_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.ResultColumnMetadata.catalog_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->catalog_name(), output);
  }

  // optional string schema_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->schema_name().data(), static_cast<int>(this->schema_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.ResultColumnMetadata.schema_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->schema_name(), output);
  }

  // optional string table_name = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->table_name().data(), static_cast<int>(this->table_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.ResultColumnMetadata.table_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->table_name(), output);
  }

  // optional string column_name = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->column_name().data(), static_cast<int>(this->column_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.ResultColumnMetadata.column_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->column_name(), output);
  }

  // optional string label = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label().data(), static_cast<int>(this->label().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.ResultColumnMetadata.label");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->label(), output);
  }

  // optional string data_type = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data_type().data(), static_cast<int>(this->data_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.ResultColumnMetadata.data_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->data_type(), output);
  }

  // optional bool is_nullable = 7;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_nullable(), output);
  }

  // optional int32 precision = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->precision(), output);
  }

  // optional int32 scale = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->scale(), output);
  }

  // optional bool signed = 10;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->signed_(), output);
  }

  // optional int32 display_size = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->display_size(), output);
  }

  // optional bool is_aliased = 12;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->is_aliased(), output);
  }

  // optional .exec.user.ColumnSearchability searchability = 13;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->searchability(), output);
  }

  // optional .exec.user.ColumnUpdatability updatability = 14;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->updatability(), output);
  }

  // optional bool auto_increment = 15;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->auto_increment(), output);
  }

  // optional bool case_sensitivity = 16;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->case_sensitivity(), output);
  }

  // optional bool sortable = 17;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->sortable(), output);
  }

  // optional string class_name = 18;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->class_name().data(), static_cast<int>(this->class_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.ResultColumnMetadata.class_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->class_name(), output);
  }

  // optional bool is_currency = 20;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->is_currency(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:exec.user.ResultColumnMetadata)
}

::google::protobuf::uint8* ResultColumnMetadata::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:exec.user.ResultColumnMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string catalog_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->catalog_name().data(), static_cast<int>(this->catalog_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.ResultColumnMetadata.catalog_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->catalog_name(), target);
  }

  // optional string schema_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->schema_name().data(), static_cast<int>(this->schema_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.ResultColumnMetadata.schema_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->schema_name(), target);
  }

  // optional string table_name = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->table_name().data(), static_cast<int>(this->table_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.ResultColumnMetadata.table_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->table_name(), target);
  }

  // optional string column_name = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->column_name().data(), static_cast<int>(this->column_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.ResultColumnMetadata.column_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->column_name(), target);
  }

  // optional string label = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label().data(), static_cast<int>(this->label().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.ResultColumnMetadata.label");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->label(), target);
  }

  // optional string data_type = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data_type().data(), static_cast<int>(this->data_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.ResultColumnMetadata.data_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->data_type(), target);
  }

  // optional bool is_nullable = 7;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_nullable(), target);
  }

  // optional int32 precision = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->precision(), target);
  }

  // optional int32 scale = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->scale(), target);
  }

  // optional bool signed = 10;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->signed_(), target);
  }

  // optional int32 display_size = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->display_size(), target);
  }

  // optional bool is_aliased = 12;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->is_aliased(), target);
  }

  // optional .exec.user.ColumnSearchability searchability = 13;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->searchability(), target);
  }

  // optional .exec.user.ColumnUpdatability updatability = 14;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->updatability(), target);
  }

  // optional bool auto_increment = 15;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->auto_increment(), target);
  }

  // optional bool case_sensitivity = 16;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->case_sensitivity(), target);
  }

  // optional bool sortable = 17;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->sortable(), target);
  }

  // optional string class_name = 18;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->class_name().data(), static_cast<int>(this->class_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.ResultColumnMetadata.class_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->class_name(), target);
  }

  // optional bool is_currency = 20;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->is_currency(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:exec.user.ResultColumnMetadata)
  return target;
}

size_t ResultColumnMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:exec.user.ResultColumnMetadata)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string catalog_name = 1;
    if (has_catalog_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->catalog_name());
    }

    // optional string schema_name = 2;
    if (has_schema_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->schema_name());
    }

    // optional string table_name = 3;
    if (has_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->table_name());
    }

    // optional string column_name = 4;
    if (has_column_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->column_name());
    }

    // optional string label = 5;
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->label());
    }

    // optional string data_type = 6;
    if (has_data_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data_type());
    }

    // optional string class_name = 18;
    if (has_class_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->class_name());
    }

    // optional int32 precision = 8;
    if (has_precision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->precision());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional int32 scale = 9;
    if (has_scale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scale());
    }

    // optional int32 display_size = 11;
    if (has_display_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->display_size());
    }

    // optional bool is_nullable = 7;
    if (has_is_nullable()) {
      total_size += 1 + 1;
    }

    // optional bool signed = 10;
    if (has_signed_()) {
      total_size += 1 + 1;
    }

    // optional bool is_aliased = 12;
    if (has_is_aliased()) {
      total_size += 1 + 1;
    }

    // optional bool auto_increment = 15;
    if (has_auto_increment()) {
      total_size += 1 + 1;
    }

    // optional .exec.user.ColumnSearchability searchability = 13;
    if (has_searchability()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->searchability());
    }

    // optional .exec.user.ColumnUpdatability updatability = 14;
    if (has_updatability()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->updatability());
    }

  }
  if (_has_bits_[16 / 32] & 458752u) {
    // optional bool case_sensitivity = 16;
    if (has_case_sensitivity()) {
      total_size += 2 + 1;
    }

    // optional bool sortable = 17;
    if (has_sortable()) {
      total_size += 2 + 1;
    }

    // optional bool is_currency = 20;
    if (has_is_currency()) {
      total_size += 2 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResultColumnMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:exec.user.ResultColumnMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const ResultColumnMetadata* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResultColumnMetadata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:exec.user.ResultColumnMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:exec.user.ResultColumnMetadata)
    MergeFrom(*source);
  }
}

void ResultColumnMetadata::MergeFrom(const ResultColumnMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:exec.user.ResultColumnMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_catalog_name();
      catalog_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.catalog_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_schema_name();
      schema_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.schema_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_table_name();
      table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_name_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_column_name();
      column_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.column_name_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_label();
      label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.label_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_data_type();
      data_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_type_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_class_name();
      class_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.class_name_);
    }
    if (cached_has_bits & 0x00000080u) {
      precision_ = from.precision_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      scale_ = from.scale_;
    }
    if (cached_has_bits & 0x00000200u) {
      display_size_ = from.display_size_;
    }
    if (cached_has_bits & 0x00000400u) {
      is_nullable_ = from.is_nullable_;
    }
    if (cached_has_bits & 0x00000800u) {
      signed__ = from.signed__;
    }
    if (cached_has_bits & 0x00001000u) {
      is_aliased_ = from.is_aliased_;
    }
    if (cached_has_bits & 0x00002000u) {
      auto_increment_ = from.auto_increment_;
    }
    if (cached_has_bits & 0x00004000u) {
      searchability_ = from.searchability_;
    }
    if (cached_has_bits & 0x00008000u) {
      updatability_ = from.updatability_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 458752u) {
    if (cached_has_bits & 0x00010000u) {
      case_sensitivity_ = from.case_sensitivity_;
    }
    if (cached_has_bits & 0x00020000u) {
      sortable_ = from.sortable_;
    }
    if (cached_has_bits & 0x00040000u) {
      is_currency_ = from.is_currency_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ResultColumnMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:exec.user.ResultColumnMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResultColumnMetadata::CopyFrom(const ResultColumnMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:exec.user.ResultColumnMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResultColumnMetadata::IsInitialized() const {
  return true;
}

void ResultColumnMetadata::Swap(ResultColumnMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResultColumnMetadata::InternalSwap(ResultColumnMetadata* other) {
  using std::swap;
  catalog_name_.Swap(&other->catalog_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  schema_name_.Swap(&other->schema_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  table_name_.Swap(&other->table_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  column_name_.Swap(&other->column_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  label_.Swap(&other->label_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  data_type_.Swap(&other->data_type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  class_name_.Swap(&other->class_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(precision_, other->precision_);
  swap(scale_, other->scale_);
  swap(display_size_, other->display_size_);
  swap(is_nullable_, other->is_nullable_);
  swap(signed__, other->signed__);
  swap(is_aliased_, other->is_aliased_);
  swap(auto_increment_, other->auto_increment_);
  swap(searchability_, other->searchability_);
  swap(updatability_, other->updatability_);
  swap(case_sensitivity_, other->case_sensitivity_);
  swap(sortable_, other->sortable_);
  swap(is_currency_, other->is_currency_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ResultColumnMetadata::GetMetadata() const {
  protobuf_User_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_User_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PreparedStatementHandle::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PreparedStatementHandle::kServerInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PreparedStatementHandle::PreparedStatementHandle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_User_2eproto::scc_info_PreparedStatementHandle.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:exec.user.PreparedStatementHandle)
}
PreparedStatementHandle::PreparedStatementHandle(const PreparedStatementHandle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  server_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_server_info()) {
    server_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_info_);
  }
  // @@protoc_insertion_point(copy_constructor:exec.user.PreparedStatementHandle)
}

void PreparedStatementHandle::SharedCtor() {
  server_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PreparedStatementHandle::~PreparedStatementHandle() {
  // @@protoc_insertion_point(destructor:exec.user.PreparedStatementHandle)
  SharedDtor();
}

void PreparedStatementHandle::SharedDtor() {
  server_info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PreparedStatementHandle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PreparedStatementHandle::descriptor() {
  ::protobuf_User_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_User_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PreparedStatementHandle& PreparedStatementHandle::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_User_2eproto::scc_info_PreparedStatementHandle.base);
  return *internal_default_instance();
}


void PreparedStatementHandle::Clear() {
// @@protoc_insertion_point(message_clear_start:exec.user.PreparedStatementHandle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    server_info_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PreparedStatementHandle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:exec.user.PreparedStatementHandle)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes server_info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_server_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:exec.user.PreparedStatementHandle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:exec.user.PreparedStatementHandle)
  return false;
#undef DO_
}

void PreparedStatementHandle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:exec.user.PreparedStatementHandle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes server_info = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->server_info(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:exec.user.PreparedStatementHandle)
}

::google::protobuf::uint8* PreparedStatementHandle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:exec.user.PreparedStatementHandle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes server_info = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->server_info(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:exec.user.PreparedStatementHandle)
  return target;
}

size_t PreparedStatementHandle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:exec.user.PreparedStatementHandle)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional bytes server_info = 1;
  if (has_server_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->server_info());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PreparedStatementHandle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:exec.user.PreparedStatementHandle)
  GOOGLE_DCHECK_NE(&from, this);
  const PreparedStatementHandle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PreparedStatementHandle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:exec.user.PreparedStatementHandle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:exec.user.PreparedStatementHandle)
    MergeFrom(*source);
  }
}

void PreparedStatementHandle::MergeFrom(const PreparedStatementHandle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:exec.user.PreparedStatementHandle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_server_info()) {
    set_has_server_info();
    server_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_info_);
  }
}

void PreparedStatementHandle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:exec.user.PreparedStatementHandle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PreparedStatementHandle::CopyFrom(const PreparedStatementHandle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:exec.user.PreparedStatementHandle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PreparedStatementHandle::IsInitialized() const {
  return true;
}

void PreparedStatementHandle::Swap(PreparedStatementHandle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PreparedStatementHandle::InternalSwap(PreparedStatementHandle* other) {
  using std::swap;
  server_info_.Swap(&other->server_info_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PreparedStatementHandle::GetMetadata() const {
  protobuf_User_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_User_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PreparedStatement::InitAsDefaultInstance() {
  ::exec::user::_PreparedStatement_default_instance_._instance.get_mutable()->server_handle_ = const_cast< ::exec::user::PreparedStatementHandle*>(
      ::exec::user::PreparedStatementHandle::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PreparedStatement::kColumnsFieldNumber;
const int PreparedStatement::kServerHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PreparedStatement::PreparedStatement()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_User_2eproto::scc_info_PreparedStatement.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:exec.user.PreparedStatement)
}
PreparedStatement::PreparedStatement(const PreparedStatement& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      columns_(from.columns_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_server_handle()) {
    server_handle_ = new ::exec::user::PreparedStatementHandle(*from.server_handle_);
  } else {
    server_handle_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:exec.user.PreparedStatement)
}

void PreparedStatement::SharedCtor() {
  server_handle_ = NULL;
}

PreparedStatement::~PreparedStatement() {
  // @@protoc_insertion_point(destructor:exec.user.PreparedStatement)
  SharedDtor();
}

void PreparedStatement::SharedDtor() {
  if (this != internal_default_instance()) delete server_handle_;
}

void PreparedStatement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PreparedStatement::descriptor() {
  ::protobuf_User_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_User_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PreparedStatement& PreparedStatement::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_User_2eproto::scc_info_PreparedStatement.base);
  return *internal_default_instance();
}


void PreparedStatement::Clear() {
// @@protoc_insertion_point(message_clear_start:exec.user.PreparedStatement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  columns_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(server_handle_ != NULL);
    server_handle_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PreparedStatement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:exec.user.PreparedStatement)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .exec.user.ResultColumnMetadata columns = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_columns()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .exec.user.PreparedStatementHandle server_handle = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_server_handle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:exec.user.PreparedStatement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:exec.user.PreparedStatement)
  return false;
#undef DO_
}

void PreparedStatement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:exec.user.PreparedStatement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .exec.user.ResultColumnMetadata columns = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->columns_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->columns(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .exec.user.PreparedStatementHandle server_handle = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_server_handle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:exec.user.PreparedStatement)
}

::google::protobuf::uint8* PreparedStatement::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:exec.user.PreparedStatement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .exec.user.ResultColumnMetadata columns = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->columns_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->columns(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .exec.user.PreparedStatementHandle server_handle = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_server_handle(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:exec.user.PreparedStatement)
  return target;
}

size_t PreparedStatement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:exec.user.PreparedStatement)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .exec.user.ResultColumnMetadata columns = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->columns_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->columns(static_cast<int>(i)));
    }
  }

  // optional .exec.user.PreparedStatementHandle server_handle = 2;
  if (has_server_handle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *server_handle_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PreparedStatement::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:exec.user.PreparedStatement)
  GOOGLE_DCHECK_NE(&from, this);
  const PreparedStatement* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PreparedStatement>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:exec.user.PreparedStatement)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:exec.user.PreparedStatement)
    MergeFrom(*source);
  }
}

void PreparedStatement::MergeFrom(const PreparedStatement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:exec.user.PreparedStatement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  columns_.MergeFrom(from.columns_);
  if (from.has_server_handle()) {
    mutable_server_handle()->::exec::user::PreparedStatementHandle::MergeFrom(from.server_handle());
  }
}

void PreparedStatement::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:exec.user.PreparedStatement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PreparedStatement::CopyFrom(const PreparedStatement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:exec.user.PreparedStatement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PreparedStatement::IsInitialized() const {
  return true;
}

void PreparedStatement::Swap(PreparedStatement* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PreparedStatement::InternalSwap(PreparedStatement* other) {
  using std::swap;
  CastToBase(&columns_)->InternalSwap(CastToBase(&other->columns_));
  swap(server_handle_, other->server_handle_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PreparedStatement::GetMetadata() const {
  protobuf_User_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_User_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CreatePreparedStatementResp::InitAsDefaultInstance() {
  ::exec::user::_CreatePreparedStatementResp_default_instance_._instance.get_mutable()->prepared_statement_ = const_cast< ::exec::user::PreparedStatement*>(
      ::exec::user::PreparedStatement::internal_default_instance());
  ::exec::user::_CreatePreparedStatementResp_default_instance_._instance.get_mutable()->error_ = const_cast< ::exec::shared::DrillPBError*>(
      ::exec::shared::DrillPBError::internal_default_instance());
}
void CreatePreparedStatementResp::clear_error() {
  if (error_ != NULL) error_->Clear();
  clear_has_error();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreatePreparedStatementResp::kStatusFieldNumber;
const int CreatePreparedStatementResp::kPreparedStatementFieldNumber;
const int CreatePreparedStatementResp::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreatePreparedStatementResp::CreatePreparedStatementResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_User_2eproto::scc_info_CreatePreparedStatementResp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:exec.user.CreatePreparedStatementResp)
}
CreatePreparedStatementResp::CreatePreparedStatementResp(const CreatePreparedStatementResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_prepared_statement()) {
    prepared_statement_ = new ::exec::user::PreparedStatement(*from.prepared_statement_);
  } else {
    prepared_statement_ = NULL;
  }
  if (from.has_error()) {
    error_ = new ::exec::shared::DrillPBError(*from.error_);
  } else {
    error_ = NULL;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:exec.user.CreatePreparedStatementResp)
}

void CreatePreparedStatementResp::SharedCtor() {
  ::memset(&prepared_statement_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&prepared_statement_)) + sizeof(status_));
}

CreatePreparedStatementResp::~CreatePreparedStatementResp() {
  // @@protoc_insertion_point(destructor:exec.user.CreatePreparedStatementResp)
  SharedDtor();
}

void CreatePreparedStatementResp::SharedDtor() {
  if (this != internal_default_instance()) delete prepared_statement_;
  if (this != internal_default_instance()) delete error_;
}

void CreatePreparedStatementResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CreatePreparedStatementResp::descriptor() {
  ::protobuf_User_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_User_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CreatePreparedStatementResp& CreatePreparedStatementResp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_User_2eproto::scc_info_CreatePreparedStatementResp.base);
  return *internal_default_instance();
}


void CreatePreparedStatementResp::Clear() {
// @@protoc_insertion_point(message_clear_start:exec.user.CreatePreparedStatementResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(prepared_statement_ != NULL);
      prepared_statement_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(error_ != NULL);
      error_->Clear();
    }
  }
  status_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CreatePreparedStatementResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:exec.user.CreatePreparedStatementResp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .exec.user.RequestStatus status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::exec::user::RequestStatus_IsValid(value)) {
            set_status(static_cast< ::exec::user::RequestStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .exec.user.PreparedStatement prepared_statement = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_prepared_statement()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .exec.shared.DrillPBError error = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:exec.user.CreatePreparedStatementResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:exec.user.CreatePreparedStatementResp)
  return false;
#undef DO_
}

void CreatePreparedStatementResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:exec.user.CreatePreparedStatementResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .exec.user.RequestStatus status = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // optional .exec.user.PreparedStatement prepared_statement = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_prepared_statement(), output);
  }

  // optional .exec.shared.DrillPBError error = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_error(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:exec.user.CreatePreparedStatementResp)
}

::google::protobuf::uint8* CreatePreparedStatementResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:exec.user.CreatePreparedStatementResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .exec.user.RequestStatus status = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // optional .exec.user.PreparedStatement prepared_statement = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_prepared_statement(), deterministic, target);
  }

  // optional .exec.shared.DrillPBError error = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_error(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:exec.user.CreatePreparedStatementResp)
  return target;
}

size_t CreatePreparedStatementResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:exec.user.CreatePreparedStatementResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .exec.user.PreparedStatement prepared_statement = 2;
    if (has_prepared_statement()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *prepared_statement_);
    }

    // optional .exec.shared.DrillPBError error = 3;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *error_);
    }

    // optional .exec.user.RequestStatus status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreatePreparedStatementResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:exec.user.CreatePreparedStatementResp)
  GOOGLE_DCHECK_NE(&from, this);
  const CreatePreparedStatementResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreatePreparedStatementResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:exec.user.CreatePreparedStatementResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:exec.user.CreatePreparedStatementResp)
    MergeFrom(*source);
  }
}

void CreatePreparedStatementResp::MergeFrom(const CreatePreparedStatementResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:exec.user.CreatePreparedStatementResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_prepared_statement()->::exec::user::PreparedStatement::MergeFrom(from.prepared_statement());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_error()->::exec::shared::DrillPBError::MergeFrom(from.error());
    }
    if (cached_has_bits & 0x00000004u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CreatePreparedStatementResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:exec.user.CreatePreparedStatementResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreatePreparedStatementResp::CopyFrom(const CreatePreparedStatementResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:exec.user.CreatePreparedStatementResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreatePreparedStatementResp::IsInitialized() const {
  return true;
}

void CreatePreparedStatementResp::Swap(CreatePreparedStatementResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreatePreparedStatementResp::InternalSwap(CreatePreparedStatementResp* other) {
  using std::swap;
  swap(prepared_statement_, other->prepared_statement_);
  swap(error_, other->error_);
  swap(status_, other->status_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CreatePreparedStatementResp::GetMetadata() const {
  protobuf_User_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_User_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetServerMetaReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetServerMetaReq::GetServerMetaReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_User_2eproto::scc_info_GetServerMetaReq.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:exec.user.GetServerMetaReq)
}
GetServerMetaReq::GetServerMetaReq(const GetServerMetaReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:exec.user.GetServerMetaReq)
}

void GetServerMetaReq::SharedCtor() {
}

GetServerMetaReq::~GetServerMetaReq() {
  // @@protoc_insertion_point(destructor:exec.user.GetServerMetaReq)
  SharedDtor();
}

void GetServerMetaReq::SharedDtor() {
}

void GetServerMetaReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetServerMetaReq::descriptor() {
  ::protobuf_User_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_User_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetServerMetaReq& GetServerMetaReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_User_2eproto::scc_info_GetServerMetaReq.base);
  return *internal_default_instance();
}


void GetServerMetaReq::Clear() {
// @@protoc_insertion_point(message_clear_start:exec.user.GetServerMetaReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetServerMetaReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:exec.user.GetServerMetaReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:exec.user.GetServerMetaReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:exec.user.GetServerMetaReq)
  return false;
#undef DO_
}

void GetServerMetaReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:exec.user.GetServerMetaReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:exec.user.GetServerMetaReq)
}

::google::protobuf::uint8* GetServerMetaReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:exec.user.GetServerMetaReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:exec.user.GetServerMetaReq)
  return target;
}

size_t GetServerMetaReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:exec.user.GetServerMetaReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetServerMetaReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:exec.user.GetServerMetaReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetServerMetaReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetServerMetaReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:exec.user.GetServerMetaReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:exec.user.GetServerMetaReq)
    MergeFrom(*source);
  }
}

void GetServerMetaReq::MergeFrom(const GetServerMetaReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:exec.user.GetServerMetaReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetServerMetaReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:exec.user.GetServerMetaReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetServerMetaReq::CopyFrom(const GetServerMetaReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:exec.user.GetServerMetaReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServerMetaReq::IsInitialized() const {
  return true;
}

void GetServerMetaReq::Swap(GetServerMetaReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetServerMetaReq::InternalSwap(GetServerMetaReq* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetServerMetaReq::GetMetadata() const {
  protobuf_User_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_User_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConvertSupport::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConvertSupport::kFromFieldNumber;
const int ConvertSupport::kToFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConvertSupport::ConvertSupport()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_User_2eproto::scc_info_ConvertSupport.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:exec.user.ConvertSupport)
}
ConvertSupport::ConvertSupport(const ConvertSupport& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&from_, &from.from_,
    static_cast<size_t>(reinterpret_cast<char*>(&to_) -
    reinterpret_cast<char*>(&from_)) + sizeof(to_));
  // @@protoc_insertion_point(copy_constructor:exec.user.ConvertSupport)
}

void ConvertSupport::SharedCtor() {
  ::memset(&from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&to_) -
      reinterpret_cast<char*>(&from_)) + sizeof(to_));
}

ConvertSupport::~ConvertSupport() {
  // @@protoc_insertion_point(destructor:exec.user.ConvertSupport)
  SharedDtor();
}

void ConvertSupport::SharedDtor() {
}

void ConvertSupport::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConvertSupport::descriptor() {
  ::protobuf_User_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_User_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConvertSupport& ConvertSupport::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_User_2eproto::scc_info_ConvertSupport.base);
  return *internal_default_instance();
}


void ConvertSupport::Clear() {
// @@protoc_insertion_point(message_clear_start:exec.user.ConvertSupport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&from_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&to_) -
        reinterpret_cast<char*>(&from_)) + sizeof(to_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConvertSupport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:exec.user.ConvertSupport)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .common.MinorType from = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::MinorType_IsValid(value)) {
            set_from(static_cast< ::common::MinorType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.MinorType to = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::MinorType_IsValid(value)) {
            set_to(static_cast< ::common::MinorType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:exec.user.ConvertSupport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:exec.user.ConvertSupport)
  return false;
#undef DO_
}

void ConvertSupport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:exec.user.ConvertSupport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .common.MinorType from = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->from(), output);
  }

  // required .common.MinorType to = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->to(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:exec.user.ConvertSupport)
}

::google::protobuf::uint8* ConvertSupport::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:exec.user.ConvertSupport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .common.MinorType from = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->from(), target);
  }

  // required .common.MinorType to = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->to(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:exec.user.ConvertSupport)
  return target;
}

size_t ConvertSupport::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:exec.user.ConvertSupport)
  size_t total_size = 0;

  if (has_from()) {
    // required .common.MinorType from = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->from());
  }

  if (has_to()) {
    // required .common.MinorType to = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->to());
  }

  return total_size;
}
size_t ConvertSupport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:exec.user.ConvertSupport)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .common.MinorType from = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->from());

    // required .common.MinorType to = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->to());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConvertSupport::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:exec.user.ConvertSupport)
  GOOGLE_DCHECK_NE(&from, this);
  const ConvertSupport* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConvertSupport>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:exec.user.ConvertSupport)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:exec.user.ConvertSupport)
    MergeFrom(*source);
  }
}

void ConvertSupport::MergeFrom(const ConvertSupport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:exec.user.ConvertSupport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      from_ = from.from_;
    }
    if (cached_has_bits & 0x00000002u) {
      to_ = from.to_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConvertSupport::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:exec.user.ConvertSupport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConvertSupport::CopyFrom(const ConvertSupport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:exec.user.ConvertSupport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConvertSupport::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void ConvertSupport::Swap(ConvertSupport* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConvertSupport::InternalSwap(ConvertSupport* other) {
  using std::swap;
  swap(from_, other->from_);
  swap(to_, other->to_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConvertSupport::GetMetadata() const {
  protobuf_User_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_User_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetServerMetaResp::InitAsDefaultInstance() {
  ::exec::user::_GetServerMetaResp_default_instance_._instance.get_mutable()->server_meta_ = const_cast< ::exec::user::ServerMeta*>(
      ::exec::user::ServerMeta::internal_default_instance());
  ::exec::user::_GetServerMetaResp_default_instance_._instance.get_mutable()->error_ = const_cast< ::exec::shared::DrillPBError*>(
      ::exec::shared::DrillPBError::internal_default_instance());
}
void GetServerMetaResp::clear_error() {
  if (error_ != NULL) error_->Clear();
  clear_has_error();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetServerMetaResp::kStatusFieldNumber;
const int GetServerMetaResp::kServerMetaFieldNumber;
const int GetServerMetaResp::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetServerMetaResp::GetServerMetaResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_User_2eproto::scc_info_GetServerMetaResp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:exec.user.GetServerMetaResp)
}
GetServerMetaResp::GetServerMetaResp(const GetServerMetaResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_server_meta()) {
    server_meta_ = new ::exec::user::ServerMeta(*from.server_meta_);
  } else {
    server_meta_ = NULL;
  }
  if (from.has_error()) {
    error_ = new ::exec::shared::DrillPBError(*from.error_);
  } else {
    error_ = NULL;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:exec.user.GetServerMetaResp)
}

void GetServerMetaResp::SharedCtor() {
  ::memset(&server_meta_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&server_meta_)) + sizeof(status_));
}

GetServerMetaResp::~GetServerMetaResp() {
  // @@protoc_insertion_point(destructor:exec.user.GetServerMetaResp)
  SharedDtor();
}

void GetServerMetaResp::SharedDtor() {
  if (this != internal_default_instance()) delete server_meta_;
  if (this != internal_default_instance()) delete error_;
}

void GetServerMetaResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetServerMetaResp::descriptor() {
  ::protobuf_User_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_User_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetServerMetaResp& GetServerMetaResp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_User_2eproto::scc_info_GetServerMetaResp.base);
  return *internal_default_instance();
}


void GetServerMetaResp::Clear() {
// @@protoc_insertion_point(message_clear_start:exec.user.GetServerMetaResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(server_meta_ != NULL);
      server_meta_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(error_ != NULL);
      error_->Clear();
    }
  }
  status_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetServerMetaResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:exec.user.GetServerMetaResp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .exec.user.RequestStatus status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::exec::user::RequestStatus_IsValid(value)) {
            set_status(static_cast< ::exec::user::RequestStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .exec.user.ServerMeta server_meta = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_server_meta()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .exec.shared.DrillPBError error = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:exec.user.GetServerMetaResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:exec.user.GetServerMetaResp)
  return false;
#undef DO_
}

void GetServerMetaResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:exec.user.GetServerMetaResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .exec.user.RequestStatus status = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // optional .exec.user.ServerMeta server_meta = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_server_meta(), output);
  }

  // optional .exec.shared.DrillPBError error = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_error(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:exec.user.GetServerMetaResp)
}

::google::protobuf::uint8* GetServerMetaResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:exec.user.GetServerMetaResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .exec.user.RequestStatus status = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // optional .exec.user.ServerMeta server_meta = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_server_meta(), deterministic, target);
  }

  // optional .exec.shared.DrillPBError error = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_error(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:exec.user.GetServerMetaResp)
  return target;
}

size_t GetServerMetaResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:exec.user.GetServerMetaResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .exec.user.ServerMeta server_meta = 2;
    if (has_server_meta()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *server_meta_);
    }

    // optional .exec.shared.DrillPBError error = 3;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *error_);
    }

    // optional .exec.user.RequestStatus status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetServerMetaResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:exec.user.GetServerMetaResp)
  GOOGLE_DCHECK_NE(&from, this);
  const GetServerMetaResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetServerMetaResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:exec.user.GetServerMetaResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:exec.user.GetServerMetaResp)
    MergeFrom(*source);
  }
}

void GetServerMetaResp::MergeFrom(const GetServerMetaResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:exec.user.GetServerMetaResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_server_meta()->::exec::user::ServerMeta::MergeFrom(from.server_meta());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_error()->::exec::shared::DrillPBError::MergeFrom(from.error());
    }
    if (cached_has_bits & 0x00000004u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetServerMetaResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:exec.user.GetServerMetaResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetServerMetaResp::CopyFrom(const GetServerMetaResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:exec.user.GetServerMetaResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServerMetaResp::IsInitialized() const {
  if (has_server_meta()) {
    if (!this->server_meta_->IsInitialized()) return false;
  }
  return true;
}

void GetServerMetaResp::Swap(GetServerMetaResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetServerMetaResp::InternalSwap(GetServerMetaResp* other) {
  using std::swap;
  swap(server_meta_, other->server_meta_);
  swap(error_, other->error_);
  swap(status_, other->status_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetServerMetaResp::GetMetadata() const {
  protobuf_User_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_User_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ServerMeta::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerMeta::kAllTablesSelectableFieldNumber;
const int ServerMeta::kBlobIncludedInMaxRowSizeFieldNumber;
const int ServerMeta::kCatalogAtStartFieldNumber;
const int ServerMeta::kCatalogSeparatorFieldNumber;
const int ServerMeta::kCatalogTermFieldNumber;
const int ServerMeta::kCollateSupportFieldNumber;
const int ServerMeta::kColumnAliasingSupportedFieldNumber;
const int ServerMeta::kConvertSupportFieldNumber;
const int ServerMeta::kCorrelationNamesSupportFieldNumber;
const int ServerMeta::kDateTimeFunctionsFieldNumber;
const int ServerMeta::kDateTimeLiteralsSupportFieldNumber;
const int ServerMeta::kGroupBySupportFieldNumber;
const int ServerMeta::kIdentifierCasingFieldNumber;
const int ServerMeta::kIdentifierQuoteStringFieldNumber;
const int ServerMeta::kLikeEscapeClauseSupportedFieldNumber;
const int ServerMeta::kMaxBinaryLiteralLengthFieldNumber;
const int ServerMeta::kMaxCatalogNameLengthFieldNumber;
const int ServerMeta::kMaxCharLiteralLengthFieldNumber;
const int ServerMeta::kMaxColumnNameLengthFieldNumber;
const int ServerMeta::kMaxColumnsInGroupByFieldNumber;
const int ServerMeta::kMaxColumnsInOrderByFieldNumber;
const int ServerMeta::kMaxColumnsInSelectFieldNumber;
const int ServerMeta::kMaxCursorNameLengthFieldNumber;
const int ServerMeta::kMaxLogicalLobSizeFieldNumber;
const int ServerMeta::kMaxRowSizeFieldNumber;
const int ServerMeta::kMaxSchemaNameLengthFieldNumber;
const int ServerMeta::kMaxStatementLengthFieldNumber;
const int ServerMeta::kMaxStatementsFieldNumber;
const int ServerMeta::kMaxTableNameLengthFieldNumber;
const int ServerMeta::kMaxTablesInSelectFieldNumber;
const int ServerMeta::kMaxUserNameLengthFieldNumber;
const int ServerMeta::kNullCollationFieldNumber;
const int ServerMeta::kNullPlusNonNullEqualsNullFieldNumber;
const int ServerMeta::kNumericFunctionsFieldNumber;
const int ServerMeta::kOrderBySupportFieldNumber;
const int ServerMeta::kOuterJoinSupportFieldNumber;
const int ServerMeta::kQuotedIdentifierCasingFieldNumber;
const int ServerMeta::kReadOnlyFieldNumber;
const int ServerMeta::kSchemaTermFieldNumber;
const int ServerMeta::kSearchEscapeStringFieldNumber;
const int ServerMeta::kSelectForUpdateSupportedFieldNumber;
const int ServerMeta::kSpecialCharactersFieldNumber;
const int ServerMeta::kSqlKeywordsFieldNumber;
const int ServerMeta::kStringFunctionsFieldNumber;
const int ServerMeta::kSubquerySupportFieldNumber;
const int ServerMeta::kSystemFunctionsFieldNumber;
const int ServerMeta::kTableTermFieldNumber;
const int ServerMeta::kTransactionSupportedFieldNumber;
const int ServerMeta::kUnionSupportFieldNumber;
const int ServerMeta::kCurrentSchemaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerMeta::ServerMeta()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_User_2eproto::scc_info_ServerMeta.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:exec.user.ServerMeta)
}
ServerMeta::ServerMeta(const ServerMeta& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      collate_support_(from.collate_support_),
      convert_support_(from.convert_support_),
      date_time_functions_(from.date_time_functions_),
      date_time_literals_support_(from.date_time_literals_support_),
      numeric_functions_(from.numeric_functions_),
      order_by_support_(from.order_by_support_),
      outer_join_support_(from.outer_join_support_),
      sql_keywords_(from.sql_keywords_),
      string_functions_(from.string_functions_),
      subquery_support_(from.subquery_support_),
      system_functions_(from.system_functions_),
      union_support_(from.union_support_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  catalog_separator_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_catalog_separator()) {
    catalog_separator_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.catalog_separator_);
  }
  catalog_term_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_catalog_term()) {
    catalog_term_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.catalog_term_);
  }
  identifier_quote_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_identifier_quote_string()) {
    identifier_quote_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.identifier_quote_string_);
  }
  schema_term_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_schema_term()) {
    schema_term_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.schema_term_);
  }
  search_escape_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_search_escape_string()) {
    search_escape_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.search_escape_string_);
  }
  special_characters_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_special_characters()) {
    special_characters_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.special_characters_);
  }
  table_term_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_table_term()) {
    table_term_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_term_);
  }
  current_schema_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_current_schema()) {
    current_schema_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.current_schema_);
  }
  ::memcpy(&all_tables_selectable_, &from.all_tables_selectable_,
    static_cast<size_t>(reinterpret_cast<char*>(&group_by_support_) -
    reinterpret_cast<char*>(&all_tables_selectable_)) + sizeof(group_by_support_));
  // @@protoc_insertion_point(copy_constructor:exec.user.ServerMeta)
}

void ServerMeta::SharedCtor() {
  catalog_separator_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  catalog_term_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  identifier_quote_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  schema_term_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  search_escape_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  special_characters_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_term_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  current_schema_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&all_tables_selectable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&transaction_supported_) -
      reinterpret_cast<char*>(&all_tables_selectable_)) + sizeof(transaction_supported_));
  correlation_names_support_ = 1;
  group_by_support_ = 1;
}

ServerMeta::~ServerMeta() {
  // @@protoc_insertion_point(destructor:exec.user.ServerMeta)
  SharedDtor();
}

void ServerMeta::SharedDtor() {
  catalog_separator_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  catalog_term_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  identifier_quote_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  schema_term_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  search_escape_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  special_characters_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_term_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  current_schema_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ServerMeta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ServerMeta::descriptor() {
  ::protobuf_User_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_User_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServerMeta& ServerMeta::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_User_2eproto::scc_info_ServerMeta.base);
  return *internal_default_instance();
}


void ServerMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:exec.user.ServerMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  collate_support_.Clear();
  convert_support_.Clear();
  date_time_functions_.Clear();
  date_time_literals_support_.Clear();
  numeric_functions_.Clear();
  order_by_support_.Clear();
  outer_join_support_.Clear();
  sql_keywords_.Clear();
  string_functions_.Clear();
  subquery_support_.Clear();
  system_functions_.Clear();
  union_support_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      catalog_separator_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      catalog_term_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      identifier_quote_string_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      schema_term_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      search_escape_string_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      special_characters_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000040u) {
      table_term_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000080u) {
      current_schema_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 65280u) {
    ::memset(&all_tables_selectable_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_char_literal_length_) -
        reinterpret_cast<char*>(&all_tables_selectable_)) + sizeof(max_char_literal_length_));
  }
  if (cached_has_bits & 16711680u) {
    ::memset(&max_column_name_length_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_schema_name_length_) -
        reinterpret_cast<char*>(&max_column_name_length_)) + sizeof(max_schema_name_length_));
  }
  if (cached_has_bits & 4278190080u) {
    ::memset(&max_statement_length_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&read_only_) -
        reinterpret_cast<char*>(&max_statement_length_)) + sizeof(read_only_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 63u) {
    ::memset(&select_for_update_supported_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&transaction_supported_) -
        reinterpret_cast<char*>(&select_for_update_supported_)) + sizeof(transaction_supported_));
    correlation_names_support_ = 1;
    group_by_support_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ServerMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:exec.user.ServerMeta)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool all_tables_selectable = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_all_tables_selectable();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &all_tables_selectable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool blob_included_in_max_row_size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_blob_included_in_max_row_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &blob_included_in_max_row_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool catalog_at_start = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_catalog_at_start();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &catalog_at_start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string catalog_separator = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_catalog_separator()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->catalog_separator().data(), static_cast<int>(this->catalog_separator().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "exec.user.ServerMeta.catalog_separator");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string catalog_term = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_catalog_term()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->catalog_term().data(), static_cast<int>(this->catalog_term().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "exec.user.ServerMeta.catalog_term");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .exec.user.CollateSupport collate_support = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::exec::user::CollateSupport_IsValid(value)) {
            add_collate_support(static_cast< ::exec::user::CollateSupport >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                6, static_cast< ::google::protobuf::uint64>(value));
          }
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 6,
                 ::exec::user::CollateSupport_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_collate_support())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool column_aliasing_supported = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_column_aliasing_supported();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &column_aliasing_supported_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .exec.user.ConvertSupport convert_support = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_convert_support()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .exec.user.CorrelationNamesSupport correlation_names_support = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::exec::user::CorrelationNamesSupport_IsValid(value)) {
            set_correlation_names_support(static_cast< ::exec::user::CorrelationNamesSupport >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                9, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string date_time_functions = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_date_time_functions()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->date_time_functions(this->date_time_functions_size() - 1).data(),
            static_cast<int>(this->date_time_functions(this->date_time_functions_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "exec.user.ServerMeta.date_time_functions");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .exec.user.DateTimeLiteralsSupport date_time_literals_support = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::exec::user::DateTimeLiteralsSupport_IsValid(value)) {
            add_date_time_literals_support(static_cast< ::exec::user::DateTimeLiteralsSupport >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                11, static_cast< ::google::protobuf::uint64>(value));
          }
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 11,
                 ::exec::user::DateTimeLiteralsSupport_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_date_time_literals_support())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .exec.user.GroupBySupport group_by_support = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::exec::user::GroupBySupport_IsValid(value)) {
            set_group_by_support(static_cast< ::exec::user::GroupBySupport >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                12, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .exec.user.IdentifierCasing identifier_casing = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::exec::user::IdentifierCasing_IsValid(value)) {
            set_identifier_casing(static_cast< ::exec::user::IdentifierCasing >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                13, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string identifier_quote_string = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_identifier_quote_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->identifier_quote_string().data(), static_cast<int>(this->identifier_quote_string().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "exec.user.ServerMeta.identifier_quote_string");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool like_escape_clause_supported = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_like_escape_clause_supported();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &like_escape_clause_supported_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_binary_literal_length = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_max_binary_literal_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_binary_literal_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_catalog_name_length = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_max_catalog_name_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_catalog_name_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_char_literal_length = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_max_char_literal_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_char_literal_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_column_name_length = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_max_column_name_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_column_name_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_columns_in_group_by = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_max_columns_in_group_by();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_columns_in_group_by_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_columns_in_order_by = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          set_has_max_columns_in_order_by();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_columns_in_order_by_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_columns_in_select = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {
          set_has_max_columns_in_select();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_columns_in_select_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_cursor_name_length = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {
          set_has_max_cursor_name_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_cursor_name_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_logical_lob_size = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {
          set_has_max_logical_lob_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_logical_lob_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_row_size = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 200 & 0xFF */)) {
          set_has_max_row_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_row_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_schema_name_length = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 208 & 0xFF */)) {
          set_has_max_schema_name_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_schema_name_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_statement_length = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u /* 216 & 0xFF */)) {
          set_has_max_statement_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_statement_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_statements = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u /* 224 & 0xFF */)) {
          set_has_max_statements();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_statements_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_table_name_length = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(232u /* 232 & 0xFF */)) {
          set_has_max_table_name_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_table_name_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_tables_in_select = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 240 & 0xFF */)) {
          set_has_max_tables_in_select();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_tables_in_select_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_user_name_length = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u /* 248 & 0xFF */)) {
          set_has_max_user_name_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_user_name_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .exec.user.NullCollation null_collation = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(0u /* 256 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::exec::user::NullCollation_IsValid(value)) {
            set_null_collation(static_cast< ::exec::user::NullCollation >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                32, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool null_plus_non_null_equals_null = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 264 & 0xFF */)) {
          set_has_null_plus_non_null_equals_null();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &null_plus_non_null_equals_null_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string numeric_functions = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 274 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_numeric_functions()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->numeric_functions(this->numeric_functions_size() - 1).data(),
            static_cast<int>(this->numeric_functions(this->numeric_functions_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "exec.user.ServerMeta.numeric_functions");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .exec.user.OrderBySupport order_by_support = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 280 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::exec::user::OrderBySupport_IsValid(value)) {
            add_order_by_support(static_cast< ::exec::user::OrderBySupport >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                35, static_cast< ::google::protobuf::uint64>(value));
          }
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 282 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 35,
                 ::exec::user::OrderBySupport_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_order_by_support())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .exec.user.OuterJoinSupport outer_join_support = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 288 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::exec::user::OuterJoinSupport_IsValid(value)) {
            add_outer_join_support(static_cast< ::exec::user::OuterJoinSupport >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                36, static_cast< ::google::protobuf::uint64>(value));
          }
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 290 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 36,
                 ::exec::user::OuterJoinSupport_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_outer_join_support())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .exec.user.IdentifierCasing quoted_identifier_casing = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 296 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::exec::user::IdentifierCasing_IsValid(value)) {
            set_quoted_identifier_casing(static_cast< ::exec::user::IdentifierCasing >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                37, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool read_only = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 304 & 0xFF */)) {
          set_has_read_only();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &read_only_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string schema_term = 39;
      case 39: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 314 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_schema_term()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->schema_term().data(), static_cast<int>(this->schema_term().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "exec.user.ServerMeta.schema_term");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string search_escape_string = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 322 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_search_escape_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->search_escape_string().data(), static_cast<int>(this->search_escape_string().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "exec.user.ServerMeta.search_escape_string");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool select_for_update_supported = 41;
      case 41: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 328 & 0xFF */)) {
          set_has_select_for_update_supported();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &select_for_update_supported_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string special_characters = 42;
      case 42: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 338 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_special_characters()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->special_characters().data(), static_cast<int>(this->special_characters().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "exec.user.ServerMeta.special_characters");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string sql_keywords = 43;
      case 43: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 346 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_sql_keywords()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sql_keywords(this->sql_keywords_size() - 1).data(),
            static_cast<int>(this->sql_keywords(this->sql_keywords_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "exec.user.ServerMeta.sql_keywords");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string string_functions = 44;
      case 44: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 354 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_string_functions()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->string_functions(this->string_functions_size() - 1).data(),
            static_cast<int>(this->string_functions(this->string_functions_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "exec.user.ServerMeta.string_functions");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .exec.user.SubQuerySupport subquery_support = 45;
      case 45: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 360 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::exec::user::SubQuerySupport_IsValid(value)) {
            add_subquery_support(static_cast< ::exec::user::SubQuerySupport >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                45, static_cast< ::google::protobuf::uint64>(value));
          }
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 362 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 45,
                 ::exec::user::SubQuerySupport_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_subquery_support())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string system_functions = 46;
      case 46: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 370 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_system_functions()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->system_functions(this->system_functions_size() - 1).data(),
            static_cast<int>(this->system_functions(this->system_functions_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "exec.user.ServerMeta.system_functions");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string table_term = 47;
      case 47: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 378 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_term()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->table_term().data(), static_cast<int>(this->table_term().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "exec.user.ServerMeta.table_term");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool transaction_supported = 48;
      case 48: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 384 & 0xFF */)) {
          set_has_transaction_supported();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &transaction_supported_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .exec.user.UnionSupport union_support = 49;
      case 49: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 392 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::exec::user::UnionSupport_IsValid(value)) {
            add_union_support(static_cast< ::exec::user::UnionSupport >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                49, static_cast< ::google::protobuf::uint64>(value));
          }
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 394 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 49,
                 ::exec::user::UnionSupport_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_union_support())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string current_schema = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 402 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_current_schema()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->current_schema().data(), static_cast<int>(this->current_schema().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "exec.user.ServerMeta.current_schema");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:exec.user.ServerMeta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:exec.user.ServerMeta)
  return false;
#undef DO_
}

void ServerMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:exec.user.ServerMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool all_tables_selectable = 1;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->all_tables_selectable(), output);
  }

  // optional bool blob_included_in_max_row_size = 2;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->blob_included_in_max_row_size(), output);
  }

  // optional bool catalog_at_start = 3;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->catalog_at_start(), output);
  }

  // optional string catalog_separator = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->catalog_separator().data(), static_cast<int>(this->catalog_separator().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.ServerMeta.catalog_separator");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->catalog_separator(), output);
  }

  // optional string catalog_term = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->catalog_term().data(), static_cast<int>(this->catalog_term().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.ServerMeta.catalog_term");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->catalog_term(), output);
  }

  // repeated .exec.user.CollateSupport collate_support = 6;
  for (int i = 0, n = this->collate_support_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->collate_support(i), output);
  }

  // optional bool column_aliasing_supported = 7;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->column_aliasing_supported(), output);
  }

  // repeated .exec.user.ConvertSupport convert_support = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->convert_support_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8,
      this->convert_support(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[1];
  // optional .exec.user.CorrelationNamesSupport correlation_names_support = 9;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->correlation_names_support(), output);
  }

  // repeated string date_time_functions = 10;
  for (int i = 0, n = this->date_time_functions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->date_time_functions(i).data(), static_cast<int>(this->date_time_functions(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.ServerMeta.date_time_functions");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->date_time_functions(i), output);
  }

  // repeated .exec.user.DateTimeLiteralsSupport date_time_literals_support = 11;
  for (int i = 0, n = this->date_time_literals_support_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->date_time_literals_support(i), output);
  }

  // optional .exec.user.GroupBySupport group_by_support = 12;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->group_by_support(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .exec.user.IdentifierCasing identifier_casing = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->identifier_casing(), output);
  }

  // optional string identifier_quote_string = 14;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->identifier_quote_string().data(), static_cast<int>(this->identifier_quote_string().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.ServerMeta.identifier_quote_string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->identifier_quote_string(), output);
  }

  // optional bool like_escape_clause_supported = 15;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->like_escape_clause_supported(), output);
  }

  // optional uint32 max_binary_literal_length = 16;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->max_binary_literal_length(), output);
  }

  // optional uint32 max_catalog_name_length = 17;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->max_catalog_name_length(), output);
  }

  // optional uint32 max_char_literal_length = 18;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->max_char_literal_length(), output);
  }

  // optional uint32 max_column_name_length = 19;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->max_column_name_length(), output);
  }

  // optional uint32 max_columns_in_group_by = 20;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->max_columns_in_group_by(), output);
  }

  // optional uint32 max_columns_in_order_by = 21;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->max_columns_in_order_by(), output);
  }

  // optional uint32 max_columns_in_select = 22;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->max_columns_in_select(), output);
  }

  // optional uint32 max_cursor_name_length = 23;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->max_cursor_name_length(), output);
  }

  // optional uint32 max_logical_lob_size = 24;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->max_logical_lob_size(), output);
  }

  // optional uint32 max_row_size = 25;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->max_row_size(), output);
  }

  // optional uint32 max_schema_name_length = 26;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->max_schema_name_length(), output);
  }

  // optional uint32 max_statement_length = 27;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->max_statement_length(), output);
  }

  // optional uint32 max_statements = 28;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->max_statements(), output);
  }

  // optional uint32 max_table_name_length = 29;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->max_table_name_length(), output);
  }

  // optional uint32 max_tables_in_select = 30;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->max_tables_in_select(), output);
  }

  // optional uint32 max_user_name_length = 31;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->max_user_name_length(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional .exec.user.NullCollation null_collation = 32;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      32, this->null_collation(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool null_plus_non_null_equals_null = 33;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(33, this->null_plus_non_null_equals_null(), output);
  }

  // repeated string numeric_functions = 34;
  for (int i = 0, n = this->numeric_functions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->numeric_functions(i).data(), static_cast<int>(this->numeric_functions(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.ServerMeta.numeric_functions");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      34, this->numeric_functions(i), output);
  }

  // repeated .exec.user.OrderBySupport order_by_support = 35;
  for (int i = 0, n = this->order_by_support_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      35, this->order_by_support(i), output);
  }

  // repeated .exec.user.OuterJoinSupport outer_join_support = 36;
  for (int i = 0, n = this->outer_join_support_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      36, this->outer_join_support(i), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional .exec.user.IdentifierCasing quoted_identifier_casing = 37;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      37, this->quoted_identifier_casing(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool read_only = 38;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(38, this->read_only(), output);
  }

  // optional string schema_term = 39;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->schema_term().data(), static_cast<int>(this->schema_term().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.ServerMeta.schema_term");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      39, this->schema_term(), output);
  }

  // optional string search_escape_string = 40;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->search_escape_string().data(), static_cast<int>(this->search_escape_string().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.ServerMeta.search_escape_string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      40, this->search_escape_string(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool select_for_update_supported = 41;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(41, this->select_for_update_supported(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string special_characters = 42;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->special_characters().data(), static_cast<int>(this->special_characters().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.ServerMeta.special_characters");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      42, this->special_characters(), output);
  }

  // repeated string sql_keywords = 43;
  for (int i = 0, n = this->sql_keywords_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sql_keywords(i).data(), static_cast<int>(this->sql_keywords(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.ServerMeta.sql_keywords");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      43, this->sql_keywords(i), output);
  }

  // repeated string string_functions = 44;
  for (int i = 0, n = this->string_functions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->string_functions(i).data(), static_cast<int>(this->string_functions(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.ServerMeta.string_functions");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      44, this->string_functions(i), output);
  }

  // repeated .exec.user.SubQuerySupport subquery_support = 45;
  for (int i = 0, n = this->subquery_support_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      45, this->subquery_support(i), output);
  }

  // repeated string system_functions = 46;
  for (int i = 0, n = this->system_functions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->system_functions(i).data(), static_cast<int>(this->system_functions(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.ServerMeta.system_functions");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      46, this->system_functions(i), output);
  }

  // optional string table_term = 47;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->table_term().data(), static_cast<int>(this->table_term().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.ServerMeta.table_term");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      47, this->table_term(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool transaction_supported = 48;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(48, this->transaction_supported(), output);
  }

  // repeated .exec.user.UnionSupport union_support = 49;
  for (int i = 0, n = this->union_support_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      49, this->union_support(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string current_schema = 50;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->current_schema().data(), static_cast<int>(this->current_schema().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.ServerMeta.current_schema");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      50, this->current_schema(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:exec.user.ServerMeta)
}

::google::protobuf::uint8* ServerMeta::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:exec.user.ServerMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool all_tables_selectable = 1;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->all_tables_selectable(), target);
  }

  // optional bool blob_included_in_max_row_size = 2;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->blob_included_in_max_row_size(), target);
  }

  // optional bool catalog_at_start = 3;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->catalog_at_start(), target);
  }

  // optional string catalog_separator = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->catalog_separator().data(), static_cast<int>(this->catalog_separator().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.ServerMeta.catalog_separator");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->catalog_separator(), target);
  }

  // optional string catalog_term = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->catalog_term().data(), static_cast<int>(this->catalog_term().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.ServerMeta.catalog_term");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->catalog_term(), target);
  }

  // repeated .exec.user.CollateSupport collate_support = 6;
  target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
    6, this->collate_support_, target);

  // optional bool column_aliasing_supported = 7;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->column_aliasing_supported(), target);
  }

  // repeated .exec.user.ConvertSupport convert_support = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->convert_support_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->convert_support(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[1];
  // optional .exec.user.CorrelationNamesSupport correlation_names_support = 9;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->correlation_names_support(), target);
  }

  // repeated string date_time_functions = 10;
  for (int i = 0, n = this->date_time_functions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->date_time_functions(i).data(), static_cast<int>(this->date_time_functions(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.ServerMeta.date_time_functions");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(10, this->date_time_functions(i), target);
  }

  // repeated .exec.user.DateTimeLiteralsSupport date_time_literals_support = 11;
  target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
    11, this->date_time_literals_support_, target);

  // optional .exec.user.GroupBySupport group_by_support = 12;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->group_by_support(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .exec.user.IdentifierCasing identifier_casing = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->identifier_casing(), target);
  }

  // optional string identifier_quote_string = 14;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->identifier_quote_string().data(), static_cast<int>(this->identifier_quote_string().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.ServerMeta.identifier_quote_string");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->identifier_quote_string(), target);
  }

  // optional bool like_escape_clause_supported = 15;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->like_escape_clause_supported(), target);
  }

  // optional uint32 max_binary_literal_length = 16;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->max_binary_literal_length(), target);
  }

  // optional uint32 max_catalog_name_length = 17;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->max_catalog_name_length(), target);
  }

  // optional uint32 max_char_literal_length = 18;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->max_char_literal_length(), target);
  }

  // optional uint32 max_column_name_length = 19;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->max_column_name_length(), target);
  }

  // optional uint32 max_columns_in_group_by = 20;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->max_columns_in_group_by(), target);
  }

  // optional uint32 max_columns_in_order_by = 21;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->max_columns_in_order_by(), target);
  }

  // optional uint32 max_columns_in_select = 22;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->max_columns_in_select(), target);
  }

  // optional uint32 max_cursor_name_length = 23;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->max_cursor_name_length(), target);
  }

  // optional uint32 max_logical_lob_size = 24;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->max_logical_lob_size(), target);
  }

  // optional uint32 max_row_size = 25;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->max_row_size(), target);
  }

  // optional uint32 max_schema_name_length = 26;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->max_schema_name_length(), target);
  }

  // optional uint32 max_statement_length = 27;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->max_statement_length(), target);
  }

  // optional uint32 max_statements = 28;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->max_statements(), target);
  }

  // optional uint32 max_table_name_length = 29;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(29, this->max_table_name_length(), target);
  }

  // optional uint32 max_tables_in_select = 30;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->max_tables_in_select(), target);
  }

  // optional uint32 max_user_name_length = 31;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->max_user_name_length(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional .exec.user.NullCollation null_collation = 32;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      32, this->null_collation(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool null_plus_non_null_equals_null = 33;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(33, this->null_plus_non_null_equals_null(), target);
  }

  // repeated string numeric_functions = 34;
  for (int i = 0, n = this->numeric_functions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->numeric_functions(i).data(), static_cast<int>(this->numeric_functions(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.ServerMeta.numeric_functions");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(34, this->numeric_functions(i), target);
  }

  // repeated .exec.user.OrderBySupport order_by_support = 35;
  target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
    35, this->order_by_support_, target);

  // repeated .exec.user.OuterJoinSupport outer_join_support = 36;
  target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
    36, this->outer_join_support_, target);

  cached_has_bits = _has_bits_[1];
  // optional .exec.user.IdentifierCasing quoted_identifier_casing = 37;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      37, this->quoted_identifier_casing(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool read_only = 38;
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(38, this->read_only(), target);
  }

  // optional string schema_term = 39;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->schema_term().data(), static_cast<int>(this->schema_term().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.ServerMeta.schema_term");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        39, this->schema_term(), target);
  }

  // optional string search_escape_string = 40;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->search_escape_string().data(), static_cast<int>(this->search_escape_string().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.ServerMeta.search_escape_string");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        40, this->search_escape_string(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool select_for_update_supported = 41;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(41, this->select_for_update_supported(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string special_characters = 42;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->special_characters().data(), static_cast<int>(this->special_characters().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.ServerMeta.special_characters");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        42, this->special_characters(), target);
  }

  // repeated string sql_keywords = 43;
  for (int i = 0, n = this->sql_keywords_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sql_keywords(i).data(), static_cast<int>(this->sql_keywords(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.ServerMeta.sql_keywords");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(43, this->sql_keywords(i), target);
  }

  // repeated string string_functions = 44;
  for (int i = 0, n = this->string_functions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->string_functions(i).data(), static_cast<int>(this->string_functions(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.ServerMeta.string_functions");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(44, this->string_functions(i), target);
  }

  // repeated .exec.user.SubQuerySupport subquery_support = 45;
  target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
    45, this->subquery_support_, target);

  // repeated string system_functions = 46;
  for (int i = 0, n = this->system_functions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->system_functions(i).data(), static_cast<int>(this->system_functions(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.ServerMeta.system_functions");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(46, this->system_functions(i), target);
  }

  // optional string table_term = 47;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->table_term().data(), static_cast<int>(this->table_term().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.ServerMeta.table_term");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        47, this->table_term(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool transaction_supported = 48;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(48, this->transaction_supported(), target);
  }

  // repeated .exec.user.UnionSupport union_support = 49;
  target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
    49, this->union_support_, target);

  cached_has_bits = _has_bits_[0];
  // optional string current_schema = 50;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->current_schema().data(), static_cast<int>(this->current_schema().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.ServerMeta.current_schema");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        50, this->current_schema(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:exec.user.ServerMeta)
  return target;
}

size_t ServerMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:exec.user.ServerMeta)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .exec.user.CollateSupport collate_support = 6;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->collate_support_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->collate_support(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // repeated .exec.user.ConvertSupport convert_support = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->convert_support_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->convert_support(static_cast<int>(i)));
    }
  }

  // repeated string date_time_functions = 10;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->date_time_functions_size());
  for (int i = 0, n = this->date_time_functions_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->date_time_functions(i));
  }

  // repeated .exec.user.DateTimeLiteralsSupport date_time_literals_support = 11;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->date_time_literals_support_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->date_time_literals_support(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // repeated string numeric_functions = 34;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->numeric_functions_size());
  for (int i = 0, n = this->numeric_functions_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->numeric_functions(i));
  }

  // repeated .exec.user.OrderBySupport order_by_support = 35;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->order_by_support_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->order_by_support(static_cast<int>(i)));
    }
    total_size += (2UL * count) + data_size;
  }

  // repeated .exec.user.OuterJoinSupport outer_join_support = 36;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->outer_join_support_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->outer_join_support(static_cast<int>(i)));
    }
    total_size += (2UL * count) + data_size;
  }

  // repeated string sql_keywords = 43;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->sql_keywords_size());
  for (int i = 0, n = this->sql_keywords_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->sql_keywords(i));
  }

  // repeated string string_functions = 44;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->string_functions_size());
  for (int i = 0, n = this->string_functions_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->string_functions(i));
  }

  // repeated .exec.user.SubQuerySupport subquery_support = 45;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->subquery_support_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->subquery_support(static_cast<int>(i)));
    }
    total_size += (2UL * count) + data_size;
  }

  // repeated string system_functions = 46;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->system_functions_size());
  for (int i = 0, n = this->system_functions_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->system_functions(i));
  }

  // repeated .exec.user.UnionSupport union_support = 49;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->union_support_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->union_support(static_cast<int>(i)));
    }
    total_size += (2UL * count) + data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string catalog_separator = 4;
    if (has_catalog_separator()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->catalog_separator());
    }

    // optional string catalog_term = 5;
    if (has_catalog_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->catalog_term());
    }

    // optional string identifier_quote_string = 14;
    if (has_identifier_quote_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->identifier_quote_string());
    }

    // optional string schema_term = 39;
    if (has_schema_term()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->schema_term());
    }

    // optional string search_escape_string = 40;
    if (has_search_escape_string()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->search_escape_string());
    }

    // optional string special_characters = 42;
    if (has_special_characters()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->special_characters());
    }

    // optional string table_term = 47;
    if (has_table_term()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->table_term());
    }

    // optional string current_schema = 50;
    if (has_current_schema()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->current_schema());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional bool all_tables_selectable = 1;
    if (has_all_tables_selectable()) {
      total_size += 1 + 1;
    }

    // optional bool blob_included_in_max_row_size = 2;
    if (has_blob_included_in_max_row_size()) {
      total_size += 1 + 1;
    }

    // optional bool catalog_at_start = 3;
    if (has_catalog_at_start()) {
      total_size += 1 + 1;
    }

    // optional bool column_aliasing_supported = 7;
    if (has_column_aliasing_supported()) {
      total_size += 1 + 1;
    }

    // optional .exec.user.IdentifierCasing identifier_casing = 13;
    if (has_identifier_casing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->identifier_casing());
    }

    // optional uint32 max_binary_literal_length = 16;
    if (has_max_binary_literal_length()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_binary_literal_length());
    }

    // optional uint32 max_catalog_name_length = 17;
    if (has_max_catalog_name_length()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_catalog_name_length());
    }

    // optional uint32 max_char_literal_length = 18;
    if (has_max_char_literal_length()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_char_literal_length());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional uint32 max_column_name_length = 19;
    if (has_max_column_name_length()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_column_name_length());
    }

    // optional uint32 max_columns_in_group_by = 20;
    if (has_max_columns_in_group_by()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_columns_in_group_by());
    }

    // optional uint32 max_columns_in_order_by = 21;
    if (has_max_columns_in_order_by()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_columns_in_order_by());
    }

    // optional uint32 max_columns_in_select = 22;
    if (has_max_columns_in_select()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_columns_in_select());
    }

    // optional uint32 max_cursor_name_length = 23;
    if (has_max_cursor_name_length()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_cursor_name_length());
    }

    // optional uint32 max_logical_lob_size = 24;
    if (has_max_logical_lob_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_logical_lob_size());
    }

    // optional uint32 max_row_size = 25;
    if (has_max_row_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_row_size());
    }

    // optional uint32 max_schema_name_length = 26;
    if (has_max_schema_name_length()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_schema_name_length());
    }

  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    // optional uint32 max_statement_length = 27;
    if (has_max_statement_length()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_statement_length());
    }

    // optional uint32 max_statements = 28;
    if (has_max_statements()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_statements());
    }

    // optional uint32 max_table_name_length = 29;
    if (has_max_table_name_length()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_table_name_length());
    }

    // optional uint32 max_tables_in_select = 30;
    if (has_max_tables_in_select()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_tables_in_select());
    }

    // optional uint32 max_user_name_length = 31;
    if (has_max_user_name_length()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_user_name_length());
    }

    // optional bool like_escape_clause_supported = 15;
    if (has_like_escape_clause_supported()) {
      total_size += 1 + 1;
    }

    // optional bool null_plus_non_null_equals_null = 33;
    if (has_null_plus_non_null_equals_null()) {
      total_size += 2 + 1;
    }

    // optional bool read_only = 38;
    if (has_read_only()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[32 / 32] & 63u) {
    // optional bool select_for_update_supported = 41;
    if (has_select_for_update_supported()) {
      total_size += 2 + 1;
    }

    // optional .exec.user.NullCollation null_collation = 32;
    if (has_null_collation()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->null_collation());
    }

    // optional .exec.user.IdentifierCasing quoted_identifier_casing = 37;
    if (has_quoted_identifier_casing()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->quoted_identifier_casing());
    }

    // optional bool transaction_supported = 48;
    if (has_transaction_supported()) {
      total_size += 2 + 1;
    }

    // optional .exec.user.CorrelationNamesSupport correlation_names_support = 9;
    if (has_correlation_names_support()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->correlation_names_support());
    }

    // optional .exec.user.GroupBySupport group_by_support = 12;
    if (has_group_by_support()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->group_by_support());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerMeta::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:exec.user.ServerMeta)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerMeta* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerMeta>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:exec.user.ServerMeta)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:exec.user.ServerMeta)
    MergeFrom(*source);
  }
}

void ServerMeta::MergeFrom(const ServerMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:exec.user.ServerMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  collate_support_.MergeFrom(from.collate_support_);
  convert_support_.MergeFrom(from.convert_support_);
  date_time_functions_.MergeFrom(from.date_time_functions_);
  date_time_literals_support_.MergeFrom(from.date_time_literals_support_);
  numeric_functions_.MergeFrom(from.numeric_functions_);
  order_by_support_.MergeFrom(from.order_by_support_);
  outer_join_support_.MergeFrom(from.outer_join_support_);
  sql_keywords_.MergeFrom(from.sql_keywords_);
  string_functions_.MergeFrom(from.string_functions_);
  subquery_support_.MergeFrom(from.subquery_support_);
  system_functions_.MergeFrom(from.system_functions_);
  union_support_.MergeFrom(from.union_support_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_catalog_separator();
      catalog_separator_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.catalog_separator_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_catalog_term();
      catalog_term_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.catalog_term_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_identifier_quote_string();
      identifier_quote_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.identifier_quote_string_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_schema_term();
      schema_term_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.schema_term_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_search_escape_string();
      search_escape_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.search_escape_string_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_special_characters();
      special_characters_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.special_characters_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_table_term();
      table_term_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_term_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has_current_schema();
      current_schema_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.current_schema_);
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      all_tables_selectable_ = from.all_tables_selectable_;
    }
    if (cached_has_bits & 0x00000200u) {
      blob_included_in_max_row_size_ = from.blob_included_in_max_row_size_;
    }
    if (cached_has_bits & 0x00000400u) {
      catalog_at_start_ = from.catalog_at_start_;
    }
    if (cached_has_bits & 0x00000800u) {
      column_aliasing_supported_ = from.column_aliasing_supported_;
    }
    if (cached_has_bits & 0x00001000u) {
      identifier_casing_ = from.identifier_casing_;
    }
    if (cached_has_bits & 0x00002000u) {
      max_binary_literal_length_ = from.max_binary_literal_length_;
    }
    if (cached_has_bits & 0x00004000u) {
      max_catalog_name_length_ = from.max_catalog_name_length_;
    }
    if (cached_has_bits & 0x00008000u) {
      max_char_literal_length_ = from.max_char_literal_length_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      max_column_name_length_ = from.max_column_name_length_;
    }
    if (cached_has_bits & 0x00020000u) {
      max_columns_in_group_by_ = from.max_columns_in_group_by_;
    }
    if (cached_has_bits & 0x00040000u) {
      max_columns_in_order_by_ = from.max_columns_in_order_by_;
    }
    if (cached_has_bits & 0x00080000u) {
      max_columns_in_select_ = from.max_columns_in_select_;
    }
    if (cached_has_bits & 0x00100000u) {
      max_cursor_name_length_ = from.max_cursor_name_length_;
    }
    if (cached_has_bits & 0x00200000u) {
      max_logical_lob_size_ = from.max_logical_lob_size_;
    }
    if (cached_has_bits & 0x00400000u) {
      max_row_size_ = from.max_row_size_;
    }
    if (cached_has_bits & 0x00800000u) {
      max_schema_name_length_ = from.max_schema_name_length_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      max_statement_length_ = from.max_statement_length_;
    }
    if (cached_has_bits & 0x02000000u) {
      max_statements_ = from.max_statements_;
    }
    if (cached_has_bits & 0x04000000u) {
      max_table_name_length_ = from.max_table_name_length_;
    }
    if (cached_has_bits & 0x08000000u) {
      max_tables_in_select_ = from.max_tables_in_select_;
    }
    if (cached_has_bits & 0x10000000u) {
      max_user_name_length_ = from.max_user_name_length_;
    }
    if (cached_has_bits & 0x20000000u) {
      like_escape_clause_supported_ = from.like_escape_clause_supported_;
    }
    if (cached_has_bits & 0x40000000u) {
      null_plus_non_null_equals_null_ = from.null_plus_non_null_equals_null_;
    }
    if (cached_has_bits & 0x80000000u) {
      read_only_ = from.read_only_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      select_for_update_supported_ = from.select_for_update_supported_;
    }
    if (cached_has_bits & 0x00000002u) {
      null_collation_ = from.null_collation_;
    }
    if (cached_has_bits & 0x00000004u) {
      quoted_identifier_casing_ = from.quoted_identifier_casing_;
    }
    if (cached_has_bits & 0x00000008u) {
      transaction_supported_ = from.transaction_supported_;
    }
    if (cached_has_bits & 0x00000010u) {
      correlation_names_support_ = from.correlation_names_support_;
    }
    if (cached_has_bits & 0x00000020u) {
      group_by_support_ = from.group_by_support_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void ServerMeta::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:exec.user.ServerMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerMeta::CopyFrom(const ServerMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:exec.user.ServerMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerMeta::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->convert_support())) return false;
  return true;
}

void ServerMeta::Swap(ServerMeta* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerMeta::InternalSwap(ServerMeta* other) {
  using std::swap;
  collate_support_.InternalSwap(&other->collate_support_);
  CastToBase(&convert_support_)->InternalSwap(CastToBase(&other->convert_support_));
  date_time_functions_.InternalSwap(CastToBase(&other->date_time_functions_));
  date_time_literals_support_.InternalSwap(&other->date_time_literals_support_);
  numeric_functions_.InternalSwap(CastToBase(&other->numeric_functions_));
  order_by_support_.InternalSwap(&other->order_by_support_);
  outer_join_support_.InternalSwap(&other->outer_join_support_);
  sql_keywords_.InternalSwap(CastToBase(&other->sql_keywords_));
  string_functions_.InternalSwap(CastToBase(&other->string_functions_));
  subquery_support_.InternalSwap(&other->subquery_support_);
  system_functions_.InternalSwap(CastToBase(&other->system_functions_));
  union_support_.InternalSwap(&other->union_support_);
  catalog_separator_.Swap(&other->catalog_separator_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  catalog_term_.Swap(&other->catalog_term_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  identifier_quote_string_.Swap(&other->identifier_quote_string_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  schema_term_.Swap(&other->schema_term_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  search_escape_string_.Swap(&other->search_escape_string_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  special_characters_.Swap(&other->special_characters_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  table_term_.Swap(&other->table_term_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  current_schema_.Swap(&other->current_schema_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(all_tables_selectable_, other->all_tables_selectable_);
  swap(blob_included_in_max_row_size_, other->blob_included_in_max_row_size_);
  swap(catalog_at_start_, other->catalog_at_start_);
  swap(column_aliasing_supported_, other->column_aliasing_supported_);
  swap(identifier_casing_, other->identifier_casing_);
  swap(max_binary_literal_length_, other->max_binary_literal_length_);
  swap(max_catalog_name_length_, other->max_catalog_name_length_);
  swap(max_char_literal_length_, other->max_char_literal_length_);
  swap(max_column_name_length_, other->max_column_name_length_);
  swap(max_columns_in_group_by_, other->max_columns_in_group_by_);
  swap(max_columns_in_order_by_, other->max_columns_in_order_by_);
  swap(max_columns_in_select_, other->max_columns_in_select_);
  swap(max_cursor_name_length_, other->max_cursor_name_length_);
  swap(max_logical_lob_size_, other->max_logical_lob_size_);
  swap(max_row_size_, other->max_row_size_);
  swap(max_schema_name_length_, other->max_schema_name_length_);
  swap(max_statement_length_, other->max_statement_length_);
  swap(max_statements_, other->max_statements_);
  swap(max_table_name_length_, other->max_table_name_length_);
  swap(max_tables_in_select_, other->max_tables_in_select_);
  swap(max_user_name_length_, other->max_user_name_length_);
  swap(like_escape_clause_supported_, other->like_escape_clause_supported_);
  swap(null_plus_non_null_equals_null_, other->null_plus_non_null_equals_null_);
  swap(read_only_, other->read_only_);
  swap(select_for_update_supported_, other->select_for_update_supported_);
  swap(null_collation_, other->null_collation_);
  swap(quoted_identifier_casing_, other->quoted_identifier_casing_);
  swap(transaction_supported_, other->transaction_supported_);
  swap(correlation_names_support_, other->correlation_names_support_);
  swap(group_by_support_, other->group_by_support_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ServerMeta::GetMetadata() const {
  protobuf_User_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_User_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RunQuery::InitAsDefaultInstance() {
  ::exec::user::_RunQuery_default_instance_._instance.get_mutable()->prepared_statement_handle_ = const_cast< ::exec::user::PreparedStatementHandle*>(
      ::exec::user::PreparedStatementHandle::internal_default_instance());
}
void RunQuery::clear_fragments() {
  fragments_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RunQuery::kResultsModeFieldNumber;
const int RunQuery::kTypeFieldNumber;
const int RunQuery::kPlanFieldNumber;
const int RunQuery::kFragmentsFieldNumber;
const int RunQuery::kPreparedStatementHandleFieldNumber;
const int RunQuery::kAutolimitRowcountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RunQuery::RunQuery()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_User_2eproto::scc_info_RunQuery.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:exec.user.RunQuery)
}
RunQuery::RunQuery(const RunQuery& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      fragments_(from.fragments_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  plan_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_plan()) {
    plan_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.plan_);
  }
  if (from.has_prepared_statement_handle()) {
    prepared_statement_handle_ = new ::exec::user::PreparedStatementHandle(*from.prepared_statement_handle_);
  } else {
    prepared_statement_handle_ = NULL;
  }
  ::memcpy(&autolimit_rowcount_, &from.autolimit_rowcount_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&autolimit_rowcount_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:exec.user.RunQuery)
}

void RunQuery::SharedCtor() {
  plan_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&prepared_statement_handle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&autolimit_rowcount_) -
      reinterpret_cast<char*>(&prepared_statement_handle_)) + sizeof(autolimit_rowcount_));
  results_mode_ = 1;
  type_ = 1;
}

RunQuery::~RunQuery() {
  // @@protoc_insertion_point(destructor:exec.user.RunQuery)
  SharedDtor();
}

void RunQuery::SharedDtor() {
  plan_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete prepared_statement_handle_;
}

void RunQuery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RunQuery::descriptor() {
  ::protobuf_User_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_User_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RunQuery& RunQuery::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_User_2eproto::scc_info_RunQuery.base);
  return *internal_default_instance();
}


void RunQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:exec.user.RunQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fragments_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      plan_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(prepared_statement_handle_ != NULL);
      prepared_statement_handle_->Clear();
    }
  }
  if (cached_has_bits & 28u) {
    autolimit_rowcount_ = 0;
    results_mode_ = 1;
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RunQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:exec.user.RunQuery)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .exec.user.QueryResultsMode results_mode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::exec::user::QueryResultsMode_IsValid(value)) {
            set_results_mode(static_cast< ::exec::user::QueryResultsMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .exec.shared.QueryType type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::exec::shared::QueryType_IsValid(value)) {
            set_type(static_cast< ::exec::shared::QueryType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string plan = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_plan()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->plan().data(), static_cast<int>(this->plan().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "exec.user.RunQuery.plan");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .exec.bit.control.PlanFragment fragments = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_fragments()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .exec.user.PreparedStatementHandle prepared_statement_handle = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_prepared_statement_handle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 autolimit_rowcount = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_autolimit_rowcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &autolimit_rowcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:exec.user.RunQuery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:exec.user.RunQuery)
  return false;
#undef DO_
}

void RunQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:exec.user.RunQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .exec.user.QueryResultsMode results_mode = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->results_mode(), output);
  }

  // optional .exec.shared.QueryType type = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional string plan = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->plan().data(), static_cast<int>(this->plan().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.RunQuery.plan");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->plan(), output);
  }

  // repeated .exec.bit.control.PlanFragment fragments = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fragments_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->fragments(static_cast<int>(i)),
      output);
  }

  // optional .exec.user.PreparedStatementHandle prepared_statement_handle = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_prepared_statement_handle(), output);
  }

  // optional int32 autolimit_rowcount = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->autolimit_rowcount(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:exec.user.RunQuery)
}

::google::protobuf::uint8* RunQuery::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:exec.user.RunQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .exec.user.QueryResultsMode results_mode = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->results_mode(), target);
  }

  // optional .exec.shared.QueryType type = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional string plan = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->plan().data(), static_cast<int>(this->plan().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.user.RunQuery.plan");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->plan(), target);
  }

  // repeated .exec.bit.control.PlanFragment fragments = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fragments_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->fragments(static_cast<int>(i)), deterministic, target);
  }

  // optional .exec.user.PreparedStatementHandle prepared_statement_handle = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_prepared_statement_handle(), deterministic, target);
  }

  // optional int32 autolimit_rowcount = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->autolimit_rowcount(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:exec.user.RunQuery)
  return target;
}

size_t RunQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:exec.user.RunQuery)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .exec.bit.control.PlanFragment fragments = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->fragments_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->fragments(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional string plan = 3;
    if (has_plan()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->plan());
    }

    // optional .exec.user.PreparedStatementHandle prepared_statement_handle = 5;
    if (has_prepared_statement_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *prepared_statement_handle_);
    }

    // optional int32 autolimit_rowcount = 6;
    if (has_autolimit_rowcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->autolimit_rowcount());
    }

    // optional .exec.user.QueryResultsMode results_mode = 1;
    if (has_results_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->results_mode());
    }

    // optional .exec.shared.QueryType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RunQuery::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:exec.user.RunQuery)
  GOOGLE_DCHECK_NE(&from, this);
  const RunQuery* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RunQuery>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:exec.user.RunQuery)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:exec.user.RunQuery)
    MergeFrom(*source);
  }
}

void RunQuery::MergeFrom(const RunQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:exec.user.RunQuery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fragments_.MergeFrom(from.fragments_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_plan();
      plan_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.plan_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_prepared_statement_handle()->::exec::user::PreparedStatementHandle::MergeFrom(from.prepared_statement_handle());
    }
    if (cached_has_bits & 0x00000004u) {
      autolimit_rowcount_ = from.autolimit_rowcount_;
    }
    if (cached_has_bits & 0x00000008u) {
      results_mode_ = from.results_mode_;
    }
    if (cached_has_bits & 0x00000010u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RunQuery::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:exec.user.RunQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RunQuery::CopyFrom(const RunQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:exec.user.RunQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunQuery::IsInitialized() const {
  return true;
}

void RunQuery::Swap(RunQuery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RunQuery::InternalSwap(RunQuery* other) {
  using std::swap;
  CastToBase(&fragments_)->InternalSwap(CastToBase(&other->fragments_));
  plan_.Swap(&other->plan_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(prepared_statement_handle_, other->prepared_statement_handle_);
  swap(autolimit_rowcount_, other->autolimit_rowcount_);
  swap(results_mode_, other->results_mode_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RunQuery::GetMetadata() const {
  protobuf_User_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_User_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace user
}  // namespace exec
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::exec::user::Property* Arena::CreateMaybeMessage< ::exec::user::Property >(Arena* arena) {
  return Arena::CreateInternal< ::exec::user::Property >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::exec::user::UserProperties* Arena::CreateMaybeMessage< ::exec::user::UserProperties >(Arena* arena) {
  return Arena::CreateInternal< ::exec::user::UserProperties >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::exec::user::RpcEndpointInfos* Arena::CreateMaybeMessage< ::exec::user::RpcEndpointInfos >(Arena* arena) {
  return Arena::CreateInternal< ::exec::user::RpcEndpointInfos >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::exec::user::UserToBitHandshake* Arena::CreateMaybeMessage< ::exec::user::UserToBitHandshake >(Arena* arena) {
  return Arena::CreateInternal< ::exec::user::UserToBitHandshake >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::exec::user::RequestResults* Arena::CreateMaybeMessage< ::exec::user::RequestResults >(Arena* arena) {
  return Arena::CreateInternal< ::exec::user::RequestResults >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::exec::user::GetQueryPlanFragments* Arena::CreateMaybeMessage< ::exec::user::GetQueryPlanFragments >(Arena* arena) {
  return Arena::CreateInternal< ::exec::user::GetQueryPlanFragments >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::exec::user::QueryPlanFragments* Arena::CreateMaybeMessage< ::exec::user::QueryPlanFragments >(Arena* arena) {
  return Arena::CreateInternal< ::exec::user::QueryPlanFragments >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::exec::user::BitToUserHandshake* Arena::CreateMaybeMessage< ::exec::user::BitToUserHandshake >(Arena* arena) {
  return Arena::CreateInternal< ::exec::user::BitToUserHandshake >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::exec::user::LikeFilter* Arena::CreateMaybeMessage< ::exec::user::LikeFilter >(Arena* arena) {
  return Arena::CreateInternal< ::exec::user::LikeFilter >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::exec::user::GetCatalogsReq* Arena::CreateMaybeMessage< ::exec::user::GetCatalogsReq >(Arena* arena) {
  return Arena::CreateInternal< ::exec::user::GetCatalogsReq >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::exec::user::CatalogMetadata* Arena::CreateMaybeMessage< ::exec::user::CatalogMetadata >(Arena* arena) {
  return Arena::CreateInternal< ::exec::user::CatalogMetadata >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::exec::user::GetCatalogsResp* Arena::CreateMaybeMessage< ::exec::user::GetCatalogsResp >(Arena* arena) {
  return Arena::CreateInternal< ::exec::user::GetCatalogsResp >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::exec::user::GetSchemasReq* Arena::CreateMaybeMessage< ::exec::user::GetSchemasReq >(Arena* arena) {
  return Arena::CreateInternal< ::exec::user::GetSchemasReq >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::exec::user::SchemaMetadata* Arena::CreateMaybeMessage< ::exec::user::SchemaMetadata >(Arena* arena) {
  return Arena::CreateInternal< ::exec::user::SchemaMetadata >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::exec::user::GetSchemasResp* Arena::CreateMaybeMessage< ::exec::user::GetSchemasResp >(Arena* arena) {
  return Arena::CreateInternal< ::exec::user::GetSchemasResp >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::exec::user::GetTablesReq* Arena::CreateMaybeMessage< ::exec::user::GetTablesReq >(Arena* arena) {
  return Arena::CreateInternal< ::exec::user::GetTablesReq >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::exec::user::TableMetadata* Arena::CreateMaybeMessage< ::exec::user::TableMetadata >(Arena* arena) {
  return Arena::CreateInternal< ::exec::user::TableMetadata >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::exec::user::GetTablesResp* Arena::CreateMaybeMessage< ::exec::user::GetTablesResp >(Arena* arena) {
  return Arena::CreateInternal< ::exec::user::GetTablesResp >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::exec::user::GetColumnsReq* Arena::CreateMaybeMessage< ::exec::user::GetColumnsReq >(Arena* arena) {
  return Arena::CreateInternal< ::exec::user::GetColumnsReq >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::exec::user::ColumnMetadata* Arena::CreateMaybeMessage< ::exec::user::ColumnMetadata >(Arena* arena) {
  return Arena::CreateInternal< ::exec::user::ColumnMetadata >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::exec::user::GetColumnsResp* Arena::CreateMaybeMessage< ::exec::user::GetColumnsResp >(Arena* arena) {
  return Arena::CreateInternal< ::exec::user::GetColumnsResp >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::exec::user::CreatePreparedStatementReq* Arena::CreateMaybeMessage< ::exec::user::CreatePreparedStatementReq >(Arena* arena) {
  return Arena::CreateInternal< ::exec::user::CreatePreparedStatementReq >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::exec::user::ResultColumnMetadata* Arena::CreateMaybeMessage< ::exec::user::ResultColumnMetadata >(Arena* arena) {
  return Arena::CreateInternal< ::exec::user::ResultColumnMetadata >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::exec::user::PreparedStatementHandle* Arena::CreateMaybeMessage< ::exec::user::PreparedStatementHandle >(Arena* arena) {
  return Arena::CreateInternal< ::exec::user::PreparedStatementHandle >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::exec::user::PreparedStatement* Arena::CreateMaybeMessage< ::exec::user::PreparedStatement >(Arena* arena) {
  return Arena::CreateInternal< ::exec::user::PreparedStatement >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::exec::user::CreatePreparedStatementResp* Arena::CreateMaybeMessage< ::exec::user::CreatePreparedStatementResp >(Arena* arena) {
  return Arena::CreateInternal< ::exec::user::CreatePreparedStatementResp >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::exec::user::GetServerMetaReq* Arena::CreateMaybeMessage< ::exec::user::GetServerMetaReq >(Arena* arena) {
  return Arena::CreateInternal< ::exec::user::GetServerMetaReq >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::exec::user::ConvertSupport* Arena::CreateMaybeMessage< ::exec::user::ConvertSupport >(Arena* arena) {
  return Arena::CreateInternal< ::exec::user::ConvertSupport >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::exec::user::GetServerMetaResp* Arena::CreateMaybeMessage< ::exec::user::GetServerMetaResp >(Arena* arena) {
  return Arena::CreateInternal< ::exec::user::GetServerMetaResp >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::exec::user::ServerMeta* Arena::CreateMaybeMessage< ::exec::user::ServerMeta >(Arena* arena) {
  return Arena::CreateInternal< ::exec::user::ServerMeta >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::exec::user::RunQuery* Arena::CreateMaybeMessage< ::exec::user::RunQuery >(Arena* arena) {
  return Arena::CreateInternal< ::exec::user::RunQuery >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
