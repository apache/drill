// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BitData.proto

#ifndef PROTOBUF_INCLUDED_BitData_2eproto
#define PROTOBUF_INCLUDED_BitData_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "ExecutionProtos.pb.h"
#include "Coordination.pb.h"
#include "UserBitShared.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_BitData_2eproto 

namespace protobuf_BitData_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_BitData_2eproto
namespace exec {
namespace bit {
namespace data {
class BitClientHandshake;
class BitClientHandshakeDefaultTypeInternal;
extern BitClientHandshakeDefaultTypeInternal _BitClientHandshake_default_instance_;
class BitServerHandshake;
class BitServerHandshakeDefaultTypeInternal;
extern BitServerHandshakeDefaultTypeInternal _BitServerHandshake_default_instance_;
class FragmentRecordBatch;
class FragmentRecordBatchDefaultTypeInternal;
extern FragmentRecordBatchDefaultTypeInternal _FragmentRecordBatch_default_instance_;
class RuntimeFilterBDef;
class RuntimeFilterBDefDefaultTypeInternal;
extern RuntimeFilterBDefDefaultTypeInternal _RuntimeFilterBDef_default_instance_;
}  // namespace data
}  // namespace bit
}  // namespace exec
namespace google {
namespace protobuf {
template<> ::exec::bit::data::BitClientHandshake* Arena::CreateMaybeMessage<::exec::bit::data::BitClientHandshake>(Arena*);
template<> ::exec::bit::data::BitServerHandshake* Arena::CreateMaybeMessage<::exec::bit::data::BitServerHandshake>(Arena*);
template<> ::exec::bit::data::FragmentRecordBatch* Arena::CreateMaybeMessage<::exec::bit::data::FragmentRecordBatch>(Arena*);
template<> ::exec::bit::data::RuntimeFilterBDef* Arena::CreateMaybeMessage<::exec::bit::data::RuntimeFilterBDef>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace exec {
namespace bit {
namespace data {

enum RpcType {
  HANDSHAKE = 0,
  ACK = 1,
  GOODBYE = 2,
  REQ_RECORD_BATCH = 3,
  SASL_MESSAGE = 4,
  REQ_RUNTIME_FILTER = 5
};
bool RpcType_IsValid(int value);
const RpcType RpcType_MIN = HANDSHAKE;
const RpcType RpcType_MAX = REQ_RUNTIME_FILTER;
const int RpcType_ARRAYSIZE = RpcType_MAX + 1;

const ::google::protobuf::EnumDescriptor* RpcType_descriptor();
inline const ::std::string& RpcType_Name(RpcType value) {
  return ::google::protobuf::internal::NameOfEnum(
    RpcType_descriptor(), value);
}
inline bool RpcType_Parse(
    const ::std::string& name, RpcType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RpcType>(
    RpcType_descriptor(), name, value);
}
// ===================================================================

class BitClientHandshake : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:exec.bit.data.BitClientHandshake) */ {
 public:
  BitClientHandshake();
  virtual ~BitClientHandshake();

  BitClientHandshake(const BitClientHandshake& from);

  inline BitClientHandshake& operator=(const BitClientHandshake& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BitClientHandshake(BitClientHandshake&& from) noexcept
    : BitClientHandshake() {
    *this = ::std::move(from);
  }

  inline BitClientHandshake& operator=(BitClientHandshake&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BitClientHandshake& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BitClientHandshake* internal_default_instance() {
    return reinterpret_cast<const BitClientHandshake*>(
               &_BitClientHandshake_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(BitClientHandshake* other);
  friend void swap(BitClientHandshake& a, BitClientHandshake& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BitClientHandshake* New() const final {
    return CreateMaybeMessage<BitClientHandshake>(NULL);
  }

  BitClientHandshake* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BitClientHandshake>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BitClientHandshake& from);
  void MergeFrom(const BitClientHandshake& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BitClientHandshake* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 rpc_version = 1;
  bool has_rpc_version() const;
  void clear_rpc_version();
  static const int kRpcVersionFieldNumber = 1;
  ::google::protobuf::int32 rpc_version() const;
  void set_rpc_version(::google::protobuf::int32 value);

  // optional .exec.shared.RpcChannel channel = 2 [default = BIT_DATA];
  bool has_channel() const;
  void clear_channel();
  static const int kChannelFieldNumber = 2;
  ::exec::shared::RpcChannel channel() const;
  void set_channel(::exec::shared::RpcChannel value);

  // @@protoc_insertion_point(class_scope:exec.bit.data.BitClientHandshake)
 private:
  void set_has_rpc_version();
  void clear_has_rpc_version();
  void set_has_channel();
  void clear_has_channel();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 rpc_version_;
  int channel_;
  friend struct ::protobuf_BitData_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BitServerHandshake : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:exec.bit.data.BitServerHandshake) */ {
 public:
  BitServerHandshake();
  virtual ~BitServerHandshake();

  BitServerHandshake(const BitServerHandshake& from);

  inline BitServerHandshake& operator=(const BitServerHandshake& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BitServerHandshake(BitServerHandshake&& from) noexcept
    : BitServerHandshake() {
    *this = ::std::move(from);
  }

  inline BitServerHandshake& operator=(BitServerHandshake&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BitServerHandshake& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BitServerHandshake* internal_default_instance() {
    return reinterpret_cast<const BitServerHandshake*>(
               &_BitServerHandshake_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(BitServerHandshake* other);
  friend void swap(BitServerHandshake& a, BitServerHandshake& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BitServerHandshake* New() const final {
    return CreateMaybeMessage<BitServerHandshake>(NULL);
  }

  BitServerHandshake* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BitServerHandshake>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BitServerHandshake& from);
  void MergeFrom(const BitServerHandshake& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BitServerHandshake* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string authenticationMechanisms = 2;
  int authenticationmechanisms_size() const;
  void clear_authenticationmechanisms();
  static const int kAuthenticationMechanismsFieldNumber = 2;
  const ::std::string& authenticationmechanisms(int index) const;
  ::std::string* mutable_authenticationmechanisms(int index);
  void set_authenticationmechanisms(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_authenticationmechanisms(int index, ::std::string&& value);
  #endif
  void set_authenticationmechanisms(int index, const char* value);
  void set_authenticationmechanisms(int index, const char* value, size_t size);
  ::std::string* add_authenticationmechanisms();
  void add_authenticationmechanisms(const ::std::string& value);
  #if LANG_CXX11
  void add_authenticationmechanisms(::std::string&& value);
  #endif
  void add_authenticationmechanisms(const char* value);
  void add_authenticationmechanisms(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& authenticationmechanisms() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_authenticationmechanisms();

  // optional int32 rpc_version = 1;
  bool has_rpc_version() const;
  void clear_rpc_version();
  static const int kRpcVersionFieldNumber = 1;
  ::google::protobuf::int32 rpc_version() const;
  void set_rpc_version(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:exec.bit.data.BitServerHandshake)
 private:
  void set_has_rpc_version();
  void clear_has_rpc_version();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> authenticationmechanisms_;
  ::google::protobuf::int32 rpc_version_;
  friend struct ::protobuf_BitData_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FragmentRecordBatch : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:exec.bit.data.FragmentRecordBatch) */ {
 public:
  FragmentRecordBatch();
  virtual ~FragmentRecordBatch();

  FragmentRecordBatch(const FragmentRecordBatch& from);

  inline FragmentRecordBatch& operator=(const FragmentRecordBatch& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FragmentRecordBatch(FragmentRecordBatch&& from) noexcept
    : FragmentRecordBatch() {
    *this = ::std::move(from);
  }

  inline FragmentRecordBatch& operator=(FragmentRecordBatch&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FragmentRecordBatch& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FragmentRecordBatch* internal_default_instance() {
    return reinterpret_cast<const FragmentRecordBatch*>(
               &_FragmentRecordBatch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(FragmentRecordBatch* other);
  friend void swap(FragmentRecordBatch& a, FragmentRecordBatch& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FragmentRecordBatch* New() const final {
    return CreateMaybeMessage<FragmentRecordBatch>(NULL);
  }

  FragmentRecordBatch* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FragmentRecordBatch>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FragmentRecordBatch& from);
  void MergeFrom(const FragmentRecordBatch& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FragmentRecordBatch* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 receiving_minor_fragment_id = 3;
  int receiving_minor_fragment_id_size() const;
  void clear_receiving_minor_fragment_id();
  static const int kReceivingMinorFragmentIdFieldNumber = 3;
  ::google::protobuf::int32 receiving_minor_fragment_id(int index) const;
  void set_receiving_minor_fragment_id(int index, ::google::protobuf::int32 value);
  void add_receiving_minor_fragment_id(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      receiving_minor_fragment_id() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_receiving_minor_fragment_id();

  // optional .exec.shared.QueryId query_id = 1;
  bool has_query_id() const;
  void clear_query_id();
  static const int kQueryIdFieldNumber = 1;
  private:
  const ::exec::shared::QueryId& _internal_query_id() const;
  public:
  const ::exec::shared::QueryId& query_id() const;
  ::exec::shared::QueryId* release_query_id();
  ::exec::shared::QueryId* mutable_query_id();
  void set_allocated_query_id(::exec::shared::QueryId* query_id);

  // optional .exec.shared.RecordBatchDef def = 6;
  bool has_def() const;
  void clear_def();
  static const int kDefFieldNumber = 6;
  private:
  const ::exec::shared::RecordBatchDef& _internal_def() const;
  public:
  const ::exec::shared::RecordBatchDef& def() const;
  ::exec::shared::RecordBatchDef* release_def();
  ::exec::shared::RecordBatchDef* mutable_def();
  void set_allocated_def(::exec::shared::RecordBatchDef* def);

  // optional int32 receiving_major_fragment_id = 2;
  bool has_receiving_major_fragment_id() const;
  void clear_receiving_major_fragment_id();
  static const int kReceivingMajorFragmentIdFieldNumber = 2;
  ::google::protobuf::int32 receiving_major_fragment_id() const;
  void set_receiving_major_fragment_id(::google::protobuf::int32 value);

  // optional int32 sending_major_fragment_id = 4;
  bool has_sending_major_fragment_id() const;
  void clear_sending_major_fragment_id();
  static const int kSendingMajorFragmentIdFieldNumber = 4;
  ::google::protobuf::int32 sending_major_fragment_id() const;
  void set_sending_major_fragment_id(::google::protobuf::int32 value);

  // optional int32 sending_minor_fragment_id = 5;
  bool has_sending_minor_fragment_id() const;
  void clear_sending_minor_fragment_id();
  static const int kSendingMinorFragmentIdFieldNumber = 5;
  ::google::protobuf::int32 sending_minor_fragment_id() const;
  void set_sending_minor_fragment_id(::google::protobuf::int32 value);

  // optional bool isLastBatch = 7;
  bool has_islastbatch() const;
  void clear_islastbatch();
  static const int kIsLastBatchFieldNumber = 7;
  bool islastbatch() const;
  void set_islastbatch(bool value);

  // @@protoc_insertion_point(class_scope:exec.bit.data.FragmentRecordBatch)
 private:
  void set_has_query_id();
  void clear_has_query_id();
  void set_has_receiving_major_fragment_id();
  void clear_has_receiving_major_fragment_id();
  void set_has_sending_major_fragment_id();
  void clear_has_sending_major_fragment_id();
  void set_has_sending_minor_fragment_id();
  void clear_has_sending_minor_fragment_id();
  void set_has_def();
  void clear_has_def();
  void set_has_islastbatch();
  void clear_has_islastbatch();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > receiving_minor_fragment_id_;
  ::exec::shared::QueryId* query_id_;
  ::exec::shared::RecordBatchDef* def_;
  ::google::protobuf::int32 receiving_major_fragment_id_;
  ::google::protobuf::int32 sending_major_fragment_id_;
  ::google::protobuf::int32 sending_minor_fragment_id_;
  bool islastbatch_;
  friend struct ::protobuf_BitData_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RuntimeFilterBDef : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:exec.bit.data.RuntimeFilterBDef) */ {
 public:
  RuntimeFilterBDef();
  virtual ~RuntimeFilterBDef();

  RuntimeFilterBDef(const RuntimeFilterBDef& from);

  inline RuntimeFilterBDef& operator=(const RuntimeFilterBDef& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RuntimeFilterBDef(RuntimeFilterBDef&& from) noexcept
    : RuntimeFilterBDef() {
    *this = ::std::move(from);
  }

  inline RuntimeFilterBDef& operator=(RuntimeFilterBDef&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RuntimeFilterBDef& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RuntimeFilterBDef* internal_default_instance() {
    return reinterpret_cast<const RuntimeFilterBDef*>(
               &_RuntimeFilterBDef_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(RuntimeFilterBDef* other);
  friend void swap(RuntimeFilterBDef& a, RuntimeFilterBDef& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RuntimeFilterBDef* New() const final {
    return CreateMaybeMessage<RuntimeFilterBDef>(NULL);
  }

  RuntimeFilterBDef* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RuntimeFilterBDef>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RuntimeFilterBDef& from);
  void MergeFrom(const RuntimeFilterBDef& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RuntimeFilterBDef* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 bloom_filter_size_in_bytes = 5;
  int bloom_filter_size_in_bytes_size() const;
  void clear_bloom_filter_size_in_bytes();
  static const int kBloomFilterSizeInBytesFieldNumber = 5;
  ::google::protobuf::int32 bloom_filter_size_in_bytes(int index) const;
  void set_bloom_filter_size_in_bytes(int index, ::google::protobuf::int32 value);
  void add_bloom_filter_size_in_bytes(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      bloom_filter_size_in_bytes() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_bloom_filter_size_in_bytes();

  // repeated string probe_fields = 6;
  int probe_fields_size() const;
  void clear_probe_fields();
  static const int kProbeFieldsFieldNumber = 6;
  const ::std::string& probe_fields(int index) const;
  ::std::string* mutable_probe_fields(int index);
  void set_probe_fields(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_probe_fields(int index, ::std::string&& value);
  #endif
  void set_probe_fields(int index, const char* value);
  void set_probe_fields(int index, const char* value, size_t size);
  ::std::string* add_probe_fields();
  void add_probe_fields(const ::std::string& value);
  #if LANG_CXX11
  void add_probe_fields(::std::string&& value);
  #endif
  void add_probe_fields(const char* value);
  void add_probe_fields(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& probe_fields() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_probe_fields();

  // optional .exec.shared.QueryId query_id = 1;
  bool has_query_id() const;
  void clear_query_id();
  static const int kQueryIdFieldNumber = 1;
  private:
  const ::exec::shared::QueryId& _internal_query_id() const;
  public:
  const ::exec::shared::QueryId& query_id() const;
  ::exec::shared::QueryId* release_query_id();
  ::exec::shared::QueryId* mutable_query_id();
  void set_allocated_query_id(::exec::shared::QueryId* query_id);

  // optional int32 major_fragment_id = 2;
  bool has_major_fragment_id() const;
  void clear_major_fragment_id();
  static const int kMajorFragmentIdFieldNumber = 2;
  ::google::protobuf::int32 major_fragment_id() const;
  void set_major_fragment_id(::google::protobuf::int32 value);

  // optional int32 minor_fragment_id = 3;
  bool has_minor_fragment_id() const;
  void clear_minor_fragment_id();
  static const int kMinorFragmentIdFieldNumber = 3;
  ::google::protobuf::int32 minor_fragment_id() const;
  void set_minor_fragment_id(::google::protobuf::int32 value);

  // optional bool to_foreman = 4;
  bool has_to_foreman() const;
  void clear_to_foreman();
  static const int kToForemanFieldNumber = 4;
  bool to_foreman() const;
  void set_to_foreman(bool value);

  // optional int32 hj_op_id = 7;
  bool has_hj_op_id() const;
  void clear_hj_op_id();
  static const int kHjOpIdFieldNumber = 7;
  ::google::protobuf::int32 hj_op_id() const;
  void set_hj_op_id(::google::protobuf::int32 value);

  // optional int64 rf_identifier = 8;
  bool has_rf_identifier() const;
  void clear_rf_identifier();
  static const int kRfIdentifierFieldNumber = 8;
  ::google::protobuf::int64 rf_identifier() const;
  void set_rf_identifier(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:exec.bit.data.RuntimeFilterBDef)
 private:
  void set_has_query_id();
  void clear_has_query_id();
  void set_has_major_fragment_id();
  void clear_has_major_fragment_id();
  void set_has_minor_fragment_id();
  void clear_has_minor_fragment_id();
  void set_has_to_foreman();
  void clear_has_to_foreman();
  void set_has_hj_op_id();
  void clear_has_hj_op_id();
  void set_has_rf_identifier();
  void clear_has_rf_identifier();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > bloom_filter_size_in_bytes_;
  ::google::protobuf::RepeatedPtrField< ::std::string> probe_fields_;
  ::exec::shared::QueryId* query_id_;
  ::google::protobuf::int32 major_fragment_id_;
  ::google::protobuf::int32 minor_fragment_id_;
  bool to_foreman_;
  ::google::protobuf::int32 hj_op_id_;
  ::google::protobuf::int64 rf_identifier_;
  friend struct ::protobuf_BitData_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BitClientHandshake

// optional int32 rpc_version = 1;
inline bool BitClientHandshake::has_rpc_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BitClientHandshake::set_has_rpc_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BitClientHandshake::clear_has_rpc_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BitClientHandshake::clear_rpc_version() {
  rpc_version_ = 0;
  clear_has_rpc_version();
}
inline ::google::protobuf::int32 BitClientHandshake::rpc_version() const {
  // @@protoc_insertion_point(field_get:exec.bit.data.BitClientHandshake.rpc_version)
  return rpc_version_;
}
inline void BitClientHandshake::set_rpc_version(::google::protobuf::int32 value) {
  set_has_rpc_version();
  rpc_version_ = value;
  // @@protoc_insertion_point(field_set:exec.bit.data.BitClientHandshake.rpc_version)
}

// optional .exec.shared.RpcChannel channel = 2 [default = BIT_DATA];
inline bool BitClientHandshake::has_channel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BitClientHandshake::set_has_channel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BitClientHandshake::clear_has_channel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BitClientHandshake::clear_channel() {
  channel_ = 1;
  clear_has_channel();
}
inline ::exec::shared::RpcChannel BitClientHandshake::channel() const {
  // @@protoc_insertion_point(field_get:exec.bit.data.BitClientHandshake.channel)
  return static_cast< ::exec::shared::RpcChannel >(channel_);
}
inline void BitClientHandshake::set_channel(::exec::shared::RpcChannel value) {
  assert(::exec::shared::RpcChannel_IsValid(value));
  set_has_channel();
  channel_ = value;
  // @@protoc_insertion_point(field_set:exec.bit.data.BitClientHandshake.channel)
}

// -------------------------------------------------------------------

// BitServerHandshake

// optional int32 rpc_version = 1;
inline bool BitServerHandshake::has_rpc_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BitServerHandshake::set_has_rpc_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BitServerHandshake::clear_has_rpc_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BitServerHandshake::clear_rpc_version() {
  rpc_version_ = 0;
  clear_has_rpc_version();
}
inline ::google::protobuf::int32 BitServerHandshake::rpc_version() const {
  // @@protoc_insertion_point(field_get:exec.bit.data.BitServerHandshake.rpc_version)
  return rpc_version_;
}
inline void BitServerHandshake::set_rpc_version(::google::protobuf::int32 value) {
  set_has_rpc_version();
  rpc_version_ = value;
  // @@protoc_insertion_point(field_set:exec.bit.data.BitServerHandshake.rpc_version)
}

// repeated string authenticationMechanisms = 2;
inline int BitServerHandshake::authenticationmechanisms_size() const {
  return authenticationmechanisms_.size();
}
inline void BitServerHandshake::clear_authenticationmechanisms() {
  authenticationmechanisms_.Clear();
}
inline const ::std::string& BitServerHandshake::authenticationmechanisms(int index) const {
  // @@protoc_insertion_point(field_get:exec.bit.data.BitServerHandshake.authenticationMechanisms)
  return authenticationmechanisms_.Get(index);
}
inline ::std::string* BitServerHandshake::mutable_authenticationmechanisms(int index) {
  // @@protoc_insertion_point(field_mutable:exec.bit.data.BitServerHandshake.authenticationMechanisms)
  return authenticationmechanisms_.Mutable(index);
}
inline void BitServerHandshake::set_authenticationmechanisms(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:exec.bit.data.BitServerHandshake.authenticationMechanisms)
  authenticationmechanisms_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void BitServerHandshake::set_authenticationmechanisms(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:exec.bit.data.BitServerHandshake.authenticationMechanisms)
  authenticationmechanisms_.Mutable(index)->assign(std::move(value));
}
#endif
inline void BitServerHandshake::set_authenticationmechanisms(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  authenticationmechanisms_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:exec.bit.data.BitServerHandshake.authenticationMechanisms)
}
inline void BitServerHandshake::set_authenticationmechanisms(int index, const char* value, size_t size) {
  authenticationmechanisms_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:exec.bit.data.BitServerHandshake.authenticationMechanisms)
}
inline ::std::string* BitServerHandshake::add_authenticationmechanisms() {
  // @@protoc_insertion_point(field_add_mutable:exec.bit.data.BitServerHandshake.authenticationMechanisms)
  return authenticationmechanisms_.Add();
}
inline void BitServerHandshake::add_authenticationmechanisms(const ::std::string& value) {
  authenticationmechanisms_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:exec.bit.data.BitServerHandshake.authenticationMechanisms)
}
#if LANG_CXX11
inline void BitServerHandshake::add_authenticationmechanisms(::std::string&& value) {
  authenticationmechanisms_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:exec.bit.data.BitServerHandshake.authenticationMechanisms)
}
#endif
inline void BitServerHandshake::add_authenticationmechanisms(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  authenticationmechanisms_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:exec.bit.data.BitServerHandshake.authenticationMechanisms)
}
inline void BitServerHandshake::add_authenticationmechanisms(const char* value, size_t size) {
  authenticationmechanisms_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:exec.bit.data.BitServerHandshake.authenticationMechanisms)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BitServerHandshake::authenticationmechanisms() const {
  // @@protoc_insertion_point(field_list:exec.bit.data.BitServerHandshake.authenticationMechanisms)
  return authenticationmechanisms_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BitServerHandshake::mutable_authenticationmechanisms() {
  // @@protoc_insertion_point(field_mutable_list:exec.bit.data.BitServerHandshake.authenticationMechanisms)
  return &authenticationmechanisms_;
}

// -------------------------------------------------------------------

// FragmentRecordBatch

// optional .exec.shared.QueryId query_id = 1;
inline bool FragmentRecordBatch::has_query_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FragmentRecordBatch::set_has_query_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FragmentRecordBatch::clear_has_query_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::exec::shared::QueryId& FragmentRecordBatch::_internal_query_id() const {
  return *query_id_;
}
inline const ::exec::shared::QueryId& FragmentRecordBatch::query_id() const {
  const ::exec::shared::QueryId* p = query_id_;
  // @@protoc_insertion_point(field_get:exec.bit.data.FragmentRecordBatch.query_id)
  return p != NULL ? *p : *reinterpret_cast<const ::exec::shared::QueryId*>(
      &::exec::shared::_QueryId_default_instance_);
}
inline ::exec::shared::QueryId* FragmentRecordBatch::release_query_id() {
  // @@protoc_insertion_point(field_release:exec.bit.data.FragmentRecordBatch.query_id)
  clear_has_query_id();
  ::exec::shared::QueryId* temp = query_id_;
  query_id_ = NULL;
  return temp;
}
inline ::exec::shared::QueryId* FragmentRecordBatch::mutable_query_id() {
  set_has_query_id();
  if (query_id_ == NULL) {
    auto* p = CreateMaybeMessage<::exec::shared::QueryId>(GetArenaNoVirtual());
    query_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:exec.bit.data.FragmentRecordBatch.query_id)
  return query_id_;
}
inline void FragmentRecordBatch::set_allocated_query_id(::exec::shared::QueryId* query_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(query_id_);
  }
  if (query_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      query_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, query_id, submessage_arena);
    }
    set_has_query_id();
  } else {
    clear_has_query_id();
  }
  query_id_ = query_id;
  // @@protoc_insertion_point(field_set_allocated:exec.bit.data.FragmentRecordBatch.query_id)
}

// optional int32 receiving_major_fragment_id = 2;
inline bool FragmentRecordBatch::has_receiving_major_fragment_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FragmentRecordBatch::set_has_receiving_major_fragment_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FragmentRecordBatch::clear_has_receiving_major_fragment_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FragmentRecordBatch::clear_receiving_major_fragment_id() {
  receiving_major_fragment_id_ = 0;
  clear_has_receiving_major_fragment_id();
}
inline ::google::protobuf::int32 FragmentRecordBatch::receiving_major_fragment_id() const {
  // @@protoc_insertion_point(field_get:exec.bit.data.FragmentRecordBatch.receiving_major_fragment_id)
  return receiving_major_fragment_id_;
}
inline void FragmentRecordBatch::set_receiving_major_fragment_id(::google::protobuf::int32 value) {
  set_has_receiving_major_fragment_id();
  receiving_major_fragment_id_ = value;
  // @@protoc_insertion_point(field_set:exec.bit.data.FragmentRecordBatch.receiving_major_fragment_id)
}

// repeated int32 receiving_minor_fragment_id = 3;
inline int FragmentRecordBatch::receiving_minor_fragment_id_size() const {
  return receiving_minor_fragment_id_.size();
}
inline void FragmentRecordBatch::clear_receiving_minor_fragment_id() {
  receiving_minor_fragment_id_.Clear();
}
inline ::google::protobuf::int32 FragmentRecordBatch::receiving_minor_fragment_id(int index) const {
  // @@protoc_insertion_point(field_get:exec.bit.data.FragmentRecordBatch.receiving_minor_fragment_id)
  return receiving_minor_fragment_id_.Get(index);
}
inline void FragmentRecordBatch::set_receiving_minor_fragment_id(int index, ::google::protobuf::int32 value) {
  receiving_minor_fragment_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:exec.bit.data.FragmentRecordBatch.receiving_minor_fragment_id)
}
inline void FragmentRecordBatch::add_receiving_minor_fragment_id(::google::protobuf::int32 value) {
  receiving_minor_fragment_id_.Add(value);
  // @@protoc_insertion_point(field_add:exec.bit.data.FragmentRecordBatch.receiving_minor_fragment_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
FragmentRecordBatch::receiving_minor_fragment_id() const {
  // @@protoc_insertion_point(field_list:exec.bit.data.FragmentRecordBatch.receiving_minor_fragment_id)
  return receiving_minor_fragment_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
FragmentRecordBatch::mutable_receiving_minor_fragment_id() {
  // @@protoc_insertion_point(field_mutable_list:exec.bit.data.FragmentRecordBatch.receiving_minor_fragment_id)
  return &receiving_minor_fragment_id_;
}

// optional int32 sending_major_fragment_id = 4;
inline bool FragmentRecordBatch::has_sending_major_fragment_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FragmentRecordBatch::set_has_sending_major_fragment_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FragmentRecordBatch::clear_has_sending_major_fragment_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FragmentRecordBatch::clear_sending_major_fragment_id() {
  sending_major_fragment_id_ = 0;
  clear_has_sending_major_fragment_id();
}
inline ::google::protobuf::int32 FragmentRecordBatch::sending_major_fragment_id() const {
  // @@protoc_insertion_point(field_get:exec.bit.data.FragmentRecordBatch.sending_major_fragment_id)
  return sending_major_fragment_id_;
}
inline void FragmentRecordBatch::set_sending_major_fragment_id(::google::protobuf::int32 value) {
  set_has_sending_major_fragment_id();
  sending_major_fragment_id_ = value;
  // @@protoc_insertion_point(field_set:exec.bit.data.FragmentRecordBatch.sending_major_fragment_id)
}

// optional int32 sending_minor_fragment_id = 5;
inline bool FragmentRecordBatch::has_sending_minor_fragment_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FragmentRecordBatch::set_has_sending_minor_fragment_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FragmentRecordBatch::clear_has_sending_minor_fragment_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FragmentRecordBatch::clear_sending_minor_fragment_id() {
  sending_minor_fragment_id_ = 0;
  clear_has_sending_minor_fragment_id();
}
inline ::google::protobuf::int32 FragmentRecordBatch::sending_minor_fragment_id() const {
  // @@protoc_insertion_point(field_get:exec.bit.data.FragmentRecordBatch.sending_minor_fragment_id)
  return sending_minor_fragment_id_;
}
inline void FragmentRecordBatch::set_sending_minor_fragment_id(::google::protobuf::int32 value) {
  set_has_sending_minor_fragment_id();
  sending_minor_fragment_id_ = value;
  // @@protoc_insertion_point(field_set:exec.bit.data.FragmentRecordBatch.sending_minor_fragment_id)
}

// optional .exec.shared.RecordBatchDef def = 6;
inline bool FragmentRecordBatch::has_def() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FragmentRecordBatch::set_has_def() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FragmentRecordBatch::clear_has_def() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::exec::shared::RecordBatchDef& FragmentRecordBatch::_internal_def() const {
  return *def_;
}
inline const ::exec::shared::RecordBatchDef& FragmentRecordBatch::def() const {
  const ::exec::shared::RecordBatchDef* p = def_;
  // @@protoc_insertion_point(field_get:exec.bit.data.FragmentRecordBatch.def)
  return p != NULL ? *p : *reinterpret_cast<const ::exec::shared::RecordBatchDef*>(
      &::exec::shared::_RecordBatchDef_default_instance_);
}
inline ::exec::shared::RecordBatchDef* FragmentRecordBatch::release_def() {
  // @@protoc_insertion_point(field_release:exec.bit.data.FragmentRecordBatch.def)
  clear_has_def();
  ::exec::shared::RecordBatchDef* temp = def_;
  def_ = NULL;
  return temp;
}
inline ::exec::shared::RecordBatchDef* FragmentRecordBatch::mutable_def() {
  set_has_def();
  if (def_ == NULL) {
    auto* p = CreateMaybeMessage<::exec::shared::RecordBatchDef>(GetArenaNoVirtual());
    def_ = p;
  }
  // @@protoc_insertion_point(field_mutable:exec.bit.data.FragmentRecordBatch.def)
  return def_;
}
inline void FragmentRecordBatch::set_allocated_def(::exec::shared::RecordBatchDef* def) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(def_);
  }
  if (def) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      def = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, def, submessage_arena);
    }
    set_has_def();
  } else {
    clear_has_def();
  }
  def_ = def;
  // @@protoc_insertion_point(field_set_allocated:exec.bit.data.FragmentRecordBatch.def)
}

// optional bool isLastBatch = 7;
inline bool FragmentRecordBatch::has_islastbatch() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FragmentRecordBatch::set_has_islastbatch() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FragmentRecordBatch::clear_has_islastbatch() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FragmentRecordBatch::clear_islastbatch() {
  islastbatch_ = false;
  clear_has_islastbatch();
}
inline bool FragmentRecordBatch::islastbatch() const {
  // @@protoc_insertion_point(field_get:exec.bit.data.FragmentRecordBatch.isLastBatch)
  return islastbatch_;
}
inline void FragmentRecordBatch::set_islastbatch(bool value) {
  set_has_islastbatch();
  islastbatch_ = value;
  // @@protoc_insertion_point(field_set:exec.bit.data.FragmentRecordBatch.isLastBatch)
}

// -------------------------------------------------------------------

// RuntimeFilterBDef

// optional .exec.shared.QueryId query_id = 1;
inline bool RuntimeFilterBDef::has_query_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RuntimeFilterBDef::set_has_query_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RuntimeFilterBDef::clear_has_query_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::exec::shared::QueryId& RuntimeFilterBDef::_internal_query_id() const {
  return *query_id_;
}
inline const ::exec::shared::QueryId& RuntimeFilterBDef::query_id() const {
  const ::exec::shared::QueryId* p = query_id_;
  // @@protoc_insertion_point(field_get:exec.bit.data.RuntimeFilterBDef.query_id)
  return p != NULL ? *p : *reinterpret_cast<const ::exec::shared::QueryId*>(
      &::exec::shared::_QueryId_default_instance_);
}
inline ::exec::shared::QueryId* RuntimeFilterBDef::release_query_id() {
  // @@protoc_insertion_point(field_release:exec.bit.data.RuntimeFilterBDef.query_id)
  clear_has_query_id();
  ::exec::shared::QueryId* temp = query_id_;
  query_id_ = NULL;
  return temp;
}
inline ::exec::shared::QueryId* RuntimeFilterBDef::mutable_query_id() {
  set_has_query_id();
  if (query_id_ == NULL) {
    auto* p = CreateMaybeMessage<::exec::shared::QueryId>(GetArenaNoVirtual());
    query_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:exec.bit.data.RuntimeFilterBDef.query_id)
  return query_id_;
}
inline void RuntimeFilterBDef::set_allocated_query_id(::exec::shared::QueryId* query_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(query_id_);
  }
  if (query_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      query_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, query_id, submessage_arena);
    }
    set_has_query_id();
  } else {
    clear_has_query_id();
  }
  query_id_ = query_id;
  // @@protoc_insertion_point(field_set_allocated:exec.bit.data.RuntimeFilterBDef.query_id)
}

// optional int32 major_fragment_id = 2;
inline bool RuntimeFilterBDef::has_major_fragment_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RuntimeFilterBDef::set_has_major_fragment_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RuntimeFilterBDef::clear_has_major_fragment_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RuntimeFilterBDef::clear_major_fragment_id() {
  major_fragment_id_ = 0;
  clear_has_major_fragment_id();
}
inline ::google::protobuf::int32 RuntimeFilterBDef::major_fragment_id() const {
  // @@protoc_insertion_point(field_get:exec.bit.data.RuntimeFilterBDef.major_fragment_id)
  return major_fragment_id_;
}
inline void RuntimeFilterBDef::set_major_fragment_id(::google::protobuf::int32 value) {
  set_has_major_fragment_id();
  major_fragment_id_ = value;
  // @@protoc_insertion_point(field_set:exec.bit.data.RuntimeFilterBDef.major_fragment_id)
}

// optional int32 minor_fragment_id = 3;
inline bool RuntimeFilterBDef::has_minor_fragment_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RuntimeFilterBDef::set_has_minor_fragment_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RuntimeFilterBDef::clear_has_minor_fragment_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RuntimeFilterBDef::clear_minor_fragment_id() {
  minor_fragment_id_ = 0;
  clear_has_minor_fragment_id();
}
inline ::google::protobuf::int32 RuntimeFilterBDef::minor_fragment_id() const {
  // @@protoc_insertion_point(field_get:exec.bit.data.RuntimeFilterBDef.minor_fragment_id)
  return minor_fragment_id_;
}
inline void RuntimeFilterBDef::set_minor_fragment_id(::google::protobuf::int32 value) {
  set_has_minor_fragment_id();
  minor_fragment_id_ = value;
  // @@protoc_insertion_point(field_set:exec.bit.data.RuntimeFilterBDef.minor_fragment_id)
}

// optional bool to_foreman = 4;
inline bool RuntimeFilterBDef::has_to_foreman() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RuntimeFilterBDef::set_has_to_foreman() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RuntimeFilterBDef::clear_has_to_foreman() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RuntimeFilterBDef::clear_to_foreman() {
  to_foreman_ = false;
  clear_has_to_foreman();
}
inline bool RuntimeFilterBDef::to_foreman() const {
  // @@protoc_insertion_point(field_get:exec.bit.data.RuntimeFilterBDef.to_foreman)
  return to_foreman_;
}
inline void RuntimeFilterBDef::set_to_foreman(bool value) {
  set_has_to_foreman();
  to_foreman_ = value;
  // @@protoc_insertion_point(field_set:exec.bit.data.RuntimeFilterBDef.to_foreman)
}

// repeated int32 bloom_filter_size_in_bytes = 5;
inline int RuntimeFilterBDef::bloom_filter_size_in_bytes_size() const {
  return bloom_filter_size_in_bytes_.size();
}
inline void RuntimeFilterBDef::clear_bloom_filter_size_in_bytes() {
  bloom_filter_size_in_bytes_.Clear();
}
inline ::google::protobuf::int32 RuntimeFilterBDef::bloom_filter_size_in_bytes(int index) const {
  // @@protoc_insertion_point(field_get:exec.bit.data.RuntimeFilterBDef.bloom_filter_size_in_bytes)
  return bloom_filter_size_in_bytes_.Get(index);
}
inline void RuntimeFilterBDef::set_bloom_filter_size_in_bytes(int index, ::google::protobuf::int32 value) {
  bloom_filter_size_in_bytes_.Set(index, value);
  // @@protoc_insertion_point(field_set:exec.bit.data.RuntimeFilterBDef.bloom_filter_size_in_bytes)
}
inline void RuntimeFilterBDef::add_bloom_filter_size_in_bytes(::google::protobuf::int32 value) {
  bloom_filter_size_in_bytes_.Add(value);
  // @@protoc_insertion_point(field_add:exec.bit.data.RuntimeFilterBDef.bloom_filter_size_in_bytes)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RuntimeFilterBDef::bloom_filter_size_in_bytes() const {
  // @@protoc_insertion_point(field_list:exec.bit.data.RuntimeFilterBDef.bloom_filter_size_in_bytes)
  return bloom_filter_size_in_bytes_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RuntimeFilterBDef::mutable_bloom_filter_size_in_bytes() {
  // @@protoc_insertion_point(field_mutable_list:exec.bit.data.RuntimeFilterBDef.bloom_filter_size_in_bytes)
  return &bloom_filter_size_in_bytes_;
}

// repeated string probe_fields = 6;
inline int RuntimeFilterBDef::probe_fields_size() const {
  return probe_fields_.size();
}
inline void RuntimeFilterBDef::clear_probe_fields() {
  probe_fields_.Clear();
}
inline const ::std::string& RuntimeFilterBDef::probe_fields(int index) const {
  // @@protoc_insertion_point(field_get:exec.bit.data.RuntimeFilterBDef.probe_fields)
  return probe_fields_.Get(index);
}
inline ::std::string* RuntimeFilterBDef::mutable_probe_fields(int index) {
  // @@protoc_insertion_point(field_mutable:exec.bit.data.RuntimeFilterBDef.probe_fields)
  return probe_fields_.Mutable(index);
}
inline void RuntimeFilterBDef::set_probe_fields(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:exec.bit.data.RuntimeFilterBDef.probe_fields)
  probe_fields_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void RuntimeFilterBDef::set_probe_fields(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:exec.bit.data.RuntimeFilterBDef.probe_fields)
  probe_fields_.Mutable(index)->assign(std::move(value));
}
#endif
inline void RuntimeFilterBDef::set_probe_fields(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  probe_fields_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:exec.bit.data.RuntimeFilterBDef.probe_fields)
}
inline void RuntimeFilterBDef::set_probe_fields(int index, const char* value, size_t size) {
  probe_fields_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:exec.bit.data.RuntimeFilterBDef.probe_fields)
}
inline ::std::string* RuntimeFilterBDef::add_probe_fields() {
  // @@protoc_insertion_point(field_add_mutable:exec.bit.data.RuntimeFilterBDef.probe_fields)
  return probe_fields_.Add();
}
inline void RuntimeFilterBDef::add_probe_fields(const ::std::string& value) {
  probe_fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:exec.bit.data.RuntimeFilterBDef.probe_fields)
}
#if LANG_CXX11
inline void RuntimeFilterBDef::add_probe_fields(::std::string&& value) {
  probe_fields_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:exec.bit.data.RuntimeFilterBDef.probe_fields)
}
#endif
inline void RuntimeFilterBDef::add_probe_fields(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  probe_fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:exec.bit.data.RuntimeFilterBDef.probe_fields)
}
inline void RuntimeFilterBDef::add_probe_fields(const char* value, size_t size) {
  probe_fields_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:exec.bit.data.RuntimeFilterBDef.probe_fields)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
RuntimeFilterBDef::probe_fields() const {
  // @@protoc_insertion_point(field_list:exec.bit.data.RuntimeFilterBDef.probe_fields)
  return probe_fields_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
RuntimeFilterBDef::mutable_probe_fields() {
  // @@protoc_insertion_point(field_mutable_list:exec.bit.data.RuntimeFilterBDef.probe_fields)
  return &probe_fields_;
}

// optional int32 hj_op_id = 7;
inline bool RuntimeFilterBDef::has_hj_op_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RuntimeFilterBDef::set_has_hj_op_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RuntimeFilterBDef::clear_has_hj_op_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RuntimeFilterBDef::clear_hj_op_id() {
  hj_op_id_ = 0;
  clear_has_hj_op_id();
}
inline ::google::protobuf::int32 RuntimeFilterBDef::hj_op_id() const {
  // @@protoc_insertion_point(field_get:exec.bit.data.RuntimeFilterBDef.hj_op_id)
  return hj_op_id_;
}
inline void RuntimeFilterBDef::set_hj_op_id(::google::protobuf::int32 value) {
  set_has_hj_op_id();
  hj_op_id_ = value;
  // @@protoc_insertion_point(field_set:exec.bit.data.RuntimeFilterBDef.hj_op_id)
}

// optional int64 rf_identifier = 8;
inline bool RuntimeFilterBDef::has_rf_identifier() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RuntimeFilterBDef::set_has_rf_identifier() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RuntimeFilterBDef::clear_has_rf_identifier() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RuntimeFilterBDef::clear_rf_identifier() {
  rf_identifier_ = GOOGLE_LONGLONG(0);
  clear_has_rf_identifier();
}
inline ::google::protobuf::int64 RuntimeFilterBDef::rf_identifier() const {
  // @@protoc_insertion_point(field_get:exec.bit.data.RuntimeFilterBDef.rf_identifier)
  return rf_identifier_;
}
inline void RuntimeFilterBDef::set_rf_identifier(::google::protobuf::int64 value) {
  set_has_rf_identifier();
  rf_identifier_ = value;
  // @@protoc_insertion_point(field_set:exec.bit.data.RuntimeFilterBDef.rf_identifier)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace data
}  // namespace bit
}  // namespace exec

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::exec::bit::data::RpcType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::exec::bit::data::RpcType>() {
  return ::exec::bit::data::RpcType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_BitData_2eproto
