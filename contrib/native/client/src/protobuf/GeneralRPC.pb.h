// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GeneralRPC.proto

#ifndef PROTOBUF_INCLUDED_GeneralRPC_2eproto
#define PROTOBUF_INCLUDED_GeneralRPC_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "Coordination.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_GeneralRPC_2eproto 

namespace protobuf_GeneralRPC_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_GeneralRPC_2eproto
namespace exec {
namespace rpc {
class Ack;
class AckDefaultTypeInternal;
extern AckDefaultTypeInternal _Ack_default_instance_;
class CompleteRpcMessage;
class CompleteRpcMessageDefaultTypeInternal;
extern CompleteRpcMessageDefaultTypeInternal _CompleteRpcMessage_default_instance_;
class RpcHeader;
class RpcHeaderDefaultTypeInternal;
extern RpcHeaderDefaultTypeInternal _RpcHeader_default_instance_;
}  // namespace rpc
}  // namespace exec
namespace google {
namespace protobuf {
template<> ::exec::rpc::Ack* Arena::CreateMaybeMessage<::exec::rpc::Ack>(Arena*);
template<> ::exec::rpc::CompleteRpcMessage* Arena::CreateMaybeMessage<::exec::rpc::CompleteRpcMessage>(Arena*);
template<> ::exec::rpc::RpcHeader* Arena::CreateMaybeMessage<::exec::rpc::RpcHeader>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace exec {
namespace rpc {

enum RpcMode {
  REQUEST = 0,
  RESPONSE = 1,
  RESPONSE_FAILURE = 2,
  PING = 3,
  PONG = 4
};
bool RpcMode_IsValid(int value);
const RpcMode RpcMode_MIN = REQUEST;
const RpcMode RpcMode_MAX = PONG;
const int RpcMode_ARRAYSIZE = RpcMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* RpcMode_descriptor();
inline const ::std::string& RpcMode_Name(RpcMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    RpcMode_descriptor(), value);
}
inline bool RpcMode_Parse(
    const ::std::string& name, RpcMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RpcMode>(
    RpcMode_descriptor(), name, value);
}
// ===================================================================

class Ack : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:exec.rpc.Ack) */ {
 public:
  Ack();
  virtual ~Ack();

  Ack(const Ack& from);

  inline Ack& operator=(const Ack& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Ack(Ack&& from) noexcept
    : Ack() {
    *this = ::std::move(from);
  }

  inline Ack& operator=(Ack&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Ack& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ack* internal_default_instance() {
    return reinterpret_cast<const Ack*>(
               &_Ack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Ack* other);
  friend void swap(Ack& a, Ack& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Ack* New() const final {
    return CreateMaybeMessage<Ack>(NULL);
  }

  Ack* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Ack>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Ack& from);
  void MergeFrom(const Ack& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ack* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool ok = 1;
  bool has_ok() const;
  void clear_ok();
  static const int kOkFieldNumber = 1;
  bool ok() const;
  void set_ok(bool value);

  // @@protoc_insertion_point(class_scope:exec.rpc.Ack)
 private:
  void set_has_ok();
  void clear_has_ok();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  bool ok_;
  friend struct ::protobuf_GeneralRPC_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RpcHeader : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:exec.rpc.RpcHeader) */ {
 public:
  RpcHeader();
  virtual ~RpcHeader();

  RpcHeader(const RpcHeader& from);

  inline RpcHeader& operator=(const RpcHeader& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RpcHeader(RpcHeader&& from) noexcept
    : RpcHeader() {
    *this = ::std::move(from);
  }

  inline RpcHeader& operator=(RpcHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RpcHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RpcHeader* internal_default_instance() {
    return reinterpret_cast<const RpcHeader*>(
               &_RpcHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(RpcHeader* other);
  friend void swap(RpcHeader& a, RpcHeader& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RpcHeader* New() const final {
    return CreateMaybeMessage<RpcHeader>(NULL);
  }

  RpcHeader* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RpcHeader>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RpcHeader& from);
  void MergeFrom(const RpcHeader& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RpcHeader* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .exec.rpc.RpcMode mode = 1;
  bool has_mode() const;
  void clear_mode();
  static const int kModeFieldNumber = 1;
  ::exec::rpc::RpcMode mode() const;
  void set_mode(::exec::rpc::RpcMode value);

  // optional int32 coordination_id = 2;
  bool has_coordination_id() const;
  void clear_coordination_id();
  static const int kCoordinationIdFieldNumber = 2;
  ::google::protobuf::int32 coordination_id() const;
  void set_coordination_id(::google::protobuf::int32 value);

  // optional int32 rpc_type = 3;
  bool has_rpc_type() const;
  void clear_rpc_type();
  static const int kRpcTypeFieldNumber = 3;
  ::google::protobuf::int32 rpc_type() const;
  void set_rpc_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:exec.rpc.RpcHeader)
 private:
  void set_has_mode();
  void clear_has_mode();
  void set_has_coordination_id();
  void clear_has_coordination_id();
  void set_has_rpc_type();
  void clear_has_rpc_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  int mode_;
  ::google::protobuf::int32 coordination_id_;
  ::google::protobuf::int32 rpc_type_;
  friend struct ::protobuf_GeneralRPC_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CompleteRpcMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:exec.rpc.CompleteRpcMessage) */ {
 public:
  CompleteRpcMessage();
  virtual ~CompleteRpcMessage();

  CompleteRpcMessage(const CompleteRpcMessage& from);

  inline CompleteRpcMessage& operator=(const CompleteRpcMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CompleteRpcMessage(CompleteRpcMessage&& from) noexcept
    : CompleteRpcMessage() {
    *this = ::std::move(from);
  }

  inline CompleteRpcMessage& operator=(CompleteRpcMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CompleteRpcMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CompleteRpcMessage* internal_default_instance() {
    return reinterpret_cast<const CompleteRpcMessage*>(
               &_CompleteRpcMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(CompleteRpcMessage* other);
  friend void swap(CompleteRpcMessage& a, CompleteRpcMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CompleteRpcMessage* New() const final {
    return CreateMaybeMessage<CompleteRpcMessage>(NULL);
  }

  CompleteRpcMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CompleteRpcMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CompleteRpcMessage& from);
  void MergeFrom(const CompleteRpcMessage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompleteRpcMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes protobuf_body = 2;
  bool has_protobuf_body() const;
  void clear_protobuf_body();
  static const int kProtobufBodyFieldNumber = 2;
  const ::std::string& protobuf_body() const;
  void set_protobuf_body(const ::std::string& value);
  #if LANG_CXX11
  void set_protobuf_body(::std::string&& value);
  #endif
  void set_protobuf_body(const char* value);
  void set_protobuf_body(const void* value, size_t size);
  ::std::string* mutable_protobuf_body();
  ::std::string* release_protobuf_body();
  void set_allocated_protobuf_body(::std::string* protobuf_body);

  // optional bytes raw_body = 3;
  bool has_raw_body() const;
  void clear_raw_body();
  static const int kRawBodyFieldNumber = 3;
  const ::std::string& raw_body() const;
  void set_raw_body(const ::std::string& value);
  #if LANG_CXX11
  void set_raw_body(::std::string&& value);
  #endif
  void set_raw_body(const char* value);
  void set_raw_body(const void* value, size_t size);
  ::std::string* mutable_raw_body();
  ::std::string* release_raw_body();
  void set_allocated_raw_body(::std::string* raw_body);

  // optional .exec.rpc.RpcHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::exec::rpc::RpcHeader& _internal_header() const;
  public:
  const ::exec::rpc::RpcHeader& header() const;
  ::exec::rpc::RpcHeader* release_header();
  ::exec::rpc::RpcHeader* mutable_header();
  void set_allocated_header(::exec::rpc::RpcHeader* header);

  // @@protoc_insertion_point(class_scope:exec.rpc.CompleteRpcMessage)
 private:
  void set_has_header();
  void clear_has_header();
  void set_has_protobuf_body();
  void clear_has_protobuf_body();
  void set_has_raw_body();
  void clear_has_raw_body();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr protobuf_body_;
  ::google::protobuf::internal::ArenaStringPtr raw_body_;
  ::exec::rpc::RpcHeader* header_;
  friend struct ::protobuf_GeneralRPC_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Ack

// optional bool ok = 1;
inline bool Ack::has_ok() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ack::set_has_ok() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Ack::clear_has_ok() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Ack::clear_ok() {
  ok_ = false;
  clear_has_ok();
}
inline bool Ack::ok() const {
  // @@protoc_insertion_point(field_get:exec.rpc.Ack.ok)
  return ok_;
}
inline void Ack::set_ok(bool value) {
  set_has_ok();
  ok_ = value;
  // @@protoc_insertion_point(field_set:exec.rpc.Ack.ok)
}

// -------------------------------------------------------------------

// RpcHeader

// optional .exec.rpc.RpcMode mode = 1;
inline bool RpcHeader::has_mode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RpcHeader::set_has_mode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RpcHeader::clear_has_mode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RpcHeader::clear_mode() {
  mode_ = 0;
  clear_has_mode();
}
inline ::exec::rpc::RpcMode RpcHeader::mode() const {
  // @@protoc_insertion_point(field_get:exec.rpc.RpcHeader.mode)
  return static_cast< ::exec::rpc::RpcMode >(mode_);
}
inline void RpcHeader::set_mode(::exec::rpc::RpcMode value) {
  assert(::exec::rpc::RpcMode_IsValid(value));
  set_has_mode();
  mode_ = value;
  // @@protoc_insertion_point(field_set:exec.rpc.RpcHeader.mode)
}

// optional int32 coordination_id = 2;
inline bool RpcHeader::has_coordination_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RpcHeader::set_has_coordination_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RpcHeader::clear_has_coordination_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RpcHeader::clear_coordination_id() {
  coordination_id_ = 0;
  clear_has_coordination_id();
}
inline ::google::protobuf::int32 RpcHeader::coordination_id() const {
  // @@protoc_insertion_point(field_get:exec.rpc.RpcHeader.coordination_id)
  return coordination_id_;
}
inline void RpcHeader::set_coordination_id(::google::protobuf::int32 value) {
  set_has_coordination_id();
  coordination_id_ = value;
  // @@protoc_insertion_point(field_set:exec.rpc.RpcHeader.coordination_id)
}

// optional int32 rpc_type = 3;
inline bool RpcHeader::has_rpc_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RpcHeader::set_has_rpc_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RpcHeader::clear_has_rpc_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RpcHeader::clear_rpc_type() {
  rpc_type_ = 0;
  clear_has_rpc_type();
}
inline ::google::protobuf::int32 RpcHeader::rpc_type() const {
  // @@protoc_insertion_point(field_get:exec.rpc.RpcHeader.rpc_type)
  return rpc_type_;
}
inline void RpcHeader::set_rpc_type(::google::protobuf::int32 value) {
  set_has_rpc_type();
  rpc_type_ = value;
  // @@protoc_insertion_point(field_set:exec.rpc.RpcHeader.rpc_type)
}

// -------------------------------------------------------------------

// CompleteRpcMessage

// optional .exec.rpc.RpcHeader header = 1;
inline bool CompleteRpcMessage::has_header() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CompleteRpcMessage::set_has_header() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CompleteRpcMessage::clear_has_header() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CompleteRpcMessage::clear_header() {
  if (header_ != NULL) header_->Clear();
  clear_has_header();
}
inline const ::exec::rpc::RpcHeader& CompleteRpcMessage::_internal_header() const {
  return *header_;
}
inline const ::exec::rpc::RpcHeader& CompleteRpcMessage::header() const {
  const ::exec::rpc::RpcHeader* p = header_;
  // @@protoc_insertion_point(field_get:exec.rpc.CompleteRpcMessage.header)
  return p != NULL ? *p : *reinterpret_cast<const ::exec::rpc::RpcHeader*>(
      &::exec::rpc::_RpcHeader_default_instance_);
}
inline ::exec::rpc::RpcHeader* CompleteRpcMessage::release_header() {
  // @@protoc_insertion_point(field_release:exec.rpc.CompleteRpcMessage.header)
  clear_has_header();
  ::exec::rpc::RpcHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::exec::rpc::RpcHeader* CompleteRpcMessage::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::exec::rpc::RpcHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:exec.rpc.CompleteRpcMessage.header)
  return header_;
}
inline void CompleteRpcMessage::set_allocated_header(::exec::rpc::RpcHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    set_has_header();
  } else {
    clear_has_header();
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:exec.rpc.CompleteRpcMessage.header)
}

// optional bytes protobuf_body = 2;
inline bool CompleteRpcMessage::has_protobuf_body() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CompleteRpcMessage::set_has_protobuf_body() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CompleteRpcMessage::clear_has_protobuf_body() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CompleteRpcMessage::clear_protobuf_body() {
  protobuf_body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_protobuf_body();
}
inline const ::std::string& CompleteRpcMessage::protobuf_body() const {
  // @@protoc_insertion_point(field_get:exec.rpc.CompleteRpcMessage.protobuf_body)
  return protobuf_body_.GetNoArena();
}
inline void CompleteRpcMessage::set_protobuf_body(const ::std::string& value) {
  set_has_protobuf_body();
  protobuf_body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:exec.rpc.CompleteRpcMessage.protobuf_body)
}
#if LANG_CXX11
inline void CompleteRpcMessage::set_protobuf_body(::std::string&& value) {
  set_has_protobuf_body();
  protobuf_body_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:exec.rpc.CompleteRpcMessage.protobuf_body)
}
#endif
inline void CompleteRpcMessage::set_protobuf_body(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_protobuf_body();
  protobuf_body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:exec.rpc.CompleteRpcMessage.protobuf_body)
}
inline void CompleteRpcMessage::set_protobuf_body(const void* value, size_t size) {
  set_has_protobuf_body();
  protobuf_body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:exec.rpc.CompleteRpcMessage.protobuf_body)
}
inline ::std::string* CompleteRpcMessage::mutable_protobuf_body() {
  set_has_protobuf_body();
  // @@protoc_insertion_point(field_mutable:exec.rpc.CompleteRpcMessage.protobuf_body)
  return protobuf_body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CompleteRpcMessage::release_protobuf_body() {
  // @@protoc_insertion_point(field_release:exec.rpc.CompleteRpcMessage.protobuf_body)
  if (!has_protobuf_body()) {
    return NULL;
  }
  clear_has_protobuf_body();
  return protobuf_body_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CompleteRpcMessage::set_allocated_protobuf_body(::std::string* protobuf_body) {
  if (protobuf_body != NULL) {
    set_has_protobuf_body();
  } else {
    clear_has_protobuf_body();
  }
  protobuf_body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), protobuf_body);
  // @@protoc_insertion_point(field_set_allocated:exec.rpc.CompleteRpcMessage.protobuf_body)
}

// optional bytes raw_body = 3;
inline bool CompleteRpcMessage::has_raw_body() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CompleteRpcMessage::set_has_raw_body() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CompleteRpcMessage::clear_has_raw_body() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CompleteRpcMessage::clear_raw_body() {
  raw_body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_raw_body();
}
inline const ::std::string& CompleteRpcMessage::raw_body() const {
  // @@protoc_insertion_point(field_get:exec.rpc.CompleteRpcMessage.raw_body)
  return raw_body_.GetNoArena();
}
inline void CompleteRpcMessage::set_raw_body(const ::std::string& value) {
  set_has_raw_body();
  raw_body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:exec.rpc.CompleteRpcMessage.raw_body)
}
#if LANG_CXX11
inline void CompleteRpcMessage::set_raw_body(::std::string&& value) {
  set_has_raw_body();
  raw_body_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:exec.rpc.CompleteRpcMessage.raw_body)
}
#endif
inline void CompleteRpcMessage::set_raw_body(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_raw_body();
  raw_body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:exec.rpc.CompleteRpcMessage.raw_body)
}
inline void CompleteRpcMessage::set_raw_body(const void* value, size_t size) {
  set_has_raw_body();
  raw_body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:exec.rpc.CompleteRpcMessage.raw_body)
}
inline ::std::string* CompleteRpcMessage::mutable_raw_body() {
  set_has_raw_body();
  // @@protoc_insertion_point(field_mutable:exec.rpc.CompleteRpcMessage.raw_body)
  return raw_body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CompleteRpcMessage::release_raw_body() {
  // @@protoc_insertion_point(field_release:exec.rpc.CompleteRpcMessage.raw_body)
  if (!has_raw_body()) {
    return NULL;
  }
  clear_has_raw_body();
  return raw_body_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CompleteRpcMessage::set_allocated_raw_body(::std::string* raw_body) {
  if (raw_body != NULL) {
    set_has_raw_body();
  } else {
    clear_has_raw_body();
  }
  raw_body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), raw_body);
  // @@protoc_insertion_point(field_set_allocated:exec.rpc.CompleteRpcMessage.raw_body)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc
}  // namespace exec

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::exec::rpc::RpcMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::exec::rpc::RpcMode>() {
  return ::exec::rpc::RpcMode_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_GeneralRPC_2eproto
