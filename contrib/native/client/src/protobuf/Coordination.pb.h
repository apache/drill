// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Coordination.proto

#ifndef PROTOBUF_INCLUDED_Coordination_2eproto
#define PROTOBUF_INCLUDED_Coordination_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_Coordination_2eproto 

namespace protobuf_Coordination_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_Coordination_2eproto
namespace exec {
class DrillServiceInstance;
class DrillServiceInstanceDefaultTypeInternal;
extern DrillServiceInstanceDefaultTypeInternal _DrillServiceInstance_default_instance_;
class DrillbitEndpoint;
class DrillbitEndpointDefaultTypeInternal;
extern DrillbitEndpointDefaultTypeInternal _DrillbitEndpoint_default_instance_;
class Roles;
class RolesDefaultTypeInternal;
extern RolesDefaultTypeInternal _Roles_default_instance_;
}  // namespace exec
namespace google {
namespace protobuf {
template<> ::exec::DrillServiceInstance* Arena::CreateMaybeMessage<::exec::DrillServiceInstance>(Arena*);
template<> ::exec::DrillbitEndpoint* Arena::CreateMaybeMessage<::exec::DrillbitEndpoint>(Arena*);
template<> ::exec::Roles* Arena::CreateMaybeMessage<::exec::Roles>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace exec {

enum DrillbitEndpoint_State {
  DrillbitEndpoint_State_STARTUP = 0,
  DrillbitEndpoint_State_ONLINE = 1,
  DrillbitEndpoint_State_QUIESCENT = 2,
  DrillbitEndpoint_State_OFFLINE = 3
};
bool DrillbitEndpoint_State_IsValid(int value);
const DrillbitEndpoint_State DrillbitEndpoint_State_State_MIN = DrillbitEndpoint_State_STARTUP;
const DrillbitEndpoint_State DrillbitEndpoint_State_State_MAX = DrillbitEndpoint_State_OFFLINE;
const int DrillbitEndpoint_State_State_ARRAYSIZE = DrillbitEndpoint_State_State_MAX + 1;

const ::google::protobuf::EnumDescriptor* DrillbitEndpoint_State_descriptor();
inline const ::std::string& DrillbitEndpoint_State_Name(DrillbitEndpoint_State value) {
  return ::google::protobuf::internal::NameOfEnum(
    DrillbitEndpoint_State_descriptor(), value);
}
inline bool DrillbitEndpoint_State_Parse(
    const ::std::string& name, DrillbitEndpoint_State* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DrillbitEndpoint_State>(
    DrillbitEndpoint_State_descriptor(), name, value);
}
// ===================================================================

class DrillbitEndpoint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:exec.DrillbitEndpoint) */ {
 public:
  DrillbitEndpoint();
  virtual ~DrillbitEndpoint();

  DrillbitEndpoint(const DrillbitEndpoint& from);

  inline DrillbitEndpoint& operator=(const DrillbitEndpoint& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DrillbitEndpoint(DrillbitEndpoint&& from) noexcept
    : DrillbitEndpoint() {
    *this = ::std::move(from);
  }

  inline DrillbitEndpoint& operator=(DrillbitEndpoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DrillbitEndpoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DrillbitEndpoint* internal_default_instance() {
    return reinterpret_cast<const DrillbitEndpoint*>(
               &_DrillbitEndpoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(DrillbitEndpoint* other);
  friend void swap(DrillbitEndpoint& a, DrillbitEndpoint& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DrillbitEndpoint* New() const final {
    return CreateMaybeMessage<DrillbitEndpoint>(NULL);
  }

  DrillbitEndpoint* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DrillbitEndpoint>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DrillbitEndpoint& from);
  void MergeFrom(const DrillbitEndpoint& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DrillbitEndpoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DrillbitEndpoint_State State;
  static const State STARTUP =
    DrillbitEndpoint_State_STARTUP;
  static const State ONLINE =
    DrillbitEndpoint_State_ONLINE;
  static const State QUIESCENT =
    DrillbitEndpoint_State_QUIESCENT;
  static const State OFFLINE =
    DrillbitEndpoint_State_OFFLINE;
  static inline bool State_IsValid(int value) {
    return DrillbitEndpoint_State_IsValid(value);
  }
  static const State State_MIN =
    DrillbitEndpoint_State_State_MIN;
  static const State State_MAX =
    DrillbitEndpoint_State_State_MAX;
  static const int State_ARRAYSIZE =
    DrillbitEndpoint_State_State_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  State_descriptor() {
    return DrillbitEndpoint_State_descriptor();
  }
  static inline const ::std::string& State_Name(State value) {
    return DrillbitEndpoint_State_Name(value);
  }
  static inline bool State_Parse(const ::std::string& name,
      State* value) {
    return DrillbitEndpoint_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string address = 1;
  bool has_address() const;
  void clear_address();
  static const int kAddressFieldNumber = 1;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // optional string version = 6;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 6;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // optional .exec.Roles roles = 5;
  bool has_roles() const;
  void clear_roles();
  static const int kRolesFieldNumber = 5;
  private:
  const ::exec::Roles& _internal_roles() const;
  public:
  const ::exec::Roles& roles() const;
  ::exec::Roles* release_roles();
  ::exec::Roles* mutable_roles();
  void set_allocated_roles(::exec::Roles* roles);

  // optional int32 user_port = 2;
  bool has_user_port() const;
  void clear_user_port();
  static const int kUserPortFieldNumber = 2;
  ::google::protobuf::int32 user_port() const;
  void set_user_port(::google::protobuf::int32 value);

  // optional int32 control_port = 3;
  bool has_control_port() const;
  void clear_control_port();
  static const int kControlPortFieldNumber = 3;
  ::google::protobuf::int32 control_port() const;
  void set_control_port(::google::protobuf::int32 value);

  // optional int32 data_port = 4;
  bool has_data_port() const;
  void clear_data_port();
  static const int kDataPortFieldNumber = 4;
  ::google::protobuf::int32 data_port() const;
  void set_data_port(::google::protobuf::int32 value);

  // optional .exec.DrillbitEndpoint.State state = 7;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 7;
  ::exec::DrillbitEndpoint_State state() const;
  void set_state(::exec::DrillbitEndpoint_State value);

  // optional int32 http_port = 8;
  bool has_http_port() const;
  void clear_http_port();
  static const int kHttpPortFieldNumber = 8;
  ::google::protobuf::int32 http_port() const;
  void set_http_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:exec.DrillbitEndpoint)
 private:
  void set_has_address();
  void clear_has_address();
  void set_has_user_port();
  void clear_has_user_port();
  void set_has_control_port();
  void clear_has_control_port();
  void set_has_data_port();
  void clear_has_data_port();
  void set_has_roles();
  void clear_has_roles();
  void set_has_version();
  void clear_has_version();
  void set_has_state();
  void clear_has_state();
  void set_has_http_port();
  void clear_has_http_port();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  ::exec::Roles* roles_;
  ::google::protobuf::int32 user_port_;
  ::google::protobuf::int32 control_port_;
  ::google::protobuf::int32 data_port_;
  int state_;
  ::google::protobuf::int32 http_port_;
  friend struct ::protobuf_Coordination_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DrillServiceInstance : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:exec.DrillServiceInstance) */ {
 public:
  DrillServiceInstance();
  virtual ~DrillServiceInstance();

  DrillServiceInstance(const DrillServiceInstance& from);

  inline DrillServiceInstance& operator=(const DrillServiceInstance& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DrillServiceInstance(DrillServiceInstance&& from) noexcept
    : DrillServiceInstance() {
    *this = ::std::move(from);
  }

  inline DrillServiceInstance& operator=(DrillServiceInstance&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DrillServiceInstance& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DrillServiceInstance* internal_default_instance() {
    return reinterpret_cast<const DrillServiceInstance*>(
               &_DrillServiceInstance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(DrillServiceInstance* other);
  friend void swap(DrillServiceInstance& a, DrillServiceInstance& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DrillServiceInstance* New() const final {
    return CreateMaybeMessage<DrillServiceInstance>(NULL);
  }

  DrillServiceInstance* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DrillServiceInstance>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DrillServiceInstance& from);
  void MergeFrom(const DrillServiceInstance& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DrillServiceInstance* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional .exec.DrillbitEndpoint endpoint = 3;
  bool has_endpoint() const;
  void clear_endpoint();
  static const int kEndpointFieldNumber = 3;
  private:
  const ::exec::DrillbitEndpoint& _internal_endpoint() const;
  public:
  const ::exec::DrillbitEndpoint& endpoint() const;
  ::exec::DrillbitEndpoint* release_endpoint();
  ::exec::DrillbitEndpoint* mutable_endpoint();
  void set_allocated_endpoint(::exec::DrillbitEndpoint* endpoint);

  // optional int64 registrationTimeUTC = 2;
  bool has_registrationtimeutc() const;
  void clear_registrationtimeutc();
  static const int kRegistrationTimeUTCFieldNumber = 2;
  ::google::protobuf::int64 registrationtimeutc() const;
  void set_registrationtimeutc(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:exec.DrillServiceInstance)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_registrationtimeutc();
  void clear_has_registrationtimeutc();
  void set_has_endpoint();
  void clear_has_endpoint();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::exec::DrillbitEndpoint* endpoint_;
  ::google::protobuf::int64 registrationtimeutc_;
  friend struct ::protobuf_Coordination_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Roles : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:exec.Roles) */ {
 public:
  Roles();
  virtual ~Roles();

  Roles(const Roles& from);

  inline Roles& operator=(const Roles& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Roles(Roles&& from) noexcept
    : Roles() {
    *this = ::std::move(from);
  }

  inline Roles& operator=(Roles&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Roles& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Roles* internal_default_instance() {
    return reinterpret_cast<const Roles*>(
               &_Roles_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Roles* other);
  friend void swap(Roles& a, Roles& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Roles* New() const final {
    return CreateMaybeMessage<Roles>(NULL);
  }

  Roles* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Roles>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Roles& from);
  void MergeFrom(const Roles& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Roles* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool sql_query = 1 [default = true];
  bool has_sql_query() const;
  void clear_sql_query();
  static const int kSqlQueryFieldNumber = 1;
  bool sql_query() const;
  void set_sql_query(bool value);

  // optional bool logical_plan = 2 [default = true];
  bool has_logical_plan() const;
  void clear_logical_plan();
  static const int kLogicalPlanFieldNumber = 2;
  bool logical_plan() const;
  void set_logical_plan(bool value);

  // optional bool physical_plan = 3 [default = true];
  bool has_physical_plan() const;
  void clear_physical_plan();
  static const int kPhysicalPlanFieldNumber = 3;
  bool physical_plan() const;
  void set_physical_plan(bool value);

  // optional bool java_executor = 4 [default = true];
  bool has_java_executor() const;
  void clear_java_executor();
  static const int kJavaExecutorFieldNumber = 4;
  bool java_executor() const;
  void set_java_executor(bool value);

  // optional bool distributed_cache = 5 [default = true];
  bool has_distributed_cache() const;
  void clear_distributed_cache();
  static const int kDistributedCacheFieldNumber = 5;
  bool distributed_cache() const;
  void set_distributed_cache(bool value);

  // @@protoc_insertion_point(class_scope:exec.Roles)
 private:
  void set_has_sql_query();
  void clear_has_sql_query();
  void set_has_logical_plan();
  void clear_has_logical_plan();
  void set_has_physical_plan();
  void clear_has_physical_plan();
  void set_has_java_executor();
  void clear_has_java_executor();
  void set_has_distributed_cache();
  void clear_has_distributed_cache();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  bool sql_query_;
  bool logical_plan_;
  bool physical_plan_;
  bool java_executor_;
  bool distributed_cache_;
  friend struct ::protobuf_Coordination_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DrillbitEndpoint

// optional string address = 1;
inline bool DrillbitEndpoint::has_address() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DrillbitEndpoint::set_has_address() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DrillbitEndpoint::clear_has_address() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DrillbitEndpoint::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_address();
}
inline const ::std::string& DrillbitEndpoint::address() const {
  // @@protoc_insertion_point(field_get:exec.DrillbitEndpoint.address)
  return address_.GetNoArena();
}
inline void DrillbitEndpoint::set_address(const ::std::string& value) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:exec.DrillbitEndpoint.address)
}
#if LANG_CXX11
inline void DrillbitEndpoint::set_address(::std::string&& value) {
  set_has_address();
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:exec.DrillbitEndpoint.address)
}
#endif
inline void DrillbitEndpoint::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:exec.DrillbitEndpoint.address)
}
inline void DrillbitEndpoint::set_address(const char* value, size_t size) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:exec.DrillbitEndpoint.address)
}
inline ::std::string* DrillbitEndpoint::mutable_address() {
  set_has_address();
  // @@protoc_insertion_point(field_mutable:exec.DrillbitEndpoint.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DrillbitEndpoint::release_address() {
  // @@protoc_insertion_point(field_release:exec.DrillbitEndpoint.address)
  if (!has_address()) {
    return NULL;
  }
  clear_has_address();
  return address_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DrillbitEndpoint::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    set_has_address();
  } else {
    clear_has_address();
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:exec.DrillbitEndpoint.address)
}

// optional int32 user_port = 2;
inline bool DrillbitEndpoint::has_user_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DrillbitEndpoint::set_has_user_port() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DrillbitEndpoint::clear_has_user_port() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DrillbitEndpoint::clear_user_port() {
  user_port_ = 0;
  clear_has_user_port();
}
inline ::google::protobuf::int32 DrillbitEndpoint::user_port() const {
  // @@protoc_insertion_point(field_get:exec.DrillbitEndpoint.user_port)
  return user_port_;
}
inline void DrillbitEndpoint::set_user_port(::google::protobuf::int32 value) {
  set_has_user_port();
  user_port_ = value;
  // @@protoc_insertion_point(field_set:exec.DrillbitEndpoint.user_port)
}

// optional int32 control_port = 3;
inline bool DrillbitEndpoint::has_control_port() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DrillbitEndpoint::set_has_control_port() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DrillbitEndpoint::clear_has_control_port() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DrillbitEndpoint::clear_control_port() {
  control_port_ = 0;
  clear_has_control_port();
}
inline ::google::protobuf::int32 DrillbitEndpoint::control_port() const {
  // @@protoc_insertion_point(field_get:exec.DrillbitEndpoint.control_port)
  return control_port_;
}
inline void DrillbitEndpoint::set_control_port(::google::protobuf::int32 value) {
  set_has_control_port();
  control_port_ = value;
  // @@protoc_insertion_point(field_set:exec.DrillbitEndpoint.control_port)
}

// optional int32 data_port = 4;
inline bool DrillbitEndpoint::has_data_port() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DrillbitEndpoint::set_has_data_port() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DrillbitEndpoint::clear_has_data_port() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DrillbitEndpoint::clear_data_port() {
  data_port_ = 0;
  clear_has_data_port();
}
inline ::google::protobuf::int32 DrillbitEndpoint::data_port() const {
  // @@protoc_insertion_point(field_get:exec.DrillbitEndpoint.data_port)
  return data_port_;
}
inline void DrillbitEndpoint::set_data_port(::google::protobuf::int32 value) {
  set_has_data_port();
  data_port_ = value;
  // @@protoc_insertion_point(field_set:exec.DrillbitEndpoint.data_port)
}

// optional .exec.Roles roles = 5;
inline bool DrillbitEndpoint::has_roles() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DrillbitEndpoint::set_has_roles() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DrillbitEndpoint::clear_has_roles() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DrillbitEndpoint::clear_roles() {
  if (roles_ != NULL) roles_->Clear();
  clear_has_roles();
}
inline const ::exec::Roles& DrillbitEndpoint::_internal_roles() const {
  return *roles_;
}
inline const ::exec::Roles& DrillbitEndpoint::roles() const {
  const ::exec::Roles* p = roles_;
  // @@protoc_insertion_point(field_get:exec.DrillbitEndpoint.roles)
  return p != NULL ? *p : *reinterpret_cast<const ::exec::Roles*>(
      &::exec::_Roles_default_instance_);
}
inline ::exec::Roles* DrillbitEndpoint::release_roles() {
  // @@protoc_insertion_point(field_release:exec.DrillbitEndpoint.roles)
  clear_has_roles();
  ::exec::Roles* temp = roles_;
  roles_ = NULL;
  return temp;
}
inline ::exec::Roles* DrillbitEndpoint::mutable_roles() {
  set_has_roles();
  if (roles_ == NULL) {
    auto* p = CreateMaybeMessage<::exec::Roles>(GetArenaNoVirtual());
    roles_ = p;
  }
  // @@protoc_insertion_point(field_mutable:exec.DrillbitEndpoint.roles)
  return roles_;
}
inline void DrillbitEndpoint::set_allocated_roles(::exec::Roles* roles) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete roles_;
  }
  if (roles) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      roles = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, roles, submessage_arena);
    }
    set_has_roles();
  } else {
    clear_has_roles();
  }
  roles_ = roles;
  // @@protoc_insertion_point(field_set_allocated:exec.DrillbitEndpoint.roles)
}

// optional string version = 6;
inline bool DrillbitEndpoint::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DrillbitEndpoint::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DrillbitEndpoint::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DrillbitEndpoint::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_version();
}
inline const ::std::string& DrillbitEndpoint::version() const {
  // @@protoc_insertion_point(field_get:exec.DrillbitEndpoint.version)
  return version_.GetNoArena();
}
inline void DrillbitEndpoint::set_version(const ::std::string& value) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:exec.DrillbitEndpoint.version)
}
#if LANG_CXX11
inline void DrillbitEndpoint::set_version(::std::string&& value) {
  set_has_version();
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:exec.DrillbitEndpoint.version)
}
#endif
inline void DrillbitEndpoint::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:exec.DrillbitEndpoint.version)
}
inline void DrillbitEndpoint::set_version(const char* value, size_t size) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:exec.DrillbitEndpoint.version)
}
inline ::std::string* DrillbitEndpoint::mutable_version() {
  set_has_version();
  // @@protoc_insertion_point(field_mutable:exec.DrillbitEndpoint.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DrillbitEndpoint::release_version() {
  // @@protoc_insertion_point(field_release:exec.DrillbitEndpoint.version)
  if (!has_version()) {
    return NULL;
  }
  clear_has_version();
  return version_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DrillbitEndpoint::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    set_has_version();
  } else {
    clear_has_version();
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:exec.DrillbitEndpoint.version)
}

// optional .exec.DrillbitEndpoint.State state = 7;
inline bool DrillbitEndpoint::has_state() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DrillbitEndpoint::set_has_state() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DrillbitEndpoint::clear_has_state() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DrillbitEndpoint::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::exec::DrillbitEndpoint_State DrillbitEndpoint::state() const {
  // @@protoc_insertion_point(field_get:exec.DrillbitEndpoint.state)
  return static_cast< ::exec::DrillbitEndpoint_State >(state_);
}
inline void DrillbitEndpoint::set_state(::exec::DrillbitEndpoint_State value) {
  assert(::exec::DrillbitEndpoint_State_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:exec.DrillbitEndpoint.state)
}

// optional int32 http_port = 8;
inline bool DrillbitEndpoint::has_http_port() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DrillbitEndpoint::set_has_http_port() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DrillbitEndpoint::clear_has_http_port() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DrillbitEndpoint::clear_http_port() {
  http_port_ = 0;
  clear_has_http_port();
}
inline ::google::protobuf::int32 DrillbitEndpoint::http_port() const {
  // @@protoc_insertion_point(field_get:exec.DrillbitEndpoint.http_port)
  return http_port_;
}
inline void DrillbitEndpoint::set_http_port(::google::protobuf::int32 value) {
  set_has_http_port();
  http_port_ = value;
  // @@protoc_insertion_point(field_set:exec.DrillbitEndpoint.http_port)
}

// -------------------------------------------------------------------

// DrillServiceInstance

// optional string id = 1;
inline bool DrillServiceInstance::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DrillServiceInstance::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DrillServiceInstance::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DrillServiceInstance::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& DrillServiceInstance::id() const {
  // @@protoc_insertion_point(field_get:exec.DrillServiceInstance.id)
  return id_.GetNoArena();
}
inline void DrillServiceInstance::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:exec.DrillServiceInstance.id)
}
#if LANG_CXX11
inline void DrillServiceInstance::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:exec.DrillServiceInstance.id)
}
#endif
inline void DrillServiceInstance::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:exec.DrillServiceInstance.id)
}
inline void DrillServiceInstance::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:exec.DrillServiceInstance.id)
}
inline ::std::string* DrillServiceInstance::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:exec.DrillServiceInstance.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DrillServiceInstance::release_id() {
  // @@protoc_insertion_point(field_release:exec.DrillServiceInstance.id)
  if (!has_id()) {
    return NULL;
  }
  clear_has_id();
  return id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DrillServiceInstance::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:exec.DrillServiceInstance.id)
}

// optional int64 registrationTimeUTC = 2;
inline bool DrillServiceInstance::has_registrationtimeutc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DrillServiceInstance::set_has_registrationtimeutc() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DrillServiceInstance::clear_has_registrationtimeutc() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DrillServiceInstance::clear_registrationtimeutc() {
  registrationtimeutc_ = GOOGLE_LONGLONG(0);
  clear_has_registrationtimeutc();
}
inline ::google::protobuf::int64 DrillServiceInstance::registrationtimeutc() const {
  // @@protoc_insertion_point(field_get:exec.DrillServiceInstance.registrationTimeUTC)
  return registrationtimeutc_;
}
inline void DrillServiceInstance::set_registrationtimeutc(::google::protobuf::int64 value) {
  set_has_registrationtimeutc();
  registrationtimeutc_ = value;
  // @@protoc_insertion_point(field_set:exec.DrillServiceInstance.registrationTimeUTC)
}

// optional .exec.DrillbitEndpoint endpoint = 3;
inline bool DrillServiceInstance::has_endpoint() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DrillServiceInstance::set_has_endpoint() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DrillServiceInstance::clear_has_endpoint() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DrillServiceInstance::clear_endpoint() {
  if (endpoint_ != NULL) endpoint_->Clear();
  clear_has_endpoint();
}
inline const ::exec::DrillbitEndpoint& DrillServiceInstance::_internal_endpoint() const {
  return *endpoint_;
}
inline const ::exec::DrillbitEndpoint& DrillServiceInstance::endpoint() const {
  const ::exec::DrillbitEndpoint* p = endpoint_;
  // @@protoc_insertion_point(field_get:exec.DrillServiceInstance.endpoint)
  return p != NULL ? *p : *reinterpret_cast<const ::exec::DrillbitEndpoint*>(
      &::exec::_DrillbitEndpoint_default_instance_);
}
inline ::exec::DrillbitEndpoint* DrillServiceInstance::release_endpoint() {
  // @@protoc_insertion_point(field_release:exec.DrillServiceInstance.endpoint)
  clear_has_endpoint();
  ::exec::DrillbitEndpoint* temp = endpoint_;
  endpoint_ = NULL;
  return temp;
}
inline ::exec::DrillbitEndpoint* DrillServiceInstance::mutable_endpoint() {
  set_has_endpoint();
  if (endpoint_ == NULL) {
    auto* p = CreateMaybeMessage<::exec::DrillbitEndpoint>(GetArenaNoVirtual());
    endpoint_ = p;
  }
  // @@protoc_insertion_point(field_mutable:exec.DrillServiceInstance.endpoint)
  return endpoint_;
}
inline void DrillServiceInstance::set_allocated_endpoint(::exec::DrillbitEndpoint* endpoint) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete endpoint_;
  }
  if (endpoint) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      endpoint = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, endpoint, submessage_arena);
    }
    set_has_endpoint();
  } else {
    clear_has_endpoint();
  }
  endpoint_ = endpoint;
  // @@protoc_insertion_point(field_set_allocated:exec.DrillServiceInstance.endpoint)
}

// -------------------------------------------------------------------

// Roles

// optional bool sql_query = 1 [default = true];
inline bool Roles::has_sql_query() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Roles::set_has_sql_query() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Roles::clear_has_sql_query() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Roles::clear_sql_query() {
  sql_query_ = true;
  clear_has_sql_query();
}
inline bool Roles::sql_query() const {
  // @@protoc_insertion_point(field_get:exec.Roles.sql_query)
  return sql_query_;
}
inline void Roles::set_sql_query(bool value) {
  set_has_sql_query();
  sql_query_ = value;
  // @@protoc_insertion_point(field_set:exec.Roles.sql_query)
}

// optional bool logical_plan = 2 [default = true];
inline bool Roles::has_logical_plan() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Roles::set_has_logical_plan() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Roles::clear_has_logical_plan() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Roles::clear_logical_plan() {
  logical_plan_ = true;
  clear_has_logical_plan();
}
inline bool Roles::logical_plan() const {
  // @@protoc_insertion_point(field_get:exec.Roles.logical_plan)
  return logical_plan_;
}
inline void Roles::set_logical_plan(bool value) {
  set_has_logical_plan();
  logical_plan_ = value;
  // @@protoc_insertion_point(field_set:exec.Roles.logical_plan)
}

// optional bool physical_plan = 3 [default = true];
inline bool Roles::has_physical_plan() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Roles::set_has_physical_plan() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Roles::clear_has_physical_plan() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Roles::clear_physical_plan() {
  physical_plan_ = true;
  clear_has_physical_plan();
}
inline bool Roles::physical_plan() const {
  // @@protoc_insertion_point(field_get:exec.Roles.physical_plan)
  return physical_plan_;
}
inline void Roles::set_physical_plan(bool value) {
  set_has_physical_plan();
  physical_plan_ = value;
  // @@protoc_insertion_point(field_set:exec.Roles.physical_plan)
}

// optional bool java_executor = 4 [default = true];
inline bool Roles::has_java_executor() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Roles::set_has_java_executor() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Roles::clear_has_java_executor() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Roles::clear_java_executor() {
  java_executor_ = true;
  clear_has_java_executor();
}
inline bool Roles::java_executor() const {
  // @@protoc_insertion_point(field_get:exec.Roles.java_executor)
  return java_executor_;
}
inline void Roles::set_java_executor(bool value) {
  set_has_java_executor();
  java_executor_ = value;
  // @@protoc_insertion_point(field_set:exec.Roles.java_executor)
}

// optional bool distributed_cache = 5 [default = true];
inline bool Roles::has_distributed_cache() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Roles::set_has_distributed_cache() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Roles::clear_has_distributed_cache() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Roles::clear_distributed_cache() {
  distributed_cache_ = true;
  clear_has_distributed_cache();
}
inline bool Roles::distributed_cache() const {
  // @@protoc_insertion_point(field_get:exec.Roles.distributed_cache)
  return distributed_cache_;
}
inline void Roles::set_distributed_cache(bool value) {
  set_has_distributed_cache();
  distributed_cache_ = value;
  // @@protoc_insertion_point(field_set:exec.Roles.distributed_cache)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace exec

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::exec::DrillbitEndpoint_State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::exec::DrillbitEndpoint_State>() {
  return ::exec::DrillbitEndpoint_State_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_Coordination_2eproto
