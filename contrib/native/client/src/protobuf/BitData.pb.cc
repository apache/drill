// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BitData.proto

#include "BitData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_UserBitShared_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_UserBitShared_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_QueryId;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_UserBitShared_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_RecordBatchDef;
}  // namespace protobuf_UserBitShared_2eproto
namespace exec {
namespace bit {
namespace data {
class BitClientHandshakeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BitClientHandshake>
      _instance;
} _BitClientHandshake_default_instance_;
class BitServerHandshakeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BitServerHandshake>
      _instance;
} _BitServerHandshake_default_instance_;
class FragmentRecordBatchDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FragmentRecordBatch>
      _instance;
} _FragmentRecordBatch_default_instance_;
class RuntimeFilterBDefDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RuntimeFilterBDef>
      _instance;
} _RuntimeFilterBDef_default_instance_;
}  // namespace data
}  // namespace bit
}  // namespace exec
namespace protobuf_BitData_2eproto {
static void InitDefaultsBitClientHandshake() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::exec::bit::data::_BitClientHandshake_default_instance_;
    new (ptr) ::exec::bit::data::BitClientHandshake();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::exec::bit::data::BitClientHandshake::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BitClientHandshake =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBitClientHandshake}, {}};

static void InitDefaultsBitServerHandshake() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::exec::bit::data::_BitServerHandshake_default_instance_;
    new (ptr) ::exec::bit::data::BitServerHandshake();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::exec::bit::data::BitServerHandshake::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BitServerHandshake =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBitServerHandshake}, {}};

static void InitDefaultsFragmentRecordBatch() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::exec::bit::data::_FragmentRecordBatch_default_instance_;
    new (ptr) ::exec::bit::data::FragmentRecordBatch();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::exec::bit::data::FragmentRecordBatch::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_FragmentRecordBatch =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsFragmentRecordBatch}, {
      &protobuf_UserBitShared_2eproto::scc_info_QueryId.base,
      &protobuf_UserBitShared_2eproto::scc_info_RecordBatchDef.base,}};

static void InitDefaultsRuntimeFilterBDef() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::exec::bit::data::_RuntimeFilterBDef_default_instance_;
    new (ptr) ::exec::bit::data::RuntimeFilterBDef();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::exec::bit::data::RuntimeFilterBDef::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RuntimeFilterBDef =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRuntimeFilterBDef}, {
      &protobuf_UserBitShared_2eproto::scc_info_QueryId.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_BitClientHandshake.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BitServerHandshake.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FragmentRecordBatch.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RuntimeFilterBDef.base);
}

::google::protobuf::Metadata file_level_metadata[4];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::bit::data::BitClientHandshake, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::bit::data::BitClientHandshake, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::bit::data::BitClientHandshake, rpc_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::bit::data::BitClientHandshake, channel_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::bit::data::BitServerHandshake, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::bit::data::BitServerHandshake, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::bit::data::BitServerHandshake, rpc_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::bit::data::BitServerHandshake, authenticationmechanisms_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::bit::data::FragmentRecordBatch, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::bit::data::FragmentRecordBatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::bit::data::FragmentRecordBatch, query_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::bit::data::FragmentRecordBatch, receiving_major_fragment_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::bit::data::FragmentRecordBatch, receiving_minor_fragment_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::bit::data::FragmentRecordBatch, sending_major_fragment_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::bit::data::FragmentRecordBatch, sending_minor_fragment_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::bit::data::FragmentRecordBatch, def_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::bit::data::FragmentRecordBatch, islastbatch_),
  0,
  2,
  ~0u,
  3,
  4,
  1,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::bit::data::RuntimeFilterBDef, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::bit::data::RuntimeFilterBDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::bit::data::RuntimeFilterBDef, query_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::bit::data::RuntimeFilterBDef, major_fragment_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::bit::data::RuntimeFilterBDef, minor_fragment_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::bit::data::RuntimeFilterBDef, to_foreman_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::bit::data::RuntimeFilterBDef, bloom_filter_size_in_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::bit::data::RuntimeFilterBDef, probe_fields_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::bit::data::RuntimeFilterBDef, hj_op_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::exec::bit::data::RuntimeFilterBDef, rf_identifier_),
  0,
  1,
  2,
  3,
  ~0u,
  ~0u,
  4,
  5,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::exec::bit::data::BitClientHandshake)},
  { 9, 16, sizeof(::exec::bit::data::BitServerHandshake)},
  { 18, 30, sizeof(::exec::bit::data::FragmentRecordBatch)},
  { 37, 50, sizeof(::exec::bit::data::RuntimeFilterBDef)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::exec::bit::data::_BitClientHandshake_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::exec::bit::data::_BitServerHandshake_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::exec::bit::data::_FragmentRecordBatch_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::exec::bit::data::_RuntimeFilterBDef_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "BitData.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\rBitData.proto\022\rexec.bit.data\032\025Executio"
      "nProtos.proto\032\022Coordination.proto\032\023UserB"
      "itShared.proto\"]\n\022BitClientHandshake\022\023\n\013"
      "rpc_version\030\001 \001(\005\0222\n\007channel\030\002 \001(\0162\027.exe"
      "c.shared.RpcChannel:\010BIT_DATA\"K\n\022BitServ"
      "erHandshake\022\023\n\013rpc_version\030\001 \001(\005\022 \n\030auth"
      "enticationMechanisms\030\002 \003(\t\"\214\002\n\023FragmentR"
      "ecordBatch\022&\n\010query_id\030\001 \001(\0132\024.exec.shar"
      "ed.QueryId\022#\n\033receiving_major_fragment_i"
      "d\030\002 \001(\005\022#\n\033receiving_minor_fragment_id\030\003"
      " \003(\005\022!\n\031sending_major_fragment_id\030\004 \001(\005\022"
      "!\n\031sending_minor_fragment_id\030\005 \001(\005\022(\n\003de"
      "f\030\006 \001(\0132\033.exec.shared.RecordBatchDef\022\023\n\013"
      "isLastBatch\030\007 \001(\010\"\350\001\n\021RuntimeFilterBDef\022"
      "&\n\010query_id\030\001 \001(\0132\024.exec.shared.QueryId\022"
      "\031\n\021major_fragment_id\030\002 \001(\005\022\031\n\021minor_frag"
      "ment_id\030\003 \001(\005\022\022\n\nto_foreman\030\004 \001(\010\022\"\n\032blo"
      "om_filter_size_in_bytes\030\005 \003(\005\022\024\n\014probe_f"
      "ields\030\006 \003(\t\022\020\n\010hj_op_id\030\007 \001(\005\022\025\n\rrf_iden"
      "tifier\030\010 \001(\003*n\n\007RpcType\022\r\n\tHANDSHAKE\020\000\022\007"
      "\n\003ACK\020\001\022\013\n\007GOODBYE\020\002\022\024\n\020REQ_RECORD_BATCH"
      "\020\003\022\020\n\014SASL_MESSAGE\020\004\022\026\n\022REQ_RUNTIME_FILT"
      "ER\020\005B(\n\033org.apache.drill.exec.protoB\007Bit"
      "DataH\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 926);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "BitData.proto", &protobuf_RegisterTypes);
  ::protobuf_ExecutionProtos_2eproto::AddDescriptors();
  ::protobuf_Coordination_2eproto::AddDescriptors();
  ::protobuf_UserBitShared_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_BitData_2eproto
namespace exec {
namespace bit {
namespace data {
const ::google::protobuf::EnumDescriptor* RpcType_descriptor() {
  protobuf_BitData_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_BitData_2eproto::file_level_enum_descriptors[0];
}
bool RpcType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void BitClientHandshake::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BitClientHandshake::kRpcVersionFieldNumber;
const int BitClientHandshake::kChannelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BitClientHandshake::BitClientHandshake()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_BitData_2eproto::scc_info_BitClientHandshake.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:exec.bit.data.BitClientHandshake)
}
BitClientHandshake::BitClientHandshake(const BitClientHandshake& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&rpc_version_, &from.rpc_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&channel_) -
    reinterpret_cast<char*>(&rpc_version_)) + sizeof(channel_));
  // @@protoc_insertion_point(copy_constructor:exec.bit.data.BitClientHandshake)
}

void BitClientHandshake::SharedCtor() {
  rpc_version_ = 0;
  channel_ = 1;
}

BitClientHandshake::~BitClientHandshake() {
  // @@protoc_insertion_point(destructor:exec.bit.data.BitClientHandshake)
  SharedDtor();
}

void BitClientHandshake::SharedDtor() {
}

void BitClientHandshake::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* BitClientHandshake::descriptor() {
  ::protobuf_BitData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BitData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BitClientHandshake& BitClientHandshake::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_BitData_2eproto::scc_info_BitClientHandshake.base);
  return *internal_default_instance();
}


void BitClientHandshake::Clear() {
// @@protoc_insertion_point(message_clear_start:exec.bit.data.BitClientHandshake)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    rpc_version_ = 0;
    channel_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BitClientHandshake::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:exec.bit.data.BitClientHandshake)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 rpc_version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_rpc_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rpc_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .exec.shared.RpcChannel channel = 2 [default = BIT_DATA];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::exec::shared::RpcChannel_IsValid(value)) {
            set_channel(static_cast< ::exec::shared::RpcChannel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:exec.bit.data.BitClientHandshake)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:exec.bit.data.BitClientHandshake)
  return false;
#undef DO_
}

void BitClientHandshake::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:exec.bit.data.BitClientHandshake)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 rpc_version = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rpc_version(), output);
  }

  // optional .exec.shared.RpcChannel channel = 2 [default = BIT_DATA];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->channel(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:exec.bit.data.BitClientHandshake)
}

::google::protobuf::uint8* BitClientHandshake::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:exec.bit.data.BitClientHandshake)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 rpc_version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rpc_version(), target);
  }

  // optional .exec.shared.RpcChannel channel = 2 [default = BIT_DATA];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->channel(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:exec.bit.data.BitClientHandshake)
  return target;
}

size_t BitClientHandshake::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:exec.bit.data.BitClientHandshake)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 rpc_version = 1;
    if (has_rpc_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rpc_version());
    }

    // optional .exec.shared.RpcChannel channel = 2 [default = BIT_DATA];
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->channel());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BitClientHandshake::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:exec.bit.data.BitClientHandshake)
  GOOGLE_DCHECK_NE(&from, this);
  const BitClientHandshake* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BitClientHandshake>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:exec.bit.data.BitClientHandshake)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:exec.bit.data.BitClientHandshake)
    MergeFrom(*source);
  }
}

void BitClientHandshake::MergeFrom(const BitClientHandshake& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:exec.bit.data.BitClientHandshake)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      rpc_version_ = from.rpc_version_;
    }
    if (cached_has_bits & 0x00000002u) {
      channel_ = from.channel_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BitClientHandshake::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:exec.bit.data.BitClientHandshake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BitClientHandshake::CopyFrom(const BitClientHandshake& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:exec.bit.data.BitClientHandshake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BitClientHandshake::IsInitialized() const {
  return true;
}

void BitClientHandshake::Swap(BitClientHandshake* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BitClientHandshake::InternalSwap(BitClientHandshake* other) {
  using std::swap;
  swap(rpc_version_, other->rpc_version_);
  swap(channel_, other->channel_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata BitClientHandshake::GetMetadata() const {
  protobuf_BitData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BitData_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BitServerHandshake::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BitServerHandshake::kRpcVersionFieldNumber;
const int BitServerHandshake::kAuthenticationMechanismsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BitServerHandshake::BitServerHandshake()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_BitData_2eproto::scc_info_BitServerHandshake.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:exec.bit.data.BitServerHandshake)
}
BitServerHandshake::BitServerHandshake(const BitServerHandshake& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      authenticationmechanisms_(from.authenticationmechanisms_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rpc_version_ = from.rpc_version_;
  // @@protoc_insertion_point(copy_constructor:exec.bit.data.BitServerHandshake)
}

void BitServerHandshake::SharedCtor() {
  rpc_version_ = 0;
}

BitServerHandshake::~BitServerHandshake() {
  // @@protoc_insertion_point(destructor:exec.bit.data.BitServerHandshake)
  SharedDtor();
}

void BitServerHandshake::SharedDtor() {
}

void BitServerHandshake::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* BitServerHandshake::descriptor() {
  ::protobuf_BitData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BitData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BitServerHandshake& BitServerHandshake::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_BitData_2eproto::scc_info_BitServerHandshake.base);
  return *internal_default_instance();
}


void BitServerHandshake::Clear() {
// @@protoc_insertion_point(message_clear_start:exec.bit.data.BitServerHandshake)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  authenticationmechanisms_.Clear();
  rpc_version_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BitServerHandshake::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:exec.bit.data.BitServerHandshake)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 rpc_version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_rpc_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rpc_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string authenticationMechanisms = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_authenticationmechanisms()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->authenticationmechanisms(this->authenticationmechanisms_size() - 1).data(),
            static_cast<int>(this->authenticationmechanisms(this->authenticationmechanisms_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "exec.bit.data.BitServerHandshake.authenticationMechanisms");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:exec.bit.data.BitServerHandshake)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:exec.bit.data.BitServerHandshake)
  return false;
#undef DO_
}

void BitServerHandshake::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:exec.bit.data.BitServerHandshake)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 rpc_version = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rpc_version(), output);
  }

  // repeated string authenticationMechanisms = 2;
  for (int i = 0, n = this->authenticationmechanisms_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->authenticationmechanisms(i).data(), static_cast<int>(this->authenticationmechanisms(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.bit.data.BitServerHandshake.authenticationMechanisms");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->authenticationmechanisms(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:exec.bit.data.BitServerHandshake)
}

::google::protobuf::uint8* BitServerHandshake::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:exec.bit.data.BitServerHandshake)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 rpc_version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rpc_version(), target);
  }

  // repeated string authenticationMechanisms = 2;
  for (int i = 0, n = this->authenticationmechanisms_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->authenticationmechanisms(i).data(), static_cast<int>(this->authenticationmechanisms(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.bit.data.BitServerHandshake.authenticationMechanisms");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->authenticationmechanisms(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:exec.bit.data.BitServerHandshake)
  return target;
}

size_t BitServerHandshake::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:exec.bit.data.BitServerHandshake)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string authenticationMechanisms = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->authenticationmechanisms_size());
  for (int i = 0, n = this->authenticationmechanisms_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->authenticationmechanisms(i));
  }

  // optional int32 rpc_version = 1;
  if (has_rpc_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rpc_version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BitServerHandshake::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:exec.bit.data.BitServerHandshake)
  GOOGLE_DCHECK_NE(&from, this);
  const BitServerHandshake* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BitServerHandshake>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:exec.bit.data.BitServerHandshake)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:exec.bit.data.BitServerHandshake)
    MergeFrom(*source);
  }
}

void BitServerHandshake::MergeFrom(const BitServerHandshake& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:exec.bit.data.BitServerHandshake)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  authenticationmechanisms_.MergeFrom(from.authenticationmechanisms_);
  if (from.has_rpc_version()) {
    set_rpc_version(from.rpc_version());
  }
}

void BitServerHandshake::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:exec.bit.data.BitServerHandshake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BitServerHandshake::CopyFrom(const BitServerHandshake& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:exec.bit.data.BitServerHandshake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BitServerHandshake::IsInitialized() const {
  return true;
}

void BitServerHandshake::Swap(BitServerHandshake* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BitServerHandshake::InternalSwap(BitServerHandshake* other) {
  using std::swap;
  authenticationmechanisms_.InternalSwap(CastToBase(&other->authenticationmechanisms_));
  swap(rpc_version_, other->rpc_version_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata BitServerHandshake::GetMetadata() const {
  protobuf_BitData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BitData_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FragmentRecordBatch::InitAsDefaultInstance() {
  ::exec::bit::data::_FragmentRecordBatch_default_instance_._instance.get_mutable()->query_id_ = const_cast< ::exec::shared::QueryId*>(
      ::exec::shared::QueryId::internal_default_instance());
  ::exec::bit::data::_FragmentRecordBatch_default_instance_._instance.get_mutable()->def_ = const_cast< ::exec::shared::RecordBatchDef*>(
      ::exec::shared::RecordBatchDef::internal_default_instance());
}
void FragmentRecordBatch::clear_query_id() {
  if (query_id_ != NULL) query_id_->Clear();
  clear_has_query_id();
}
void FragmentRecordBatch::clear_def() {
  if (def_ != NULL) def_->Clear();
  clear_has_def();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FragmentRecordBatch::kQueryIdFieldNumber;
const int FragmentRecordBatch::kReceivingMajorFragmentIdFieldNumber;
const int FragmentRecordBatch::kReceivingMinorFragmentIdFieldNumber;
const int FragmentRecordBatch::kSendingMajorFragmentIdFieldNumber;
const int FragmentRecordBatch::kSendingMinorFragmentIdFieldNumber;
const int FragmentRecordBatch::kDefFieldNumber;
const int FragmentRecordBatch::kIsLastBatchFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FragmentRecordBatch::FragmentRecordBatch()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_BitData_2eproto::scc_info_FragmentRecordBatch.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:exec.bit.data.FragmentRecordBatch)
}
FragmentRecordBatch::FragmentRecordBatch(const FragmentRecordBatch& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      receiving_minor_fragment_id_(from.receiving_minor_fragment_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_query_id()) {
    query_id_ = new ::exec::shared::QueryId(*from.query_id_);
  } else {
    query_id_ = NULL;
  }
  if (from.has_def()) {
    def_ = new ::exec::shared::RecordBatchDef(*from.def_);
  } else {
    def_ = NULL;
  }
  ::memcpy(&receiving_major_fragment_id_, &from.receiving_major_fragment_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&islastbatch_) -
    reinterpret_cast<char*>(&receiving_major_fragment_id_)) + sizeof(islastbatch_));
  // @@protoc_insertion_point(copy_constructor:exec.bit.data.FragmentRecordBatch)
}

void FragmentRecordBatch::SharedCtor() {
  ::memset(&query_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&islastbatch_) -
      reinterpret_cast<char*>(&query_id_)) + sizeof(islastbatch_));
}

FragmentRecordBatch::~FragmentRecordBatch() {
  // @@protoc_insertion_point(destructor:exec.bit.data.FragmentRecordBatch)
  SharedDtor();
}

void FragmentRecordBatch::SharedDtor() {
  if (this != internal_default_instance()) delete query_id_;
  if (this != internal_default_instance()) delete def_;
}

void FragmentRecordBatch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FragmentRecordBatch::descriptor() {
  ::protobuf_BitData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BitData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FragmentRecordBatch& FragmentRecordBatch::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_BitData_2eproto::scc_info_FragmentRecordBatch.base);
  return *internal_default_instance();
}


void FragmentRecordBatch::Clear() {
// @@protoc_insertion_point(message_clear_start:exec.bit.data.FragmentRecordBatch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  receiving_minor_fragment_id_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(query_id_ != NULL);
      query_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(def_ != NULL);
      def_->Clear();
    }
  }
  if (cached_has_bits & 60u) {
    ::memset(&receiving_major_fragment_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&islastbatch_) -
        reinterpret_cast<char*>(&receiving_major_fragment_id_)) + sizeof(islastbatch_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FragmentRecordBatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:exec.bit.data.FragmentRecordBatch)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .exec.shared.QueryId query_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_query_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 receiving_major_fragment_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_receiving_major_fragment_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &receiving_major_fragment_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 receiving_minor_fragment_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24u, input, this->mutable_receiving_minor_fragment_id())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_receiving_minor_fragment_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 sending_major_fragment_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_sending_major_fragment_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sending_major_fragment_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 sending_minor_fragment_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_sending_minor_fragment_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sending_minor_fragment_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .exec.shared.RecordBatchDef def = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_def()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool isLastBatch = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_islastbatch();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &islastbatch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:exec.bit.data.FragmentRecordBatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:exec.bit.data.FragmentRecordBatch)
  return false;
#undef DO_
}

void FragmentRecordBatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:exec.bit.data.FragmentRecordBatch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .exec.shared.QueryId query_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_query_id(), output);
  }

  // optional int32 receiving_major_fragment_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->receiving_major_fragment_id(), output);
  }

  // repeated int32 receiving_minor_fragment_id = 3;
  for (int i = 0, n = this->receiving_minor_fragment_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->receiving_minor_fragment_id(i), output);
  }

  // optional int32 sending_major_fragment_id = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sending_major_fragment_id(), output);
  }

  // optional int32 sending_minor_fragment_id = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->sending_minor_fragment_id(), output);
  }

  // optional .exec.shared.RecordBatchDef def = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_def(), output);
  }

  // optional bool isLastBatch = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->islastbatch(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:exec.bit.data.FragmentRecordBatch)
}

::google::protobuf::uint8* FragmentRecordBatch::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:exec.bit.data.FragmentRecordBatch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .exec.shared.QueryId query_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_query_id(), deterministic, target);
  }

  // optional int32 receiving_major_fragment_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->receiving_major_fragment_id(), target);
  }

  // repeated int32 receiving_minor_fragment_id = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(3, this->receiving_minor_fragment_id_, target);

  // optional int32 sending_major_fragment_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sending_major_fragment_id(), target);
  }

  // optional int32 sending_minor_fragment_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->sending_minor_fragment_id(), target);
  }

  // optional .exec.shared.RecordBatchDef def = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_def(), deterministic, target);
  }

  // optional bool isLastBatch = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->islastbatch(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:exec.bit.data.FragmentRecordBatch)
  return target;
}

size_t FragmentRecordBatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:exec.bit.data.FragmentRecordBatch)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated int32 receiving_minor_fragment_id = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->receiving_minor_fragment_id_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->receiving_minor_fragment_id_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 63u) {
    // optional .exec.shared.QueryId query_id = 1;
    if (has_query_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *query_id_);
    }

    // optional .exec.shared.RecordBatchDef def = 6;
    if (has_def()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *def_);
    }

    // optional int32 receiving_major_fragment_id = 2;
    if (has_receiving_major_fragment_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->receiving_major_fragment_id());
    }

    // optional int32 sending_major_fragment_id = 4;
    if (has_sending_major_fragment_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sending_major_fragment_id());
    }

    // optional int32 sending_minor_fragment_id = 5;
    if (has_sending_minor_fragment_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sending_minor_fragment_id());
    }

    // optional bool isLastBatch = 7;
    if (has_islastbatch()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FragmentRecordBatch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:exec.bit.data.FragmentRecordBatch)
  GOOGLE_DCHECK_NE(&from, this);
  const FragmentRecordBatch* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FragmentRecordBatch>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:exec.bit.data.FragmentRecordBatch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:exec.bit.data.FragmentRecordBatch)
    MergeFrom(*source);
  }
}

void FragmentRecordBatch::MergeFrom(const FragmentRecordBatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:exec.bit.data.FragmentRecordBatch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  receiving_minor_fragment_id_.MergeFrom(from.receiving_minor_fragment_id_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_query_id()->::exec::shared::QueryId::MergeFrom(from.query_id());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_def()->::exec::shared::RecordBatchDef::MergeFrom(from.def());
    }
    if (cached_has_bits & 0x00000004u) {
      receiving_major_fragment_id_ = from.receiving_major_fragment_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      sending_major_fragment_id_ = from.sending_major_fragment_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      sending_minor_fragment_id_ = from.sending_minor_fragment_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      islastbatch_ = from.islastbatch_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FragmentRecordBatch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:exec.bit.data.FragmentRecordBatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FragmentRecordBatch::CopyFrom(const FragmentRecordBatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:exec.bit.data.FragmentRecordBatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FragmentRecordBatch::IsInitialized() const {
  return true;
}

void FragmentRecordBatch::Swap(FragmentRecordBatch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FragmentRecordBatch::InternalSwap(FragmentRecordBatch* other) {
  using std::swap;
  receiving_minor_fragment_id_.InternalSwap(&other->receiving_minor_fragment_id_);
  swap(query_id_, other->query_id_);
  swap(def_, other->def_);
  swap(receiving_major_fragment_id_, other->receiving_major_fragment_id_);
  swap(sending_major_fragment_id_, other->sending_major_fragment_id_);
  swap(sending_minor_fragment_id_, other->sending_minor_fragment_id_);
  swap(islastbatch_, other->islastbatch_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FragmentRecordBatch::GetMetadata() const {
  protobuf_BitData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BitData_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RuntimeFilterBDef::InitAsDefaultInstance() {
  ::exec::bit::data::_RuntimeFilterBDef_default_instance_._instance.get_mutable()->query_id_ = const_cast< ::exec::shared::QueryId*>(
      ::exec::shared::QueryId::internal_default_instance());
}
void RuntimeFilterBDef::clear_query_id() {
  if (query_id_ != NULL) query_id_->Clear();
  clear_has_query_id();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RuntimeFilterBDef::kQueryIdFieldNumber;
const int RuntimeFilterBDef::kMajorFragmentIdFieldNumber;
const int RuntimeFilterBDef::kMinorFragmentIdFieldNumber;
const int RuntimeFilterBDef::kToForemanFieldNumber;
const int RuntimeFilterBDef::kBloomFilterSizeInBytesFieldNumber;
const int RuntimeFilterBDef::kProbeFieldsFieldNumber;
const int RuntimeFilterBDef::kHjOpIdFieldNumber;
const int RuntimeFilterBDef::kRfIdentifierFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RuntimeFilterBDef::RuntimeFilterBDef()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_BitData_2eproto::scc_info_RuntimeFilterBDef.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:exec.bit.data.RuntimeFilterBDef)
}
RuntimeFilterBDef::RuntimeFilterBDef(const RuntimeFilterBDef& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      bloom_filter_size_in_bytes_(from.bloom_filter_size_in_bytes_),
      probe_fields_(from.probe_fields_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_query_id()) {
    query_id_ = new ::exec::shared::QueryId(*from.query_id_);
  } else {
    query_id_ = NULL;
  }
  ::memcpy(&major_fragment_id_, &from.major_fragment_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&rf_identifier_) -
    reinterpret_cast<char*>(&major_fragment_id_)) + sizeof(rf_identifier_));
  // @@protoc_insertion_point(copy_constructor:exec.bit.data.RuntimeFilterBDef)
}

void RuntimeFilterBDef::SharedCtor() {
  ::memset(&query_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rf_identifier_) -
      reinterpret_cast<char*>(&query_id_)) + sizeof(rf_identifier_));
}

RuntimeFilterBDef::~RuntimeFilterBDef() {
  // @@protoc_insertion_point(destructor:exec.bit.data.RuntimeFilterBDef)
  SharedDtor();
}

void RuntimeFilterBDef::SharedDtor() {
  if (this != internal_default_instance()) delete query_id_;
}

void RuntimeFilterBDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RuntimeFilterBDef::descriptor() {
  ::protobuf_BitData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BitData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RuntimeFilterBDef& RuntimeFilterBDef::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_BitData_2eproto::scc_info_RuntimeFilterBDef.base);
  return *internal_default_instance();
}


void RuntimeFilterBDef::Clear() {
// @@protoc_insertion_point(message_clear_start:exec.bit.data.RuntimeFilterBDef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bloom_filter_size_in_bytes_.Clear();
  probe_fields_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(query_id_ != NULL);
    query_id_->Clear();
  }
  if (cached_has_bits & 62u) {
    ::memset(&major_fragment_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rf_identifier_) -
        reinterpret_cast<char*>(&major_fragment_id_)) + sizeof(rf_identifier_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RuntimeFilterBDef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:exec.bit.data.RuntimeFilterBDef)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .exec.shared.QueryId query_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_query_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 major_fragment_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_major_fragment_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &major_fragment_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 minor_fragment_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_minor_fragment_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minor_fragment_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool to_foreman = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_to_foreman();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &to_foreman_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 bloom_filter_size_in_bytes = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40u, input, this->mutable_bloom_filter_size_in_bytes())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_bloom_filter_size_in_bytes())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string probe_fields = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_probe_fields()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->probe_fields(this->probe_fields_size() - 1).data(),
            static_cast<int>(this->probe_fields(this->probe_fields_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "exec.bit.data.RuntimeFilterBDef.probe_fields");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 hj_op_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_hj_op_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hj_op_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 rf_identifier = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_rf_identifier();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &rf_identifier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:exec.bit.data.RuntimeFilterBDef)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:exec.bit.data.RuntimeFilterBDef)
  return false;
#undef DO_
}

void RuntimeFilterBDef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:exec.bit.data.RuntimeFilterBDef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .exec.shared.QueryId query_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_query_id(), output);
  }

  // optional int32 major_fragment_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->major_fragment_id(), output);
  }

  // optional int32 minor_fragment_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->minor_fragment_id(), output);
  }

  // optional bool to_foreman = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->to_foreman(), output);
  }

  // repeated int32 bloom_filter_size_in_bytes = 5;
  for (int i = 0, n = this->bloom_filter_size_in_bytes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->bloom_filter_size_in_bytes(i), output);
  }

  // repeated string probe_fields = 6;
  for (int i = 0, n = this->probe_fields_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->probe_fields(i).data(), static_cast<int>(this->probe_fields(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.bit.data.RuntimeFilterBDef.probe_fields");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->probe_fields(i), output);
  }

  // optional int32 hj_op_id = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->hj_op_id(), output);
  }

  // optional int64 rf_identifier = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->rf_identifier(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:exec.bit.data.RuntimeFilterBDef)
}

::google::protobuf::uint8* RuntimeFilterBDef::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:exec.bit.data.RuntimeFilterBDef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .exec.shared.QueryId query_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_query_id(), deterministic, target);
  }

  // optional int32 major_fragment_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->major_fragment_id(), target);
  }

  // optional int32 minor_fragment_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->minor_fragment_id(), target);
  }

  // optional bool to_foreman = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->to_foreman(), target);
  }

  // repeated int32 bloom_filter_size_in_bytes = 5;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(5, this->bloom_filter_size_in_bytes_, target);

  // repeated string probe_fields = 6;
  for (int i = 0, n = this->probe_fields_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->probe_fields(i).data(), static_cast<int>(this->probe_fields(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec.bit.data.RuntimeFilterBDef.probe_fields");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->probe_fields(i), target);
  }

  // optional int32 hj_op_id = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->hj_op_id(), target);
  }

  // optional int64 rf_identifier = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->rf_identifier(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:exec.bit.data.RuntimeFilterBDef)
  return target;
}

size_t RuntimeFilterBDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:exec.bit.data.RuntimeFilterBDef)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated int32 bloom_filter_size_in_bytes = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->bloom_filter_size_in_bytes_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->bloom_filter_size_in_bytes_size());
    total_size += data_size;
  }

  // repeated string probe_fields = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->probe_fields_size());
  for (int i = 0, n = this->probe_fields_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->probe_fields(i));
  }

  if (_has_bits_[0 / 32] & 63u) {
    // optional .exec.shared.QueryId query_id = 1;
    if (has_query_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *query_id_);
    }

    // optional int32 major_fragment_id = 2;
    if (has_major_fragment_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->major_fragment_id());
    }

    // optional int32 minor_fragment_id = 3;
    if (has_minor_fragment_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minor_fragment_id());
    }

    // optional bool to_foreman = 4;
    if (has_to_foreman()) {
      total_size += 1 + 1;
    }

    // optional int32 hj_op_id = 7;
    if (has_hj_op_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hj_op_id());
    }

    // optional int64 rf_identifier = 8;
    if (has_rf_identifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->rf_identifier());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RuntimeFilterBDef::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:exec.bit.data.RuntimeFilterBDef)
  GOOGLE_DCHECK_NE(&from, this);
  const RuntimeFilterBDef* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RuntimeFilterBDef>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:exec.bit.data.RuntimeFilterBDef)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:exec.bit.data.RuntimeFilterBDef)
    MergeFrom(*source);
  }
}

void RuntimeFilterBDef::MergeFrom(const RuntimeFilterBDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:exec.bit.data.RuntimeFilterBDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bloom_filter_size_in_bytes_.MergeFrom(from.bloom_filter_size_in_bytes_);
  probe_fields_.MergeFrom(from.probe_fields_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_query_id()->::exec::shared::QueryId::MergeFrom(from.query_id());
    }
    if (cached_has_bits & 0x00000002u) {
      major_fragment_id_ = from.major_fragment_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      minor_fragment_id_ = from.minor_fragment_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      to_foreman_ = from.to_foreman_;
    }
    if (cached_has_bits & 0x00000010u) {
      hj_op_id_ = from.hj_op_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      rf_identifier_ = from.rf_identifier_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RuntimeFilterBDef::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:exec.bit.data.RuntimeFilterBDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RuntimeFilterBDef::CopyFrom(const RuntimeFilterBDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:exec.bit.data.RuntimeFilterBDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RuntimeFilterBDef::IsInitialized() const {
  return true;
}

void RuntimeFilterBDef::Swap(RuntimeFilterBDef* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RuntimeFilterBDef::InternalSwap(RuntimeFilterBDef* other) {
  using std::swap;
  bloom_filter_size_in_bytes_.InternalSwap(&other->bloom_filter_size_in_bytes_);
  probe_fields_.InternalSwap(CastToBase(&other->probe_fields_));
  swap(query_id_, other->query_id_);
  swap(major_fragment_id_, other->major_fragment_id_);
  swap(minor_fragment_id_, other->minor_fragment_id_);
  swap(to_foreman_, other->to_foreman_);
  swap(hj_op_id_, other->hj_op_id_);
  swap(rf_identifier_, other->rf_identifier_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RuntimeFilterBDef::GetMetadata() const {
  protobuf_BitData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BitData_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace data
}  // namespace bit
}  // namespace exec
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::exec::bit::data::BitClientHandshake* Arena::CreateMaybeMessage< ::exec::bit::data::BitClientHandshake >(Arena* arena) {
  return Arena::CreateInternal< ::exec::bit::data::BitClientHandshake >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::exec::bit::data::BitServerHandshake* Arena::CreateMaybeMessage< ::exec::bit::data::BitServerHandshake >(Arena* arena) {
  return Arena::CreateInternal< ::exec::bit::data::BitServerHandshake >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::exec::bit::data::FragmentRecordBatch* Arena::CreateMaybeMessage< ::exec::bit::data::FragmentRecordBatch >(Arena* arena) {
  return Arena::CreateInternal< ::exec::bit::data::FragmentRecordBatch >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::exec::bit::data::RuntimeFilterBDef* Arena::CreateMaybeMessage< ::exec::bit::data::RuntimeFilterBDef >(Arena* arena) {
  return Arena::CreateInternal< ::exec::bit::data::RuntimeFilterBDef >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
