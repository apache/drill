// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Types.proto

#ifndef PROTOBUF_INCLUDED_Types_2eproto
#define PROTOBUF_INCLUDED_Types_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_Types_2eproto 

namespace protobuf_Types_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_Types_2eproto
namespace common {
class MajorType;
class MajorTypeDefaultTypeInternal;
extern MajorTypeDefaultTypeInternal _MajorType_default_instance_;
}  // namespace common
namespace google {
namespace protobuf {
template<> ::common::MajorType* Arena::CreateMaybeMessage<::common::MajorType>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace common {

enum MinorType {
  LATE = 0,
  MAP = 1,
  TINYINT = 3,
  SMALLINT = 4,
  INT = 5,
  BIGINT = 6,
  DECIMAL9 = 7,
  DECIMAL18 = 8,
  DECIMAL28SPARSE = 9,
  DECIMAL38SPARSE = 10,
  MONEY = 11,
  DATE = 12,
  TIME = 13,
  TIMETZ = 14,
  TIMESTAMPTZ = 15,
  TIMESTAMP = 16,
  INTERVAL = 17,
  FLOAT4 = 18,
  FLOAT8 = 19,
  BIT = 20,
  FIXEDCHAR = 21,
  FIXED16CHAR = 22,
  FIXEDBINARY = 23,
  VARCHAR = 24,
  VAR16CHAR = 25,
  VARBINARY = 26,
  UINT1 = 29,
  UINT2 = 30,
  UINT4 = 31,
  UINT8 = 32,
  DECIMAL28DENSE = 33,
  DECIMAL38DENSE = 34,
  DM_UNKNOWN = 37,
  INTERVALYEAR = 38,
  INTERVALDAY = 39,
  LIST = 40,
  GENERIC_OBJECT = 41,
  UNION = 42,
  VARDECIMAL = 43
};
bool MinorType_IsValid(int value);
const MinorType MinorType_MIN = LATE;
const MinorType MinorType_MAX = VARDECIMAL;
const int MinorType_ARRAYSIZE = MinorType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MinorType_descriptor();
inline const ::std::string& MinorType_Name(MinorType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MinorType_descriptor(), value);
}
inline bool MinorType_Parse(
    const ::std::string& name, MinorType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MinorType>(
    MinorType_descriptor(), name, value);
}
enum DataMode {
  DM_OPTIONAL = 0,
  DM_REQUIRED = 1,
  DM_REPEATED = 2
};
bool DataMode_IsValid(int value);
const DataMode DataMode_MIN = DM_OPTIONAL;
const DataMode DataMode_MAX = DM_REPEATED;
const int DataMode_ARRAYSIZE = DataMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* DataMode_descriptor();
inline const ::std::string& DataMode_Name(DataMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    DataMode_descriptor(), value);
}
inline bool DataMode_Parse(
    const ::std::string& name, DataMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DataMode>(
    DataMode_descriptor(), name, value);
}
// ===================================================================

class MajorType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:common.MajorType) */ {
 public:
  MajorType();
  virtual ~MajorType();

  MajorType(const MajorType& from);

  inline MajorType& operator=(const MajorType& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MajorType(MajorType&& from) noexcept
    : MajorType() {
    *this = ::std::move(from);
  }

  inline MajorType& operator=(MajorType&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MajorType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MajorType* internal_default_instance() {
    return reinterpret_cast<const MajorType*>(
               &_MajorType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(MajorType* other);
  friend void swap(MajorType& a, MajorType& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MajorType* New() const final {
    return CreateMaybeMessage<MajorType>(NULL);
  }

  MajorType* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MajorType>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MajorType& from);
  void MergeFrom(const MajorType& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MajorType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .common.MinorType sub_type = 7;
  int sub_type_size() const;
  void clear_sub_type();
  static const int kSubTypeFieldNumber = 7;
  ::common::MinorType sub_type(int index) const;
  void set_sub_type(int index, ::common::MinorType value);
  void add_sub_type(::common::MinorType value);
  const ::google::protobuf::RepeatedField<int>& sub_type() const;
  ::google::protobuf::RepeatedField<int>* mutable_sub_type();

  // optional .common.MinorType minor_type = 1;
  bool has_minor_type() const;
  void clear_minor_type();
  static const int kMinorTypeFieldNumber = 1;
  ::common::MinorType minor_type() const;
  void set_minor_type(::common::MinorType value);

  // optional .common.DataMode mode = 2;
  bool has_mode() const;
  void clear_mode();
  static const int kModeFieldNumber = 2;
  ::common::DataMode mode() const;
  void set_mode(::common::DataMode value);

  // optional int32 width = 3;
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 3;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // optional int32 precision = 4;
  bool has_precision() const;
  void clear_precision();
  static const int kPrecisionFieldNumber = 4;
  ::google::protobuf::int32 precision() const;
  void set_precision(::google::protobuf::int32 value);

  // optional int32 scale = 5;
  bool has_scale() const;
  void clear_scale();
  static const int kScaleFieldNumber = 5;
  ::google::protobuf::int32 scale() const;
  void set_scale(::google::protobuf::int32 value);

  // optional int32 timeZone = 6;
  bool has_timezone() const;
  void clear_timezone();
  static const int kTimeZoneFieldNumber = 6;
  ::google::protobuf::int32 timezone() const;
  void set_timezone(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:common.MajorType)
 private:
  void set_has_minor_type();
  void clear_has_minor_type();
  void set_has_mode();
  void clear_has_mode();
  void set_has_width();
  void clear_has_width();
  void set_has_precision();
  void clear_has_precision();
  void set_has_scale();
  void clear_has_scale();
  void set_has_timezone();
  void clear_has_timezone();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField<int> sub_type_;
  int minor_type_;
  int mode_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 precision_;
  ::google::protobuf::int32 scale_;
  ::google::protobuf::int32 timezone_;
  friend struct ::protobuf_Types_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MajorType

// optional .common.MinorType minor_type = 1;
inline bool MajorType::has_minor_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MajorType::set_has_minor_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MajorType::clear_has_minor_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MajorType::clear_minor_type() {
  minor_type_ = 0;
  clear_has_minor_type();
}
inline ::common::MinorType MajorType::minor_type() const {
  // @@protoc_insertion_point(field_get:common.MajorType.minor_type)
  return static_cast< ::common::MinorType >(minor_type_);
}
inline void MajorType::set_minor_type(::common::MinorType value) {
  assert(::common::MinorType_IsValid(value));
  set_has_minor_type();
  minor_type_ = value;
  // @@protoc_insertion_point(field_set:common.MajorType.minor_type)
}

// optional .common.DataMode mode = 2;
inline bool MajorType::has_mode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MajorType::set_has_mode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MajorType::clear_has_mode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MajorType::clear_mode() {
  mode_ = 0;
  clear_has_mode();
}
inline ::common::DataMode MajorType::mode() const {
  // @@protoc_insertion_point(field_get:common.MajorType.mode)
  return static_cast< ::common::DataMode >(mode_);
}
inline void MajorType::set_mode(::common::DataMode value) {
  assert(::common::DataMode_IsValid(value));
  set_has_mode();
  mode_ = value;
  // @@protoc_insertion_point(field_set:common.MajorType.mode)
}

// optional int32 width = 3;
inline bool MajorType::has_width() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MajorType::set_has_width() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MajorType::clear_has_width() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MajorType::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 MajorType::width() const {
  // @@protoc_insertion_point(field_get:common.MajorType.width)
  return width_;
}
inline void MajorType::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:common.MajorType.width)
}

// optional int32 precision = 4;
inline bool MajorType::has_precision() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MajorType::set_has_precision() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MajorType::clear_has_precision() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MajorType::clear_precision() {
  precision_ = 0;
  clear_has_precision();
}
inline ::google::protobuf::int32 MajorType::precision() const {
  // @@protoc_insertion_point(field_get:common.MajorType.precision)
  return precision_;
}
inline void MajorType::set_precision(::google::protobuf::int32 value) {
  set_has_precision();
  precision_ = value;
  // @@protoc_insertion_point(field_set:common.MajorType.precision)
}

// optional int32 scale = 5;
inline bool MajorType::has_scale() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MajorType::set_has_scale() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MajorType::clear_has_scale() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MajorType::clear_scale() {
  scale_ = 0;
  clear_has_scale();
}
inline ::google::protobuf::int32 MajorType::scale() const {
  // @@protoc_insertion_point(field_get:common.MajorType.scale)
  return scale_;
}
inline void MajorType::set_scale(::google::protobuf::int32 value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:common.MajorType.scale)
}

// optional int32 timeZone = 6;
inline bool MajorType::has_timezone() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MajorType::set_has_timezone() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MajorType::clear_has_timezone() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MajorType::clear_timezone() {
  timezone_ = 0;
  clear_has_timezone();
}
inline ::google::protobuf::int32 MajorType::timezone() const {
  // @@protoc_insertion_point(field_get:common.MajorType.timeZone)
  return timezone_;
}
inline void MajorType::set_timezone(::google::protobuf::int32 value) {
  set_has_timezone();
  timezone_ = value;
  // @@protoc_insertion_point(field_set:common.MajorType.timeZone)
}

// repeated .common.MinorType sub_type = 7;
inline int MajorType::sub_type_size() const {
  return sub_type_.size();
}
inline void MajorType::clear_sub_type() {
  sub_type_.Clear();
}
inline ::common::MinorType MajorType::sub_type(int index) const {
  // @@protoc_insertion_point(field_get:common.MajorType.sub_type)
  return static_cast< ::common::MinorType >(sub_type_.Get(index));
}
inline void MajorType::set_sub_type(int index, ::common::MinorType value) {
  assert(::common::MinorType_IsValid(value));
  sub_type_.Set(index, value);
  // @@protoc_insertion_point(field_set:common.MajorType.sub_type)
}
inline void MajorType::add_sub_type(::common::MinorType value) {
  assert(::common::MinorType_IsValid(value));
  sub_type_.Add(value);
  // @@protoc_insertion_point(field_add:common.MajorType.sub_type)
}
inline const ::google::protobuf::RepeatedField<int>&
MajorType::sub_type() const {
  // @@protoc_insertion_point(field_list:common.MajorType.sub_type)
  return sub_type_;
}
inline ::google::protobuf::RepeatedField<int>*
MajorType::mutable_sub_type() {
  // @@protoc_insertion_point(field_mutable_list:common.MajorType.sub_type)
  return &sub_type_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace common

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::common::MinorType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::common::MinorType>() {
  return ::common::MinorType_descriptor();
}
template <> struct is_proto_enum< ::common::DataMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::common::DataMode>() {
  return ::common::DataMode_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_Types_2eproto
