/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include <boost/assign.hpp>
#include <boost/functional/hash.hpp>
#include <boost/unordered_set.hpp>
#include "drillClientImpl.hpp"

#include "metadata.hpp"

const std::string Drill::meta::DrillMetadata::s_connectorName(DRILL_CONNECTOR_NAME);
const std::string Drill::meta::DrillMetadata::s_connectorVersion(DRILL_VERSION_STRING);

const std::string Drill::meta::DrillMetadata::s_catalogSeparator(".");
const std::string Drill::meta::DrillMetadata::s_catalogTerm("catalog");
const std::string Drill::meta::DrillMetadata::s_identifierQuoteString("`");

const std::vector<std::string> Drill::meta::DrillMetadata::s_sqlKeywords = boost::assign::list_of
		("ABS")("ALLOW")("ARRAY")("ASENSITIVE")("ASYMMETRIC")("ATOMIC")("BIGINT")("BINARY")("BLOB")
		("BOOLEAN")("CALL")("CALLED")("CARDINALITY")("CEIL")("CEILING")("CLOB")("COLLECT")("CONDITION")
		("CORR")("COVAR_POP")("COVAR_SAMP")("CUBE")("CUME_DIST")("CURRENT_CATALOG")
		("CURRENT_DEFAULT_TRANSFORM_GROUP")("CURRENT_PATH")("CURRENT_ROLE")("CURRENT_SCHEMA")
		("CURRENT_TRANSFORM_GROUP_FOR_TYPE")("CYCLE")("DATABASE")("DATABASES")("DENSE_RANK")("DEREF")
		("DETERMINISTIC")("DISALLOW")("DYNAMIC")("EACH")("ELEMENT")("EVERY")("EXP")("EXPLAIN")
		("EXTEND")("FILES")("FILTER")("FIRST_VALUE")("FLOOR")("FREE")("FUNCTION")("FUSION")("GROUPING")
		("HOLD")("IF")("IMPORT")("INOUT")("INTERSECTION")("LARGE")("LAST_VALUE")("LATERAL")("LIMIT")("LN")
		("LOCALTIME")("LOCALTIMESTAMP")("MEMBER")("MERGE")("METADATA")("METHOD")("MOD")("MODIFIES")
		("MULTISET")("NCLOB")("NEW")("NONE")("NORMALIZE")("OFFSET")("OLD")("OUT")("OVER")("OVERLAY")
		("PARAMETER")("PARTITION")("PERCENTILE_CONT")("PERCENTILE_DISC")("PERCENT_RANK")("POWER")
		("RANGE")("RANK")("READS")("RECURSIVE")("REF")("REFERENCING")("REFRESH")("REGR_AVGX")("REGR_AVGY")
		("REGR_COUNT")("REGR_INTERCEPT")("REGR_R2")("REGR_SLOPE")("REGR_SXX")("REGR_SXY")("REGR_SYY")
		("RELEASE")("REPLACE")("RESET")("RESULT")("RETURN")("RETURNS")("ROLLUP")("ROW")("ROW_NUMBER")
		("SAVEPOINT")("SCHEMAS")("SCOPE")("SEARCH")("SENSITIVE")("SHOW")("SIMILAR")("SPECIFIC")("SPECIFICTYPE")
		("SQLEXCEPTION")("SQLWARNING")("SQRT")("START")("STATIC")("STDDEV_POP")("STDDEV_SAMP")("STREAM")
		("SUBMULTISET")("SYMMETRIC")("SYSTEM")("TABLES")("TABLESAMPLE")("TINYINT")("TREAT")("TRIGGER")
		("UESCAPE")("UNNEST")("UPSERT")("USE")("VARBINARY")("VAR_POP")("VAR_SAMP")("WIDTH_BUCKET")
		("WINDOW")("WITHIN")("WITHOUT");

const std::vector<std::string> Drill::meta::DrillMetadata::s_numericFunctions = boost::assign::list_of
		("ABS")("ACOS")("ASIN")("ATAN")("ATAN2")("CEILING")("COS")("COT")
		("DEGREES")("EXP")("FLOOR")("LOG")("LOG10")("MOD")("PI")
		("POWER")("RADIANS")("RAND")("ROUND")("SIGN")("SIN")("SQRT")
		("TAN")("TRUNCATE");

const std::string Drill::meta::DrillMetadata::s_schemaTerm("schema");
const std::string Drill::meta::DrillMetadata::s_searchEscapeString("\\");
const std::string Drill::meta::DrillMetadata::s_specialCharacters;

const std::vector<std::string> Drill::meta::DrillMetadata::s_stringFunctions = boost::assign::list_of
		("ASCII")("CHAR")("CONCAT")("DIFFERENCE")("INSERT")("LCASE")
		("LEFT")("LENGTH")("LOCATE")("LTRIM")("REPEAT")("REPLACE")
		("RIGHT")("RTRIM")("SOUNDEX")("SPACE")("SUBSTRING")("UCASE");

const std::vector<std::string> Drill::meta::DrillMetadata::s_systemFunctions = boost::assign::list_of
		("DATABASE")("IFNULL")("USER");

const std::string Drill::meta::DrillMetadata::s_tableTerm("table");

const std::vector<std::string> Drill::meta::DrillMetadata::s_dateTimeFunctions = boost::assign::list_of
		("CURDATE")("CURTIME")("DAYNAME")("DAYOFMONTH")("DAYOFWEEK")
		("DAYOFYEAR")("HOUR")("MINUTE")("MONTH")("MONTHNAME")("NOW")
		("QUARTER")("SECOND")("TIMESTAMPADD")("TIMESTAMPDIFF")("WEEK")("YEAR");

namespace Drill {
namespace meta {
namespace {
using boost::assign::list_of;

struct FromTo {
	FromTo(common::MinorType from, common::MinorType to): m_from(from), m_to(to) {}

	common::MinorType m_from;
	common::MinorType m_to;
};

bool operator==(FromTo const& ft1, FromTo const& ft2) {
	return ft1.m_from == ft2.m_from && ft1.m_to == ft2.m_to;
}

std::size_t hash_value(FromTo const& ft) {
	std::size_t hash = 0;
	boost::hash_combine(hash, ft.m_from);
	boost::hash_combine(hash, ft.m_to);

	return hash;
}

static boost::unordered_set<FromTo> s_convertMap = boost::assign::list_of
		(FromTo(common::TINYINT, common::INT))
		(FromTo(common::TINYINT, common::BIGINT))
		(FromTo(common::TINYINT, common::DECIMAL9))
		(FromTo(common::TINYINT, common::DECIMAL18))
		(FromTo(common::TINYINT, common::DECIMAL28SPARSE))
		(FromTo(common::TINYINT, common::DECIMAL38SPARSE))
		(FromTo(common::TINYINT, common::DATE))
		(FromTo(common::TINYINT, common::TIME))
		(FromTo(common::TINYINT, common::TIMESTAMP))
		(FromTo(common::TINYINT, common::INTERVAL))
		(FromTo(common::TINYINT, common::FLOAT4))
		(FromTo(common::TINYINT, common::FLOAT8))
		(FromTo(common::TINYINT, common::BIT))
		(FromTo(common::TINYINT, common::VARCHAR))
		(FromTo(common::TINYINT, common::VAR16CHAR))
		(FromTo(common::TINYINT, common::VARBINARY))
		(FromTo(common::TINYINT, common::INTERVALYEAR))
		(FromTo(common::TINYINT, common::INTERVALDAY))
		(FromTo(common::SMALLINT, common::INT))
		(FromTo(common::SMALLINT, common::BIGINT))
		(FromTo(common::SMALLINT, common::DECIMAL9))
		(FromTo(common::SMALLINT, common::DECIMAL18))
		(FromTo(common::SMALLINT, common::DECIMAL28SPARSE))
		(FromTo(common::SMALLINT, common::DECIMAL38SPARSE))
		(FromTo(common::SMALLINT, common::DATE))
		(FromTo(common::SMALLINT, common::TIME))
		(FromTo(common::SMALLINT, common::TIMESTAMP))
		(FromTo(common::SMALLINT, common::INTERVAL))
		(FromTo(common::SMALLINT, common::FLOAT4))
		(FromTo(common::SMALLINT, common::FLOAT8))
		(FromTo(common::SMALLINT, common::BIT))
		(FromTo(common::SMALLINT, common::VARCHAR))
		(FromTo(common::SMALLINT, common::VAR16CHAR))
		(FromTo(common::SMALLINT, common::VARBINARY))
		(FromTo(common::SMALLINT, common::INTERVALYEAR))
		(FromTo(common::SMALLINT, common::INTERVALDAY))
		(FromTo(common::INT, common::INT))
		(FromTo(common::INT, common::BIGINT))
		(FromTo(common::INT, common::DECIMAL9))
		(FromTo(common::INT, common::DECIMAL18))
		(FromTo(common::INT, common::DECIMAL28SPARSE))
		(FromTo(common::INT, common::DECIMAL38SPARSE))
		(FromTo(common::INT, common::DATE))
		(FromTo(common::INT, common::TIME))
		(FromTo(common::INT, common::TIMESTAMP))
		(FromTo(common::INT, common::INTERVAL))
		(FromTo(common::INT, common::FLOAT4))
		(FromTo(common::INT, common::FLOAT8))
		(FromTo(common::INT, common::BIT))
		(FromTo(common::INT, common::VARCHAR))
		(FromTo(common::INT, common::VAR16CHAR))
		(FromTo(common::INT, common::VARBINARY))
		(FromTo(common::INT, common::INTERVALYEAR))
		(FromTo(common::INT, common::INTERVALDAY))
		(FromTo(common::BIGINT, common::INT))
		(FromTo(common::BIGINT, common::BIGINT))
		(FromTo(common::BIGINT, common::DECIMAL9))
		(FromTo(common::BIGINT, common::DECIMAL18))
		(FromTo(common::BIGINT, common::DECIMAL28SPARSE))
		(FromTo(common::BIGINT, common::DECIMAL38SPARSE))
		(FromTo(common::BIGINT, common::DATE))
		(FromTo(common::BIGINT, common::TIME))
		(FromTo(common::BIGINT, common::TIMESTAMP))
		(FromTo(common::BIGINT, common::INTERVAL))
		(FromTo(common::BIGINT, common::FLOAT4))
		(FromTo(common::BIGINT, common::FLOAT8))
		(FromTo(common::BIGINT, common::BIT))
		(FromTo(common::BIGINT, common::VARCHAR))
		(FromTo(common::BIGINT, common::VAR16CHAR))
		(FromTo(common::BIGINT, common::VARBINARY))
		(FromTo(common::BIGINT, common::INTERVALYEAR))
		(FromTo(common::BIGINT, common::INTERVALDAY))
		(FromTo(common::DECIMAL9, common::INT))
		(FromTo(common::DECIMAL9, common::BIGINT))
		(FromTo(common::DECIMAL9, common::DECIMAL9))
		(FromTo(common::DECIMAL9, common::DECIMAL18))
		(FromTo(common::DECIMAL9, common::DECIMAL28SPARSE))
		(FromTo(common::DECIMAL9, common::DECIMAL38SPARSE))
		(FromTo(common::DECIMAL9, common::DATE))
		(FromTo(common::DECIMAL9, common::TIME))
		(FromTo(common::DECIMAL9, common::TIMESTAMP))
		(FromTo(common::DECIMAL9, common::INTERVAL))
		(FromTo(common::DECIMAL9, common::FLOAT4))
		(FromTo(common::DECIMAL9, common::FLOAT8))
		(FromTo(common::DECIMAL9, common::BIT))
		(FromTo(common::DECIMAL9, common::VARCHAR))
		(FromTo(common::DECIMAL9, common::VAR16CHAR))
		(FromTo(common::DECIMAL9, common::VARBINARY))
		(FromTo(common::DECIMAL9, common::INTERVALYEAR))
		(FromTo(common::DECIMAL9, common::INTERVALDAY))
		(FromTo(common::DECIMAL18, common::INT))
		(FromTo(common::DECIMAL18, common::BIGINT))
		(FromTo(common::DECIMAL18, common::DECIMAL9))
		(FromTo(common::DECIMAL18, common::DECIMAL18))
		(FromTo(common::DECIMAL18, common::DECIMAL28SPARSE))
		(FromTo(common::DECIMAL18, common::DECIMAL38SPARSE))
		(FromTo(common::DECIMAL18, common::DATE))
		(FromTo(common::DECIMAL18, common::TIME))
		(FromTo(common::DECIMAL18, common::TIMESTAMP))
		(FromTo(common::DECIMAL18, common::INTERVAL))
		(FromTo(common::DECIMAL18, common::FLOAT4))
		(FromTo(common::DECIMAL18, common::FLOAT8))
		(FromTo(common::DECIMAL18, common::BIT))
		(FromTo(common::DECIMAL18, common::VARCHAR))
		(FromTo(common::DECIMAL18, common::VAR16CHAR))
		(FromTo(common::DECIMAL18, common::VARBINARY))
		(FromTo(common::DECIMAL18, common::INTERVALYEAR))
		(FromTo(common::DECIMAL18, common::INTERVALDAY))
		(FromTo(common::DECIMAL28SPARSE, common::INT))
		(FromTo(common::DECIMAL28SPARSE, common::BIGINT))
		(FromTo(common::DECIMAL28SPARSE, common::DECIMAL9))
		(FromTo(common::DECIMAL28SPARSE, common::DECIMAL18))
		(FromTo(common::DECIMAL28SPARSE, common::DECIMAL28SPARSE))
		(FromTo(common::DECIMAL28SPARSE, common::DECIMAL38SPARSE))
		(FromTo(common::DECIMAL28SPARSE, common::DATE))
		(FromTo(common::DECIMAL28SPARSE, common::TIME))
		(FromTo(common::DECIMAL28SPARSE, common::TIMESTAMP))
		(FromTo(common::DECIMAL28SPARSE, common::INTERVAL))
		(FromTo(common::DECIMAL28SPARSE, common::FLOAT4))
		(FromTo(common::DECIMAL28SPARSE, common::FLOAT8))
		(FromTo(common::DECIMAL28SPARSE, common::BIT))
		(FromTo(common::DECIMAL28SPARSE, common::VARCHAR))
		(FromTo(common::DECIMAL28SPARSE, common::VAR16CHAR))
		(FromTo(common::DECIMAL28SPARSE, common::VARBINARY))
		(FromTo(common::DECIMAL28SPARSE, common::INTERVALYEAR))
		(FromTo(common::DECIMAL28SPARSE, common::INTERVALDAY))
		(FromTo(common::DECIMAL38SPARSE, common::INT))
		(FromTo(common::DECIMAL38SPARSE, common::BIGINT))
		(FromTo(common::DECIMAL38SPARSE, common::DECIMAL9))
		(FromTo(common::DECIMAL38SPARSE, common::DECIMAL18))
		(FromTo(common::DECIMAL38SPARSE, common::DECIMAL28SPARSE))
		(FromTo(common::DECIMAL38SPARSE, common::DECIMAL38SPARSE))
		(FromTo(common::DECIMAL38SPARSE, common::DATE))
		(FromTo(common::DECIMAL38SPARSE, common::TIME))
		(FromTo(common::DECIMAL38SPARSE, common::TIMESTAMP))
		(FromTo(common::DECIMAL38SPARSE, common::INTERVAL))
		(FromTo(common::DECIMAL38SPARSE, common::FLOAT4))
		(FromTo(common::DECIMAL38SPARSE, common::FLOAT8))
		(FromTo(common::DECIMAL38SPARSE, common::BIT))
		(FromTo(common::DECIMAL38SPARSE, common::VARCHAR))
		(FromTo(common::DECIMAL38SPARSE, common::VAR16CHAR))
		(FromTo(common::DECIMAL38SPARSE, common::VARBINARY))
		(FromTo(common::DECIMAL38SPARSE, common::INTERVALYEAR))
		(FromTo(common::DECIMAL38SPARSE, common::INTERVALDAY))
		(FromTo(common::MONEY, common::INT))
		(FromTo(common::MONEY, common::BIGINT))
		(FromTo(common::MONEY, common::DECIMAL9))
		(FromTo(common::MONEY, common::DECIMAL18))
		(FromTo(common::MONEY, common::DECIMAL28SPARSE))
		(FromTo(common::MONEY, common::DECIMAL38SPARSE))
		(FromTo(common::MONEY, common::DATE))
		(FromTo(common::MONEY, common::TIME))
		(FromTo(common::MONEY, common::TIMESTAMP))
		(FromTo(common::MONEY, common::INTERVAL))
		(FromTo(common::MONEY, common::FLOAT4))
		(FromTo(common::MONEY, common::FLOAT8))
		(FromTo(common::MONEY, common::BIT))
		(FromTo(common::MONEY, common::VARCHAR))
		(FromTo(common::MONEY, common::VAR16CHAR))
		(FromTo(common::MONEY, common::VARBINARY))
		(FromTo(common::MONEY, common::INTERVALYEAR))
		(FromTo(common::MONEY, common::INTERVALDAY))
		(FromTo(common::DATE, common::INT))
		(FromTo(common::DATE, common::BIGINT))
		(FromTo(common::DATE, common::DECIMAL9))
		(FromTo(common::DATE, common::DECIMAL18))
		(FromTo(common::DATE, common::DECIMAL28SPARSE))
		(FromTo(common::DATE, common::DECIMAL38SPARSE))
		(FromTo(common::DATE, common::DATE))
		(FromTo(common::DATE, common::TIME))
		(FromTo(common::DATE, common::TIMESTAMP))
		(FromTo(common::DATE, common::INTERVAL))
		(FromTo(common::DATE, common::FLOAT4))
		(FromTo(common::DATE, common::FLOAT8))
		(FromTo(common::DATE, common::BIT))
		(FromTo(common::DATE, common::VARCHAR))
		(FromTo(common::DATE, common::VAR16CHAR))
		(FromTo(common::DATE, common::VARBINARY))
		(FromTo(common::DATE, common::INTERVALYEAR))
		(FromTo(common::DATE, common::INTERVALDAY))
		(FromTo(common::TIME, common::INT))
		(FromTo(common::TIME, common::BIGINT))
		(FromTo(common::TIME, common::DECIMAL9))
		(FromTo(common::TIME, common::DECIMAL18))
		(FromTo(common::TIME, common::DECIMAL28SPARSE))
		(FromTo(common::TIME, common::DECIMAL38SPARSE))
		(FromTo(common::TIME, common::DATE))
		(FromTo(common::TIME, common::TIME))
		(FromTo(common::TIME, common::TIMESTAMP))
		(FromTo(common::TIME, common::INTERVAL))
		(FromTo(common::TIME, common::FLOAT4))
		(FromTo(common::TIME, common::FLOAT8))
		(FromTo(common::TIME, common::BIT))
		(FromTo(common::TIME, common::VARCHAR))
		(FromTo(common::TIME, common::VAR16CHAR))
		(FromTo(common::TIME, common::VARBINARY))
		(FromTo(common::TIME, common::INTERVALYEAR))
		(FromTo(common::TIME, common::INTERVALDAY))
		(FromTo(common::TIMESTAMPTZ, common::INT))
		(FromTo(common::TIMESTAMPTZ, common::BIGINT))
		(FromTo(common::TIMESTAMPTZ, common::DECIMAL9))
		(FromTo(common::TIMESTAMPTZ, common::DECIMAL18))
		(FromTo(common::TIMESTAMPTZ, common::DECIMAL28SPARSE))
		(FromTo(common::TIMESTAMPTZ, common::DECIMAL38SPARSE))
		(FromTo(common::TIMESTAMPTZ, common::DATE))
		(FromTo(common::TIMESTAMPTZ, common::TIME))
		(FromTo(common::TIMESTAMPTZ, common::TIMESTAMP))
		(FromTo(common::TIMESTAMPTZ, common::INTERVAL))
		(FromTo(common::TIMESTAMPTZ, common::FLOAT4))
		(FromTo(common::TIMESTAMPTZ, common::FLOAT8))
		(FromTo(common::TIMESTAMPTZ, common::BIT))
		(FromTo(common::TIMESTAMPTZ, common::VARCHAR))
		(FromTo(common::TIMESTAMPTZ, common::VAR16CHAR))
		(FromTo(common::TIMESTAMPTZ, common::VARBINARY))
		(FromTo(common::TIMESTAMPTZ, common::INTERVALYEAR))
		(FromTo(common::TIMESTAMPTZ, common::INTERVALDAY))
		(FromTo(common::TIMESTAMP, common::INT))
		(FromTo(common::TIMESTAMP, common::BIGINT))
		(FromTo(common::TIMESTAMP, common::DECIMAL9))
		(FromTo(common::TIMESTAMP, common::DECIMAL18))
		(FromTo(common::TIMESTAMP, common::DECIMAL28SPARSE))
		(FromTo(common::TIMESTAMP, common::DECIMAL38SPARSE))
		(FromTo(common::TIMESTAMP, common::DATE))
		(FromTo(common::TIMESTAMP, common::TIME))
		(FromTo(common::TIMESTAMP, common::TIMESTAMP))
		(FromTo(common::TIMESTAMP, common::INTERVAL))
		(FromTo(common::TIMESTAMP, common::FLOAT4))
		(FromTo(common::TIMESTAMP, common::FLOAT8))
		(FromTo(common::TIMESTAMP, common::BIT))
		(FromTo(common::TIMESTAMP, common::VARCHAR))
		(FromTo(common::TIMESTAMP, common::VAR16CHAR))
		(FromTo(common::TIMESTAMP, common::VARBINARY))
		(FromTo(common::TIMESTAMP, common::INTERVALYEAR))
		(FromTo(common::TIMESTAMP, common::INTERVALDAY))
		(FromTo(common::INTERVAL, common::INT))
		(FromTo(common::INTERVAL, common::BIGINT))
		(FromTo(common::INTERVAL, common::DECIMAL9))
		(FromTo(common::INTERVAL, common::DECIMAL18))
		(FromTo(common::INTERVAL, common::DECIMAL28SPARSE))
		(FromTo(common::INTERVAL, common::DECIMAL38SPARSE))
		(FromTo(common::INTERVAL, common::DATE))
		(FromTo(common::INTERVAL, common::TIME))
		(FromTo(common::INTERVAL, common::TIMESTAMP))
		(FromTo(common::INTERVAL, common::INTERVAL))
		(FromTo(common::INTERVAL, common::FLOAT4))
		(FromTo(common::INTERVAL, common::FLOAT8))
		(FromTo(common::INTERVAL, common::BIT))
		(FromTo(common::INTERVAL, common::VARCHAR))
		(FromTo(common::INTERVAL, common::VAR16CHAR))
		(FromTo(common::INTERVAL, common::VARBINARY))
		(FromTo(common::INTERVAL, common::INTERVALYEAR))
		(FromTo(common::INTERVAL, common::INTERVALDAY))
		(FromTo(common::FLOAT4, common::INT))
		(FromTo(common::FLOAT4, common::BIGINT))
		(FromTo(common::FLOAT4, common::DECIMAL9))
		(FromTo(common::FLOAT4, common::DECIMAL18))
		(FromTo(common::FLOAT4, common::DECIMAL28SPARSE))
		(FromTo(common::FLOAT4, common::DECIMAL38SPARSE))
		(FromTo(common::FLOAT4, common::DATE))
		(FromTo(common::FLOAT4, common::TIME))
		(FromTo(common::FLOAT4, common::TIMESTAMP))
		(FromTo(common::FLOAT4, common::INTERVAL))
		(FromTo(common::FLOAT4, common::FLOAT4))
		(FromTo(common::FLOAT4, common::FLOAT8))
		(FromTo(common::FLOAT4, common::BIT))
		(FromTo(common::FLOAT4, common::VARCHAR))
		(FromTo(common::FLOAT4, common::VAR16CHAR))
		(FromTo(common::FLOAT4, common::VARBINARY))
		(FromTo(common::FLOAT4, common::INTERVALYEAR))
		(FromTo(common::FLOAT4, common::INTERVALDAY))
		(FromTo(common::FLOAT8, common::INT))
		(FromTo(common::FLOAT8, common::BIGINT))
		(FromTo(common::FLOAT8, common::DECIMAL9))
		(FromTo(common::FLOAT8, common::DECIMAL18))
		(FromTo(common::FLOAT8, common::DECIMAL28SPARSE))
		(FromTo(common::FLOAT8, common::DECIMAL38SPARSE))
		(FromTo(common::FLOAT8, common::DATE))
		(FromTo(common::FLOAT8, common::TIME))
		(FromTo(common::FLOAT8, common::TIMESTAMP))
		(FromTo(common::FLOAT8, common::INTERVAL))
		(FromTo(common::FLOAT8, common::FLOAT4))
		(FromTo(common::FLOAT8, common::FLOAT8))
		(FromTo(common::FLOAT8, common::BIT))
		(FromTo(common::FLOAT8, common::VARCHAR))
		(FromTo(common::FLOAT8, common::VAR16CHAR))
		(FromTo(common::FLOAT8, common::VARBINARY))
		(FromTo(common::FLOAT8, common::INTERVALYEAR))
		(FromTo(common::FLOAT8, common::INTERVALDAY))
		(FromTo(common::BIT, common::TINYINT))
		(FromTo(common::BIT, common::INT))
		(FromTo(common::BIT, common::BIGINT))
		(FromTo(common::BIT, common::DECIMAL9))
		(FromTo(common::BIT, common::DECIMAL18))
		(FromTo(common::BIT, common::DECIMAL28SPARSE))
		(FromTo(common::BIT, common::DECIMAL38SPARSE))
		(FromTo(common::BIT, common::DATE))
		(FromTo(common::BIT, common::TIME))
		(FromTo(common::BIT, common::TIMESTAMP))
		(FromTo(common::BIT, common::INTERVAL))
		(FromTo(common::BIT, common::FLOAT4))
		(FromTo(common::BIT, common::FLOAT8))
		(FromTo(common::BIT, common::BIT))
		(FromTo(common::BIT, common::VARCHAR))
		(FromTo(common::BIT, common::VAR16CHAR))
		(FromTo(common::BIT, common::VARBINARY))
		(FromTo(common::BIT, common::INTERVALYEAR))
		(FromTo(common::BIT, common::INTERVALDAY))
		(FromTo(common::FIXEDCHAR, common::TINYINT))
		(FromTo(common::FIXEDCHAR, common::INT))
		(FromTo(common::FIXEDCHAR, common::BIGINT))
		(FromTo(common::FIXEDCHAR, common::DECIMAL9))
		(FromTo(common::FIXEDCHAR, common::DECIMAL18))
		(FromTo(common::FIXEDCHAR, common::DECIMAL28SPARSE))
		(FromTo(common::FIXEDCHAR, common::DECIMAL38SPARSE))
		(FromTo(common::FIXEDCHAR, common::DATE))
		(FromTo(common::FIXEDCHAR, common::TIME))
		(FromTo(common::FIXEDCHAR, common::TIMESTAMP))
		(FromTo(common::FIXEDCHAR, common::INTERVAL))
		(FromTo(common::FIXEDCHAR, common::FLOAT4))
		(FromTo(common::FIXEDCHAR, common::FLOAT8))
		(FromTo(common::FIXEDCHAR, common::BIT))
		(FromTo(common::FIXEDCHAR, common::VARCHAR))
		(FromTo(common::FIXEDCHAR, common::VAR16CHAR))
		(FromTo(common::FIXEDCHAR, common::VARBINARY))
		(FromTo(common::FIXEDCHAR, common::INTERVALYEAR))
		(FromTo(common::FIXEDCHAR, common::INTERVALDAY))
		(FromTo(common::FIXED16CHAR, common::TINYINT))
		(FromTo(common::FIXED16CHAR, common::INT))
		(FromTo(common::FIXED16CHAR, common::BIGINT))
		(FromTo(common::FIXED16CHAR, common::DECIMAL9))
		(FromTo(common::FIXED16CHAR, common::DECIMAL18))
		(FromTo(common::FIXED16CHAR, common::DECIMAL28SPARSE))
		(FromTo(common::FIXED16CHAR, common::DECIMAL38SPARSE))
		(FromTo(common::FIXED16CHAR, common::DATE))
		(FromTo(common::FIXED16CHAR, common::TIME))
		(FromTo(common::FIXED16CHAR, common::TIMESTAMP))
		(FromTo(common::FIXED16CHAR, common::INTERVAL))
		(FromTo(common::FIXED16CHAR, common::FLOAT4))
		(FromTo(common::FIXED16CHAR, common::FLOAT8))
		(FromTo(common::FIXED16CHAR, common::BIT))
		(FromTo(common::FIXED16CHAR, common::VARCHAR))
		(FromTo(common::FIXED16CHAR, common::VAR16CHAR))
		(FromTo(common::FIXED16CHAR, common::VARBINARY))
		(FromTo(common::FIXED16CHAR, common::INTERVALYEAR))
		(FromTo(common::FIXED16CHAR, common::INTERVALDAY))
		(FromTo(common::FIXEDBINARY, common::INT))
		(FromTo(common::FIXEDBINARY, common::BIGINT))
		(FromTo(common::FIXEDBINARY, common::DECIMAL9))
		(FromTo(common::FIXEDBINARY, common::DECIMAL18))
		(FromTo(common::FIXEDBINARY, common::DECIMAL28SPARSE))
		(FromTo(common::FIXEDBINARY, common::DECIMAL38SPARSE))
		(FromTo(common::FIXEDBINARY, common::DATE))
		(FromTo(common::FIXEDBINARY, common::TIME))
		(FromTo(common::FIXEDBINARY, common::TIMESTAMP))
		(FromTo(common::FIXEDBINARY, common::INTERVAL))
		(FromTo(common::FIXEDBINARY, common::FLOAT4))
		(FromTo(common::FIXEDBINARY, common::FLOAT8))
		(FromTo(common::FIXEDBINARY, common::BIT))
		(FromTo(common::FIXEDBINARY, common::VARCHAR))
		(FromTo(common::FIXEDBINARY, common::VAR16CHAR))
		(FromTo(common::FIXEDBINARY, common::VARBINARY))
		(FromTo(common::FIXEDBINARY, common::INTERVALYEAR))
		(FromTo(common::FIXEDBINARY, common::INTERVALDAY))
		(FromTo(common::VARCHAR, common::TINYINT))
		(FromTo(common::VARCHAR, common::INT))
		(FromTo(common::VARCHAR, common::BIGINT))
		(FromTo(common::VARCHAR, common::DECIMAL9))
		(FromTo(common::VARCHAR, common::DECIMAL18))
		(FromTo(common::VARCHAR, common::DECIMAL28SPARSE))
		(FromTo(common::VARCHAR, common::DECIMAL38SPARSE))
		(FromTo(common::VARCHAR, common::DATE))
		(FromTo(common::VARCHAR, common::TIME))
		(FromTo(common::VARCHAR, common::TIMESTAMP))
		(FromTo(common::VARCHAR, common::INTERVAL))
		(FromTo(common::VARCHAR, common::FLOAT4))
		(FromTo(common::VARCHAR, common::FLOAT8))
		(FromTo(common::VARCHAR, common::BIT))
		(FromTo(common::VARCHAR, common::VARCHAR))
		(FromTo(common::VARCHAR, common::VAR16CHAR))
		(FromTo(common::VARCHAR, common::VARBINARY))
		(FromTo(common::VARCHAR, common::INTERVALYEAR))
		(FromTo(common::VARCHAR, common::INTERVALDAY))
		(FromTo(common::VAR16CHAR, common::TINYINT))
		(FromTo(common::VAR16CHAR, common::INT))
		(FromTo(common::VAR16CHAR, common::BIGINT))
		(FromTo(common::VAR16CHAR, common::DECIMAL9))
		(FromTo(common::VAR16CHAR, common::DECIMAL18))
		(FromTo(common::VAR16CHAR, common::DECIMAL28SPARSE))
		(FromTo(common::VAR16CHAR, common::DECIMAL38SPARSE))
		(FromTo(common::VAR16CHAR, common::DATE))
		(FromTo(common::VAR16CHAR, common::TIME))
		(FromTo(common::VAR16CHAR, common::TIMESTAMP))
		(FromTo(common::VAR16CHAR, common::INTERVAL))
		(FromTo(common::VAR16CHAR, common::FLOAT4))
		(FromTo(common::VAR16CHAR, common::FLOAT8))
		(FromTo(common::VAR16CHAR, common::BIT))
		(FromTo(common::VAR16CHAR, common::VARCHAR))
		(FromTo(common::VAR16CHAR, common::VARBINARY))
		(FromTo(common::VAR16CHAR, common::INTERVALYEAR))
		(FromTo(common::VAR16CHAR, common::INTERVALDAY))
		(FromTo(common::VARBINARY, common::TINYINT))
		(FromTo(common::VARBINARY, common::INT))
		(FromTo(common::VARBINARY, common::BIGINT))
		(FromTo(common::VARBINARY, common::DECIMAL9))
		(FromTo(common::VARBINARY, common::DECIMAL18))
		(FromTo(common::VARBINARY, common::DECIMAL28SPARSE))
		(FromTo(common::VARBINARY, common::DECIMAL38SPARSE))
		(FromTo(common::VARBINARY, common::DATE))
		(FromTo(common::VARBINARY, common::TIME))
		(FromTo(common::VARBINARY, common::TIMESTAMP))
		(FromTo(common::VARBINARY, common::INTERVAL))
		(FromTo(common::VARBINARY, common::FLOAT4))
		(FromTo(common::VARBINARY, common::FLOAT8))
		(FromTo(common::VARBINARY, common::BIT))
		(FromTo(common::VARBINARY, common::VARCHAR))
		(FromTo(common::VARBINARY, common::VAR16CHAR))
		(FromTo(common::VARBINARY, common::VARBINARY))
		(FromTo(common::VARBINARY, common::INTERVALYEAR))
		(FromTo(common::VARBINARY, common::INTERVALDAY))
		(FromTo(common::UINT1, common::INT))
		(FromTo(common::UINT1, common::BIGINT))
		(FromTo(common::UINT1, common::DECIMAL9))
		(FromTo(common::UINT1, common::DECIMAL18))
		(FromTo(common::UINT1, common::DECIMAL28SPARSE))
		(FromTo(common::UINT1, common::DECIMAL38SPARSE))
		(FromTo(common::UINT1, common::DATE))
		(FromTo(common::UINT1, common::TIME))
		(FromTo(common::UINT1, common::TIMESTAMP))
		(FromTo(common::UINT1, common::INTERVAL))
		(FromTo(common::UINT1, common::FLOAT4))
		(FromTo(common::UINT1, common::FLOAT8))
		(FromTo(common::UINT1, common::BIT))
		(FromTo(common::UINT1, common::VARCHAR))
		(FromTo(common::UINT1, common::VAR16CHAR))
		(FromTo(common::UINT1, common::VARBINARY))
		(FromTo(common::UINT1, common::INTERVALYEAR))
		(FromTo(common::UINT1, common::INTERVALDAY))
		(FromTo(common::UINT2, common::INT))
		(FromTo(common::UINT2, common::BIGINT))
		(FromTo(common::UINT2, common::DECIMAL9))
		(FromTo(common::UINT2, common::DECIMAL18))
		(FromTo(common::UINT2, common::DECIMAL28SPARSE))
		(FromTo(common::UINT2, common::DECIMAL38SPARSE))
		(FromTo(common::UINT2, common::DATE))
		(FromTo(common::UINT2, common::TIME))
		(FromTo(common::UINT2, common::TIMESTAMP))
		(FromTo(common::UINT2, common::INTERVAL))
		(FromTo(common::UINT2, common::FLOAT4))
		(FromTo(common::UINT2, common::FLOAT8))
		(FromTo(common::UINT2, common::BIT))
		(FromTo(common::UINT2, common::VARCHAR))
		(FromTo(common::UINT2, common::VAR16CHAR))
		(FromTo(common::UINT2, common::VARBINARY))
		(FromTo(common::UINT2, common::INTERVALYEAR))
		(FromTo(common::UINT2, common::INTERVALDAY))
		(FromTo(common::UINT4, common::INT))
		(FromTo(common::UINT4, common::BIGINT))
		(FromTo(common::UINT4, common::DECIMAL9))
		(FromTo(common::UINT4, common::DECIMAL18))
		(FromTo(common::UINT4, common::DECIMAL28SPARSE))
		(FromTo(common::UINT4, common::DECIMAL38SPARSE))
		(FromTo(common::UINT4, common::DATE))
		(FromTo(common::UINT4, common::TIME))
		(FromTo(common::UINT4, common::TIMESTAMP))
		(FromTo(common::UINT4, common::INTERVAL))
		(FromTo(common::UINT4, common::FLOAT4))
		(FromTo(common::UINT4, common::FLOAT8))
		(FromTo(common::UINT4, common::BIT))
		(FromTo(common::UINT4, common::VARCHAR))
		(FromTo(common::UINT4, common::VAR16CHAR))
		(FromTo(common::UINT4, common::VARBINARY))
		(FromTo(common::UINT4, common::INTERVALYEAR))
		(FromTo(common::UINT4, common::INTERVALDAY))
		(FromTo(common::UINT8, common::INT))
		(FromTo(common::UINT8, common::BIGINT))
		(FromTo(common::UINT8, common::DECIMAL9))
		(FromTo(common::UINT8, common::DECIMAL18))
		(FromTo(common::UINT8, common::DECIMAL28SPARSE))
		(FromTo(common::UINT8, common::DECIMAL38SPARSE))
		(FromTo(common::UINT8, common::DATE))
		(FromTo(common::UINT8, common::TIME))
		(FromTo(common::UINT8, common::TIMESTAMP))
		(FromTo(common::UINT8, common::INTERVAL))
		(FromTo(common::UINT8, common::FLOAT4))
		(FromTo(common::UINT8, common::FLOAT8))
		(FromTo(common::UINT8, common::BIT))
		(FromTo(common::UINT8, common::VARCHAR))
		(FromTo(common::UINT8, common::VAR16CHAR))
		(FromTo(common::UINT8, common::VARBINARY))
		(FromTo(common::UINT8, common::INTERVALYEAR))
		(FromTo(common::UINT8, common::INTERVALDAY))
		(FromTo(common::DECIMAL28DENSE, common::INT))
		(FromTo(common::DECIMAL28DENSE, common::BIGINT))
		(FromTo(common::DECIMAL28DENSE, common::DECIMAL9))
		(FromTo(common::DECIMAL28DENSE, common::DECIMAL18))
		(FromTo(common::DECIMAL28DENSE, common::DECIMAL28SPARSE))
		(FromTo(common::DECIMAL28DENSE, common::DECIMAL38SPARSE))
		(FromTo(common::DECIMAL28DENSE, common::DATE))
		(FromTo(common::DECIMAL28DENSE, common::TIME))
		(FromTo(common::DECIMAL28DENSE, common::TIMESTAMP))
		(FromTo(common::DECIMAL28DENSE, common::INTERVAL))
		(FromTo(common::DECIMAL28DENSE, common::FLOAT4))
		(FromTo(common::DECIMAL28DENSE, common::FLOAT8))
		(FromTo(common::DECIMAL28DENSE, common::BIT))
		(FromTo(common::DECIMAL28DENSE, common::VARCHAR))
		(FromTo(common::DECIMAL28DENSE, common::VAR16CHAR))
		(FromTo(common::DECIMAL28DENSE, common::VARBINARY))
		(FromTo(common::DECIMAL28DENSE, common::INTERVALYEAR))
		(FromTo(common::DECIMAL28DENSE, common::INTERVALDAY))
		(FromTo(common::DECIMAL38DENSE, common::INT))
		(FromTo(common::DECIMAL38DENSE, common::BIGINT))
		(FromTo(common::DECIMAL38DENSE, common::DECIMAL9))
		(FromTo(common::DECIMAL38DENSE, common::DECIMAL18))
		(FromTo(common::DECIMAL38DENSE, common::DECIMAL28SPARSE))
		(FromTo(common::DECIMAL38DENSE, common::DECIMAL38SPARSE))
		(FromTo(common::DECIMAL38DENSE, common::DATE))
		(FromTo(common::DECIMAL38DENSE, common::TIME))
		(FromTo(common::DECIMAL38DENSE, common::TIMESTAMP))
		(FromTo(common::DECIMAL38DENSE, common::INTERVAL))
		(FromTo(common::DECIMAL38DENSE, common::FLOAT4))
		(FromTo(common::DECIMAL38DENSE, common::FLOAT8))
		(FromTo(common::DECIMAL38DENSE, common::BIT))
		(FromTo(common::DECIMAL38DENSE, common::VARCHAR))
		(FromTo(common::DECIMAL38DENSE, common::VAR16CHAR))
		(FromTo(common::DECIMAL38DENSE, common::VARBINARY))
		(FromTo(common::DECIMAL38DENSE, common::INTERVALYEAR))
		(FromTo(common::DECIMAL38DENSE, common::INTERVALDAY))
		(FromTo(common::DM_UNKNOWN, common::TINYINT))
		(FromTo(common::DM_UNKNOWN, common::INT))
		(FromTo(common::DM_UNKNOWN, common::BIGINT))
		(FromTo(common::DM_UNKNOWN, common::DECIMAL9))
		(FromTo(common::DM_UNKNOWN, common::DECIMAL18))
		(FromTo(common::DM_UNKNOWN, common::DECIMAL28SPARSE))
		(FromTo(common::DM_UNKNOWN, common::DECIMAL38SPARSE))
		(FromTo(common::DM_UNKNOWN, common::DATE))
		(FromTo(common::DM_UNKNOWN, common::TIME))
		(FromTo(common::DM_UNKNOWN, common::TIMESTAMP))
		(FromTo(common::DM_UNKNOWN, common::INTERVAL))
		(FromTo(common::DM_UNKNOWN, common::FLOAT4))
		(FromTo(common::DM_UNKNOWN, common::FLOAT8))
		(FromTo(common::DM_UNKNOWN, common::BIT))
		(FromTo(common::DM_UNKNOWN, common::VARCHAR))
		(FromTo(common::DM_UNKNOWN, common::VAR16CHAR))
		(FromTo(common::DM_UNKNOWN, common::VARBINARY))
		(FromTo(common::DM_UNKNOWN, common::INTERVALYEAR))
		(FromTo(common::DM_UNKNOWN, common::INTERVALDAY))
		(FromTo(common::INTERVALYEAR, common::INT))
		(FromTo(common::INTERVALYEAR, common::BIGINT))
		(FromTo(common::INTERVALYEAR, common::DECIMAL9))
		(FromTo(common::INTERVALYEAR, common::DECIMAL18))
		(FromTo(common::INTERVALYEAR, common::DECIMAL28SPARSE))
		(FromTo(common::INTERVALYEAR, common::DECIMAL38SPARSE))
		(FromTo(common::INTERVALYEAR, common::DATE))
		(FromTo(common::INTERVALYEAR, common::TIME))
		(FromTo(common::INTERVALYEAR, common::TIMESTAMP))
		(FromTo(common::INTERVALYEAR, common::INTERVAL))
		(FromTo(common::INTERVALYEAR, common::FLOAT4))
		(FromTo(common::INTERVALYEAR, common::FLOAT8))
		(FromTo(common::INTERVALYEAR, common::BIT))
		(FromTo(common::INTERVALYEAR, common::VARCHAR))
		(FromTo(common::INTERVALYEAR, common::VAR16CHAR))
		(FromTo(common::INTERVALYEAR, common::VARBINARY))
		(FromTo(common::INTERVALYEAR, common::INTERVALYEAR))
		(FromTo(common::INTERVALYEAR, common::INTERVALDAY))
		(FromTo(common::INTERVALDAY, common::INT))
		(FromTo(common::INTERVALDAY, common::BIGINT))
		(FromTo(common::INTERVALDAY, common::DECIMAL9))
		(FromTo(common::INTERVALDAY, common::DECIMAL18))
		(FromTo(common::INTERVALDAY, common::DECIMAL28SPARSE))
		(FromTo(common::INTERVALDAY, common::DECIMAL38SPARSE))
		(FromTo(common::INTERVALDAY, common::DATE))
		(FromTo(common::INTERVALDAY, common::TIME))
		(FromTo(common::INTERVALDAY, common::TIMESTAMP))
		(FromTo(common::INTERVALDAY, common::INTERVAL))
		(FromTo(common::INTERVALDAY, common::FLOAT4))
		(FromTo(common::INTERVALDAY, common::FLOAT8))
		(FromTo(common::INTERVALDAY, common::BIT))
		(FromTo(common::INTERVALDAY, common::VARCHAR))
		(FromTo(common::INTERVALDAY, common::VAR16CHAR))
		(FromTo(common::INTERVALDAY, common::VARBINARY))
		(FromTo(common::INTERVALDAY, common::INTERVALYEAR))
		(FromTo(common::INTERVALDAY, common::INTERVALDAY));
} // anonymous namespace

// Conversion scalar function support
bool DrillMetadata::isConvertSupported(common::MinorType from, common::MinorType to) const {
	return s_convertMap.find(FromTo(from,to)) != s_convertMap.end();
}

const std::string& DrillMetadata::getServerName() const {
	return m_client.getServerInfos().name();
}
const std::string& DrillMetadata::getServerVersion() const {
	return m_client.getServerInfos().version();
}
uint32_t DrillMetadata::getServerMajorVersion() const {
	return m_client.getServerInfos().majorversion();
}

uint32_t DrillMetadata::getServerMinorVersion() const {
	return m_client.getServerInfos().minorversion();
}

uint32_t DrillMetadata::getServerPatchVersion() const {
	return m_client.getServerInfos().patchversion();
}

status_t DrillMetadata::getCatalogs(const std::string& catalogPattern, Metadata::pfnCatalogMetadataListener listener, void* listenerCtx, QueryHandle_t* qHandle) {
	DrillClientCatalogResult* result = m_client.getCatalogs(catalogPattern, listener, listenerCtx);
	if(result==NULL){
		*qHandle=NULL;
		return static_cast<status_t>(m_client.getError()->status);
	}
	*qHandle=reinterpret_cast<QueryHandle_t>(result);
	return QRY_SUCCESS;
}
status_t DrillMetadata::getSchemas(const std::string& catalogPattern, const std::string& schemaPattern, Metadata::pfnSchemaMetadataListener listener, void* listenerCtx, QueryHandle_t* qHandle) {
	DrillClientSchemaResult* result = m_client.getSchemas(catalogPattern, schemaPattern, listener, listenerCtx);
	if(result==NULL){
		*qHandle=NULL;
		return static_cast<status_t>(m_client.getError()->status);
	}
	*qHandle=reinterpret_cast<QueryHandle_t>(result);
	return QRY_SUCCESS;
}
status_t DrillMetadata::getTables(const std::string& catalogPattern, const std::string& schemaPattern, const std::string& tablePattern, const std::vector<std::string>* tableTypes, Metadata::pfnTableMetadataListener listener, void* listenerCtx, QueryHandle_t* qHandle) {
	DrillClientTableResult* result = m_client.getTables(catalogPattern, schemaPattern, tablePattern, tableTypes, listener, listenerCtx);
	if(result==NULL){
		*qHandle=NULL;
		return static_cast<status_t>(m_client.getError()->status);
	}
	*qHandle=reinterpret_cast<QueryHandle_t>(result);
	return QRY_SUCCESS;
}
status_t DrillMetadata::getColumns(const std::string& catalogPattern, const std::string& schemaPattern, const std:: string& tablePattern, const std::string& columnPattern, Metadata::pfnColumnMetadataListener listener, void* listenerCtx, QueryHandle_t* qHandle) {
	DrillClientColumnResult* result = m_client.getColumns(catalogPattern, schemaPattern, tablePattern, columnPattern, listener, listenerCtx);
	if(result==NULL){
		*qHandle=NULL;
		return static_cast<status_t>(m_client.getError()->status);
	}
	*qHandle=reinterpret_cast<QueryHandle_t>(result);
	return QRY_SUCCESS;
}
} // namespace meta
} // namespace Drill
