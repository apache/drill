<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->


<schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
        xmlns="http://www.w3.org/2001/XMLSchema"
        xmlns:dfdl="http://www.ogf.org/dfdl/dfdl-1.0/"
        xmlns:dfdlx="http://www.ogf.org/dfdl/dfdl-1.0/extensions"
        xmlns:fn="http://www.w3.org/2005/xpath-functions"
        xmlns:daf="urn:ogf:dfdl:2013:imp:daffodil.apache.org:2018:ext"
        xmlns:ex="http://example.com"
        targetNamespace="http://example.com">

  <include schemaLocation="/org/apache/daffodil/xsd/DFDLGeneralFormat.dfdl.xsd" />

  <annotation>
    <appinfo source="http://www.ogf.org/dfdl/">
      <dfdl:format ref="ex:GeneralFormat" representation="binary"/>
    </appinfo>
  </annotation>

  <!--
The simplest legal DFDL/XSD schema is a docRoot and a repeating row within.

Drill wants that repeating record to become the 'table'. It's children are the
columns of the row set.

This is hard to implement. For now we require the row to simply be available
as an element in the schema.
-->
  <element name="docRoot" type="ex:repeatingRowType"/>

  <complexType name="repeatingRowType">
    <sequence>
      <element name="row" type="ex:rowType" maxOccurs="unbounded"/>
    </sequence>
  </complexType>

  <!--
Drill's control pattern requires that, for the top-level rows, it is in control
of when a row can be populated, based on Drill's space management.

We may need a modification to Daffodil to enable it to get this row element declaration
without array-like behavior, from a schema that doesn't actually have that.
-->
  <element name="row" type="ex:rowType"/>

  <complexType name="rowType">
    <sequence>
      <element name="col" type="xs:int" maxOccurs="unbounded"/>
    </sequence>
  </complexType>



</schema>
