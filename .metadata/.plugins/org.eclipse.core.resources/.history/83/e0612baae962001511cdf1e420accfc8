/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.drill.exec.store.solr;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

public class SolrStorageProperties {
  @JsonProperty
  private String solrSchemaUrl = "";
  @JsonIgnore
  private boolean createViews = false;
  @JsonIgnore
  private int rowStart = 0;
  @JsonIgnore
  private int maxPageSize = 1000000;
  @JsonIgnore
  private int maxRowSize = 0;

  public boolean isCreateViews() {
    return createViews;
  }

  public void setCreateViews(boolean createViews) {
    this.createViews = createViews;
  }

  public String getSolrSchemaUrl() {
    return solrSchemaUrl;
  }

  public void setSolrSchemaUrl(String solrSchemaUrl) {
    this.solrSchemaUrl = solrSchemaUrl;
  }

  public int getRowStart() {
    return rowStart;
  }

  public int getMaxPageSize() {
    return maxPageSize;
  }

  public void setRowStart(int rowStart) {
    this.rowStart = rowStart;
  }

  public void setMaxPageSize(int maxPageSize) {
    this.maxPageSize = maxPageSize;
  }

}
