/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.drill.exec.store.solr;

import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.apache.drill.common.exceptions.ExecutionSetupException;
import org.apache.drill.common.expression.SchemaPath;
import org.apache.drill.common.types.TypeProtos;
import org.apache.drill.common.types.TypeProtos.MajorType;
import org.apache.drill.exec.ops.FragmentContext;
import org.apache.drill.exec.ops.OperatorContext;
import org.apache.drill.exec.physical.impl.OutputMutator;
import org.apache.drill.exec.record.MaterializedField;
import org.apache.drill.exec.store.AbstractRecordReader;
import org.apache.drill.exec.store.solr.schema.CVSchemaField;
import org.apache.drill.exec.vector.NullableBigIntVector;
import org.apache.drill.exec.vector.NullableVarCharVector;
import org.apache.drill.exec.vector.ValueVector;
import org.apache.solr.client.solrj.SolrClient;
import org.apache.solr.client.solrj.response.FieldStatsInfo;
import org.apache.solr.client.solrj.response.QueryResponse;
import org.apache.solr.common.SolrDocument;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.google.common.collect.Lists;

public class SolrAggrReader extends AbstractRecordReader {
  static final Logger logger = LoggerFactory.getLogger(SolrAggrReader.class);

  private FragmentContext fc;
  protected List<ValueVector> vectors = Lists.newArrayList();
  protected String solrServerUrl;
  protected SolrClient solrClient;
  protected SolrSubScan solrSubScan;
  protected List<SolrScanSpec> scanList;
  protected SolrClientAPIExec solrClientApiExec;
  protected OutputMutator outputMutator;
  protected List<String> fields;
  private MajorType.Builder t;
  private Map<String, CVSchemaField> schemaFieldMap;
  Map<String, FieldStatsInfo> fieldStatsInfoMap;

  public SolrAggrReader(FragmentContext context, SolrSubScan config) {
    fc = context;
    solrSubScan = config;

    solrServerUrl = solrSubScan.getSolrPlugin().getSolrStorageConfig()
        .getSolrServer();
    scanList = solrSubScan.getScanList();
    solrClientApiExec = solrSubScan.getSolrPlugin().getSolrClientApiExec();
    solrClient = solrSubScan.getSolrPlugin().getSolrClient();

    String solrCoreName = scanList.get(0).getSolrCoreName();
    List<SchemaPath> colums = config.getColumns();
    SolrFilterParam filters = config.getSolrScanSpec().getFilter();
    List<SolrAggrParam> solrAggrParams = config.getSolrScanSpec()
        .getAggrParams();

    StringBuilder sb = new StringBuilder();

    if (filters != null) {
      for (String filter : filters) {
        sb.append(filter);
      }
    }
    if (!solrAggrParams.isEmpty()) {
      QueryResponse queryRsp = solrClientApiExec.getSolrFieldStats(
          solrServerUrl, solrCoreName, this.fields, sb);
      if (queryRsp != null) {
        fieldStatsInfoMap = queryRsp.getFieldStatsInfo();        
      }
    }

  }

  @Override
  public void setup(OperatorContext context, OutputMutator output)
      throws ExecutionSetupException {
    logger.debug("SolrRecordReader :: setup");
    if (fieldStatsInfoMap!=null) {
      Set<String> fieldNames = fieldStatsInfoMap.keySet();
      try {
        for (String field : fieldNames) {
          MaterializedField m_field = null;
          CVSchemaField cvSchemaField = schemaFieldMap.get(field);
          if (cvSchemaField != null) {
            logger.trace(" column field name ::" + cvSchemaField.getFieldName()
                + " type " + cvSchemaField.getType());
            
              t = MajorType.newBuilder().setMinorType(
                  TypeProtos.MinorType.BIGINT);
              m_field = MaterializedField.create(field, t.build());
              vectors.add(output.addField(m_field, NullableBigIntVector.class));
              break;
            
  }

  @Override
  public int next() {
    return 0;
  }

  @Override
  public void cleanup() {

  }

}
