package org.apache.drill.exec.store.solr;

import org.apache.drill.common.expression.BooleanOperator;
import org.apache.drill.common.expression.FunctionHolderExpression;
import org.apache.drill.common.expression.LogicalExpression;
import org.apache.drill.common.expression.visitors.AbstractExprVisitor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SolrAggrQueryBuilder extends
    AbstractExprVisitor<SolrScanSpec, Void, RuntimeException> {

  static final Logger logger = LoggerFactory.getLogger(SolrQueryBuilder.class);
  final SolrGroupScan groupScan;
  final LogicalExpression le;
  private boolean allExpressionsConverted = true;

  public SolrAggrQueryBuilder(SolrGroupScan solrGroupScan,
      LogicalExpression conditionExp) {
    this.groupScan = solrGroupScan;
    this.le = conditionExp;
    logger.debug("SolrAggrQueryBuilder :: constructor");
  }
  public SolrScanSpec parseTree() {
    logger.debug("SolrQueryBuilder :: parseTree");
    SolrScanSpec parsedSpec = le.accept(this, null);
    if (parsedSpec != null) {
      parsedSpec = mergeScanSpecs("booleanAnd",
          this.groupScan.getSolrScanSpec(), parsedSpec);
    }
    return parsedSpec;
  }
  
  @Override
  public SolrScanSpec visitUnknown(LogicalExpression e, Void valueArg)
      throws RuntimeException {
    logger.info("SolrQueryBuilder :: visitUnknown");
    allExpressionsConverted = false;
    return null;
  }

  public boolean isAllExpressionsConverted() {
    return allExpressionsConverted;
  }

  @Override
  public SolrScanSpec visitFunctionHolderExpression(
      FunctionHolderExpression fhe, Void valueArg) {
    logger.info("SolrQueryBuilder :: visitFunctionHolderExpression");

    return null;

  }

  @Override
  public SolrScanSpec visitBooleanOperator(BooleanOperator op, Void valueArg) {
    return null;
  }
  
}
