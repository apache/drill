/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.drill.exec.store.solr;

import org.apache.calcite.plan.RelOptRule;
import org.apache.calcite.plan.RelOptRuleCall;
import org.apache.calcite.plan.RelOptRuleOperand;
import org.apache.drill.exec.planner.logical.DrillFilterRel;
import org.apache.drill.exec.planner.logical.DrillProjectRel;
import org.apache.drill.exec.planner.logical.DrillScanRel;
import org.apache.drill.exec.planner.logical.RelOptHelper;
import org.apache.drill.exec.planner.logical.partition.PruneScanRule;
import org.apache.drill.exec.planner.physical.FilterPrel;
import org.apache.drill.exec.planner.physical.ScanPrel;
import org.apache.drill.exec.store.StoragePluginOptimizerRule;

public class SolrAggOptimizerRule extends StoragePluginOptimizerRule {
  static final org.slf4j.Logger logger = org.slf4j.LoggerFactory
      .getLogger(SolrAggOptimizerRule.class);
  public static final SolrAggOptimizerRule INSTANCE = new SolrAggOptimizerRule();

  public SolrAggOptimizerRule(RelOptRuleOperand operand, String description) {
    super(operand, description);

  }

  public SolrAggOptimizerRule() {
    super(RelOptHelper.some(
        DrillProjectRel.class,
        RelOptHelper.some(DrillProjectRel.class,
            RelOptHelper.any(DrillScanRel.class))), "SolrAggOptimizerRule");
  }

  @Override
  public void onMatch(RelOptRuleCall call) {
    final DrillFilterRel filterRel = (DrillFilterRel) call.rel(0);
    final DrillProjectRel projectRel = (DrillProjectRel) call.rel(1);
    final DrillScanRel scanRel = (DrillScanRel) call.rel(2);

    logger
        .info(" SolrAggOptimizerRule :: " + call + " DrillProjectRel " + projectRel+" DrillScanRel "+scanRel);

  }

}
